
export function Chapter3AllTypes() {
  const innerHTML = `<h1>Chapter 3: 类型全解</h1>
<p><code>unknown</code> 表示任何值，但是当进行特定操作前 ts 会要求细化类型</p>
<ol>
<li>ts 不会把任何值推导为 <code>unknown</code>，需要显式指定</li>
<li><code>unknown</code> 类型变量可以比较</li>
</ol>
<pre class="shiki light-plus twoslash lsp" style="background-color: #FFFFFF; color: #000000"><div class="language-id">ts</div><div class='code-container'><code><div class='line'><span style="color: #0000FF">let</span><span style="color: #000000"> </span><span style="color: #001080"><data-lsp lsp='let a: unknown' >a</data-lsp></span><span style="color: #000000">: </span><span style="color: #267F99">unknown</span><span style="color: #000000">;</span></div><div class='line'><span style="color: #0000FF">let</span><span style="color: #000000"> </span><span style="color: #001080"><data-lsp lsp='let b: boolean' >b</data-lsp></span><span style="color: #000000"> = </span><span style="color: #001080"><data-lsp lsp='let a: unknown' >a</data-lsp></span><span style="color: #000000"> === </span><span style="color: #098658">123</span><span style="color: #000000">;</span></div><div class='line'><span style="color: #0000FF">let</span><span style="color: #000000"> </span><span style="color: #001080"><data-lsp lsp='let c: any' >c</data-lsp></span><span style="color: #000000"> = </span><span style="color: #001080"><data-err><data-lsp lsp='let a: unknown' >a</data-lsp></data-err></span><span style="color: #000000"> + </span><span style="color: #098658">10</span><span style="color: #000000">;</span></div><span class="error"><span>Object is of type 'unknown'.</span><span class="code">2571</span></span><span class="error-behind">Object is of type 'unknown'.</span><div class='line'><span style="color: #AF00DB">if</span><span style="color: #000000"> (</span><span style="color: #0000FF">typeof</span><span style="color: #000000"> </span><span style="color: #001080"><data-lsp lsp='let a: unknown' >a</data-lsp></span><span style="color: #000000"> === </span><span style="color: #A31515">"number"</span><span style="color: #000000">) {</span></div><div class='line'><span style="color: #000000">  </span><span style="color: #0000FF">let</span><span style="color: #000000"> </span><span style="color: #001080"><data-lsp lsp='let d: number' >d</data-lsp></span><span style="color: #000000"> = </span><span style="color: #001080"><data-lsp lsp='let a: number' >a</data-lsp></span><span style="color: #000000"> + </span><span style="color: #098658">10</span><span style="color: #000000">;</span></div><div class='line'><span style="color: #000000">}</span></div></code></div></pre>
<p>类型字面量：仅表示一个值的类型</p>
<pre class="shiki light-plus twoslash lsp" style="background-color: #FFFFFF; color: #000000"><div class="language-id">ts</div><div class='code-container'><code><div class='line'><span style="color: #0000FF">let</span><span style="color: #000000"> </span><span style="color: #001080"><data-lsp lsp='let real: true' >real</data-lsp></span><span style="color: #000000">: </span><span style="color: #267F99">true</span><span style="color: #000000"> = </span><span style="color: #0000FF">true</span><span style="color: #000000">;</span></div><div class='line'><span style="color: #0000FF">let</span><span style="color: #000000"> </span><span style="color: #001080"><data-lsp lsp='let exact: 1' >exact</data-lsp></span><span style="color: #000000">: </span><span style="color: #098658">1</span><span style="color: #000000"> = </span><span style="color: #098658">1</span><span style="color: #000000">;</span></div></code></div></pre>
<p><code>object</code> 类型表示一个非 <code>null</code> 的对象，但是对值得访问一无所知</p>
<pre class="shiki light-plus twoslash lsp" style="background-color: #FFFFFF; color: #000000"><div class="language-id">ts</div><div class='code-container'><code><div class='line'><span style="color: #0000FF">let</span><span style="color: #000000"> </span><span style="color: #001080"><data-lsp lsp='let message: object' >message</data-lsp></span><span style="color: #000000">: </span><span style="color: #267F99">object</span><span style="color: #000000"> = { </span><span style="color: #001080"><data-lsp lsp='(property) name: string' >name</data-lsp>:</span><span style="color: #000000"> </span><span style="color: #A31515">"hello"</span><span style="color: #000000"> };</span></div><div class='line'><span style="color: #001080"><data-lsp lsp='let message: object' >message</data-lsp></span><span style="color: #000000">.</span><span style="color: #001080"><data-err><data-lsp lsp='any' >name</data-lsp></data-err></span><span style="color: #000000">;</span></div><span class="error"><span>Property 'name' does not exist on type 'object'.</span><span class="code">2339</span></span><span class="error-behind">Property 'name' does not exist on type 'object'.</span></code></div></pre>
<p>class constructor 中的 <code>public</code> 是 <code>this.property = property</code> 的简写</p>
<pre class="shiki light-plus twoslash lsp" style="background-color: #FFFFFF; color: #000000"><div class="language-id">ts</div><div class='code-container'><code><div class='line'><span style="color: #0000FF">class</span><span style="color: #000000"> </span><span style="color: #267F99"><data-lsp lsp='class Person' >Person</data-lsp></span><span style="color: #000000"> {</span></div><div class='line'><span style="color: #000000">  </span><span style="color: #0000FF">constructor</span><span style="color: #000000">(</span><span style="color: #0000FF">public</span><span style="color: #000000"> </span><span style="color: #001080"><data-lsp lsp='(property) Person.name: string' >name</data-lsp></span><span style="color: #000000">: </span><span style="color: #267F99">string</span><span style="color: #000000">) {}</span></div><div class='line'><span style="color: #000000">  </span><span style="color: #008000">// 等价于：</span></div><div class='line'><span style="color: #000000">  </span><span style="color: #008000">// constructor(name: string) { this.name = name; }</span></div><div class='line'><span style="color: #000000">}</span></div></code></div></pre>
<p><code>{}</code> 和 <code>Object</code> 也可以用来声明对象类型，有细微差别，不推荐使用（P41）</p>
<p>类型别名使用块级作用域</p>
<pre class="shiki light-plus twoslash lsp" style="background-color: #FFFFFF; color: #000000"><div class="language-id">ts</div><div class='code-container'><code><div class='line'><span style="color: #0000FF">function</span><span style="color: #000000"> </span><span style="color: #795E26"><data-lsp lsp='function test(): void' >test</data-lsp></span><span style="color: #000000">() {</span></div><div class='line'><span style="color: #000000">  </span><span style="color: #0000FF">type</span><span style="color: #000000"> </span><span style="color: #267F99"><data-lsp lsp='type Person = {&#10;    name: string;&#10;}' >Person</data-lsp></span><span style="color: #000000"> = { </span><span style="color: #001080"><data-lsp lsp='(property) name: string' >name</data-lsp></span><span style="color: #000000">: </span><span style="color: #267F99">string</span><span style="color: #000000"> };</span></div><div class='line'><span style="color: #000000">  </span><span style="color: #AF00DB">if</span><span style="color: #000000"> (</span><span style="color: #267F99"><data-lsp lsp='var Math: Math' >Math</data-lsp></span><span style="color: #000000">.</span><span style="color: #795E26"><data-lsp lsp='(method) Math.random(): number' >random</data-lsp></span><span style="color: #000000">() &gt; </span><span style="color: #098658">0.5</span><span style="color: #000000">) {</span></div><div class='line'><span style="color: #000000">    </span><span style="color: #0000FF">type</span><span style="color: #000000"> </span><span style="color: #267F99"><data-lsp lsp='type Person = {&#10;    age: number;&#10;}' >Person</data-lsp></span><span style="color: #000000"> = { </span><span style="color: #001080"><data-lsp lsp='(property) age: number' >age</data-lsp></span><span style="color: #000000">: </span><span style="color: #267F99">number</span><span style="color: #000000"> };</span></div><div class='line'><span style="color: #000000">    </span><span style="color: #0000FF">let</span><span style="color: #000000"> </span><span style="color: #001080"><data-lsp lsp='let person: Person' >person</data-lsp></span><span style="color: #000000">: </span><span style="color: #267F99"><data-lsp lsp='type Person = {&#10;    age: number;&#10;}' >Person</data-lsp></span><span style="color: #000000">;</span></div><div class='line'><span style="color: #000000">  }</span></div><div class='line'><span style="color: #000000">}</span></div></code></div></pre>
<p>元组</p>
<ul>
<li>支持可选符号 ?</li>
<li>支持剩余元素 ...</li>
</ul>
<pre class="shiki light-plus twoslash lsp" style="background-color: #FFFFFF; color: #000000"><div class="language-id">ts</div><div class='code-container'><code><div class='line'><span style="color: #0000FF">let</span><span style="color: #000000"> </span><span style="color: #001080"><data-lsp lsp='let ticket: [string, number]' >ticket</data-lsp></span><span style="color: #000000">: [</span><span style="color: #267F99">string</span><span style="color: #000000">, </span><span style="color: #267F99">number</span><span style="color: #000000">] = [</span><span style="color: #A31515">"bqh"</span><span style="color: #000000">, </span><span style="color: #098658">10185</span><span style="color: #000000">];</span></div><div class='line'><span style="color: #0000FF">let</span><span style="color: #000000"> </span><span style="color: #001080"><data-lsp lsp='let trains: [string, (number | undefined)?][]' >trains</data-lsp></span><span style="color: #000000">: [</span><span style="color: #267F99">string</span><span style="color: #000000">, </span><span style="color: #267F99">number</span><span style="color: #000000">?][] = [[</span><span style="color: #A31515">"a"</span><span style="color: #000000">, </span><span style="color: #098658">123</span><span style="color: #000000">], [</span><span style="color: #A31515">"b"</span><span style="color: #000000">]];</span></div><div class='line'><span style="color: #0000FF">let</span><span style="color: #000000"> </span><span style="color: #001080"><data-lsp lsp='let list: [number, boolean, ...string[]]' >list</data-lsp></span><span style="color: #000000">: [</span><span style="color: #267F99">number</span><span style="color: #000000">, </span><span style="color: #267F99">boolean</span><span style="color: #000000">, ...</span><span style="color: #267F99">string</span><span style="color: #000000">[]] = [</span><span style="color: #098658">1</span><span style="color: #000000">, </span><span style="color: #0000FF">true</span><span style="color: #000000">, </span><span style="color: #A31515">"a"</span><span style="color: #000000">, </span><span style="color: #A31515">"b"</span><span style="color: #000000">, </span><span style="color: #A31515">"c"</span><span style="color: #000000">];</span></div></code></div></pre>
<p>数组类型有 <code>readonly</code> 标识，只读数组不再能被改变</p>
<pre class="shiki light-plus twoslash lsp" style="background-color: #FFFFFF; color: #000000"><div class="language-id">ts</div><div class='code-container'><code><div class='line'><span style="color: #0000FF">let</span><span style="color: #000000"> </span><span style="color: #001080"><data-lsp lsp='let arr: readonly number[]' >arr</data-lsp></span><span style="color: #000000">: </span><span style="color: #0000FF">readonly</span><span style="color: #000000"> </span><span style="color: #267F99">number</span><span style="color: #000000">[] = [</span><span style="color: #098658">1</span><span style="color: #000000">, </span><span style="color: #098658">2</span><span style="color: #000000">, </span><span style="color: #098658">3</span><span style="color: #000000">];</span></div><div class='line'><span style="color: #001080"><data-lsp lsp='let arr: readonly number[]' >arr</data-lsp></span><span style="color: #000000">[</span><span style="color: #098658">1</span><span style="color: #000000">] = </span><span style="color: #098658">2</span><span style="color: #000000">;</span></div><span class="error"><span>Index signature in type 'readonly number[]' only permits reading.</span><span class="code">2542</span></span><span class="error-behind">Index signature in type 'readonly number[]' only permits reading.</span><div class='line'><span style="color: #001080"><data-lsp lsp='let arr: readonly number[]' >arr</data-lsp></span><span style="color: #000000">.</span><span style="color: #795E26"><data-err><data-lsp lsp='any' >push</data-lsp></data-err></span><span style="color: #000000">(</span><span style="color: #098658">1</span><span style="color: #000000">);</span></div><span class="error"><span>Property 'push' does not exist on type 'readonly number[]'.</span><span class="code">2339</span></span><span class="error-behind">Property 'push' does not exist on type 'readonly number[]'.</span></code></div></pre>
<ul>
<li><code>void</code> 可表示无显式返回值函数的返回类型，例如 <code>console.log()</code></li>
<li><code>never</code> 可表示不会结束或抛出异常的的函数的返回类型</li>
<li><code>never</code> 值可以赋值给任何类型的变量</li>
</ul>
<pre class="shiki light-plus twoslash lsp" style="background-color: #FFFFFF; color: #000000"><div class="language-id">ts</div><div class='code-container'><code><div class='line'><span style="color: #0000FF">function</span><span style="color: #000000"> </span><span style="color: #795E26"><data-lsp lsp='function error(message: string): never' >error</data-lsp></span><span style="color: #000000">(</span><span style="color: #001080"><data-lsp lsp='(parameter) message: string' >message</data-lsp></span><span style="color: #000000">: </span><span style="color: #267F99">string</span><span style="color: #000000">): </span><span style="color: #267F99">never</span><span style="color: #000000"> {</span></div><div class='line'><span style="color: #000000">  </span><span style="color: #AF00DB">throw</span><span style="color: #000000"> </span><span style="color: #0000FF">new</span><span style="color: #000000"> </span><span style="color: #267F99"><data-lsp lsp='var Error: ErrorConstructor&#10;new (message?: string | undefined) => Error' >Error</data-lsp></span><span style="color: #000000">(</span><span style="color: #A31515">&apos;Failed to return. msg:&apos;</span><span style="color: #000000"> + </span><span style="color: #001080"><data-lsp lsp='(parameter) message: string' >message</data-lsp></span><span style="color: #000000">);</span></div><div class='line'><span style="color: #000000">}</span></div><div class='line'><span style="color: #0000FF">function</span><span style="color: #000000"> </span><span style="color: #795E26"><data-lsp lsp='function loop(): never' >loop</data-lsp></span><span style="color: #000000">(): </span><span style="color: #267F99">never</span><span style="color: #000000"> {</span></div><div class='line'><span style="color: #000000">  </span><span style="color: #AF00DB">while</span><span style="color: #000000"> (</span><span style="color: #0000FF">true</span><span style="color: #000000">) {}</span></div><div class='line'><span style="color: #000000">}</span></div><div class='line'><span style="color: #0000FF">let</span><span style="color: #000000"> </span><span style="color: #001080"><data-lsp lsp='let sth: number' >sth</data-lsp></span><span style="color: #000000"> = </span><span style="color: #098658">100</span><span style="color: #000000">;</span></div><div class='line'><span style="color: #001080"><data-lsp lsp='let sth: number' >sth</data-lsp></span><span style="color: #000000"> = </span><span style="color: #795E26"><data-lsp lsp='function loop(): never' >loop</data-lsp></span><span style="color: #000000">();</span></div></code></div></pre>
<p>枚举</p>
<ul>
<li><code>enum</code> 编译为一个对象a</li>
<li><code>const enum</code> 则不生成 JavaScript 代码，而是在用到枚举成员的地方内插对应的值，</li>
<li>设置 <code>complierOptions</code> 中的 <code>preserveConstEnums</code> 参数为 true 可以保留枚举常量（Disable erasing <code>const enum</code> declarations in generated code.）</li>
</ul>
<pre class="shiki light-plus twoslash lsp" style="background-color: #FFFFFF; color: #000000"><div class="language-id">ts</div><div class='code-container'><code><div class='line'><span style="color: #0000FF">enum</span><span style="color: #000000"> </span><span style="color: #267F99"><data-lsp lsp='enum Color' >Color</data-lsp></span><span style="color: #000000"> {</span></div><div class='line'><span style="color: #000000">  </span><span style="color: #0070C1"><data-lsp lsp='(enum member) Color.Red = "#f00"' >Red</data-lsp></span><span style="color: #000000"> = </span><span style="color: #A31515">"#f00"</span><span style="color: #000000">,</span></div><div class='line'><span style="color: #000000">  </span><span style="color: #0070C1"><data-lsp lsp='(enum member) Color.Green = "#0f0"' >Green</data-lsp></span><span style="color: #000000"> = </span><span style="color: #A31515">"#0f0"</span><span style="color: #000000">,</span></div><div class='line'><span style="color: #000000">  </span><span style="color: #0070C1"><data-lsp lsp='(enum member) Color.Blue = "#00f"' >Blue</data-lsp></span><span style="color: #000000"> = </span><span style="color: #A31515">"#00f"</span><span style="color: #000000">,</span></div><div class='line'><span style="color: #000000">}</span></div><div class='line'><span style="color: #008000">// 编译结果：</span></div><div class='line'><span style="color: #008000">// var Color;</span></div><div class='line'><span style="color: #008000">// (function (Color) {</span></div><div class='line'><span style="color: #008000">//     Color["Red"] = "#f00";</span></div><div class='line'><span style="color: #008000">//     Color["Green"] = "#0f0";</span></div><div class='line'><span style="color: #008000">//     Color["Blue"] = "#00f";</span></div><div class='line'><span style="color: #008000">// })(Color || (Color = {}));</span></div></code></div></pre>`;
  return (
    <div
      className="markdown-body"
      dangerouslySetInnerHTML={{ __html: innerHTML }}
    />
  );
}

export function Chapter4Function() {
  const innerHTML = `<h1>Chapter 4: 函数</h1>
<p>当需要在函数中使用 <code>this</code> 时，可以在参数列表的第一项声明 <code>this</code> 的类型，否则 <code>this</code> 为 <code>any</code>，并不安全</p>
<pre class="shiki light-plus twoslash lsp" style="background-color: #FFFFFF; color: #000000"><div class="language-id">ts</div><div class='code-container'><code><div class='line'><span style="color: #0000FF">function</span><span style="color: #000000"> </span><span style="color: #795E26"><data-lsp lsp='function helloDate(this: Date, greet: string): string' >helloDate</data-lsp></span><span style="color: #000000">(</span><span style="color: #0000FF"><data-lsp lsp='(parameter) this: Date' >this</data-lsp></span><span style="color: #000000">: </span><span style="color: #267F99"><data-lsp lsp='interface Date' >Date</data-lsp></span><span style="color: #000000">, </span><span style="color: #001080"><data-lsp lsp='(parameter) greet: string' >greet</data-lsp></span><span style="color: #000000">: </span><span style="color: #267F99">string</span><span style="color: #000000">) {</span></div><div class='line'><span style="color: #000000">  </span><span style="color: #AF00DB">return</span><span style="color: #000000"> </span><span style="color: #001080"><data-lsp lsp='(parameter) greet: string' >greet</data-lsp></span><span style="color: #000000"> + </span><span style="color: #0000FF">this</span><span style="color: #000000">.</span><span style="color: #795E26"><data-lsp lsp='(method) Date.getDate(): number' >getDate</data-lsp></span><span style="color: #000000">();</span></div><div class='line'><span style="color: #000000">}</span></div><div class='line'>&nbsp;</div><div class='line'><span style="color: #008000">// error</span></div><div class='line'><span style="color: #795E26"><data-lsp lsp='function helloDate(this: Date, greet: string): string' >helloDate</data-lsp></span><span style="color: #000000">(</span><span style="color: #A31515">&apos;hello&apos;</span><span style="color: #000000">);</span></div><span class="error"><span>The 'this' context of type 'void' is not assignable to method's 'this' of type 'Date'.</span><span class="code">2684</span></span><span class="error-behind">The 'this' context of type 'void' is not assignable to method's 'this' of type 'Date'.</span><div class='line'><span style="color: #001080"><data-lsp lsp='function helloDate(this: Date, greet: string): string' >helloDate</data-lsp></span><span style="color: #000000">.</span><span style="color: #795E26"><data-lsp lsp='(method) CallableFunction.call&lt;Date, [string], string>(this: (this: Date, args_0: string) => string, thisArg: Date, args_0: string): string' >call</data-lsp></span><span style="color: #000000">(<data-err>{}</data-err>, </span><span style="color: #A31515">"hello"</span><span style="color: #000000">);</span></div><span class="error"><span>Argument of type '{}' is not assignable to parameter of type 'Date'.
  Type '{}' is missing the following properties from type 'Date': toDateString, toTimeString, toLocaleDateString, toLocaleTimeString, and 38 more.</span><span class="code">2345</span></span><span class="error-behind">Argument of type '{}' is not assignable to parameter of type 'Date'.
  Type '{}' is missing the following properties from type 'Date': toDateString, toTimeString, toLocaleDateString, toLocaleTimeString, and 38 more.</span><div class='line'>&nbsp;</div><div class='line'><span style="color: #008000">// correct</span></div><div class='line'><span style="color: #001080"><data-lsp lsp='function helloDate(this: Date, greet: string): string' >helloDate</data-lsp></span><span style="color: #000000">.</span><span style="color: #795E26"><data-lsp lsp='(method) CallableFunction.call&lt;Date, [string], string>(this: (this: Date, args_0: string) => string, thisArg: Date, args_0: string): string' >call</data-lsp></span><span style="color: #000000">(</span><span style="color: #0000FF">new</span><span style="color: #000000"> </span><span style="color: #267F99"><data-lsp lsp='var Date: DateConstructor&#10;new () => Date (+4 overloads)' >Date</data-lsp></span><span style="color: #000000">(), </span><span style="color: #A31515">"hello"</span><span style="color: #000000">);</span></div></code></div></pre>
<p>函数类型有两种声明方式，分别为简写和完整形式</p>
<pre class="shiki light-plus twoslash lsp" style="background-color: #FFFFFF; color: #000000"><div class="language-id">ts</div><div class='code-container'><code><div class='line'><span style="color: #008000">// The following two declare are the same</span></div><div class='line'><span style="color: #0000FF">type</span><span style="color: #000000"> </span><span style="color: #267F99"><data-lsp lsp='type LogA = (message: string) => void' >LogA</data-lsp></span><span style="color: #000000"> = (</span><span style="color: #001080"><data-lsp lsp='(parameter) message: string' >message</data-lsp></span><span style="color: #000000">: </span><span style="color: #267F99">string</span><span style="color: #000000">) </span><span style="color: #0000FF">=&gt;</span><span style="color: #000000"> </span><span style="color: #267F99">void</span><span style="color: #000000">;</span></div><div class='line'><span style="color: #0000FF">type</span><span style="color: #000000"> </span><span style="color: #267F99"><data-lsp lsp='type LogB = (message: string) => void' >LogB</data-lsp></span><span style="color: #000000"> = {</span></div><div class='line'><span style="color: #000000">  (</span><span style="color: #001080"><data-lsp lsp='(parameter) message: string' >message</data-lsp></span><span style="color: #000000">: </span><span style="color: #267F99">string</span><span style="color: #000000">): </span><span style="color: #267F99">void</span><span style="color: #000000">;</span></div><div class='line'><span style="color: #000000">};</span></div></code></div></pre>
<p>函数类型的完整声明可以用来进行函数的重载</p>
<pre class="shiki light-plus twoslash lsp" style="background-color: #FFFFFF; color: #000000"><div class="language-id">ts</div><div class='code-container'><code><div class='line'><span style="color: #0000FF">type</span><span style="color: #000000"> </span><span style="color: #267F99"><data-lsp lsp='type Print = {&#10;    (message: string): void;&#10;    (message: string, suffix: number): number;&#10;    (prefix: number, message: string, suffix: number): number;&#10;}' >Print</data-lsp></span><span style="color: #000000"> = {</span></div><div class='line'><span style="color: #000000">  (</span><span style="color: #001080"><data-lsp lsp='(parameter) message: string' >message</data-lsp></span><span style="color: #000000">: </span><span style="color: #267F99">string</span><span style="color: #000000">): </span><span style="color: #267F99">void</span><span style="color: #000000">;</span></div><div class='line'><span style="color: #000000">  (</span><span style="color: #001080"><data-lsp lsp='(parameter) message: string' >message</data-lsp></span><span style="color: #000000">: </span><span style="color: #267F99">string</span><span style="color: #000000">, </span><span style="color: #001080"><data-lsp lsp='(parameter) suffix: number' >suffix</data-lsp></span><span style="color: #000000">: </span><span style="color: #267F99">number</span><span style="color: #000000">): </span><span style="color: #267F99">number</span><span style="color: #000000">;</span></div><div class='line'><span style="color: #000000">  (</span><span style="color: #001080"><data-lsp lsp='(parameter) prefix: number' >prefix</data-lsp></span><span style="color: #000000">: </span><span style="color: #267F99">number</span><span style="color: #000000">, </span><span style="color: #001080"><data-lsp lsp='(parameter) message: string' >message</data-lsp></span><span style="color: #000000">: </span><span style="color: #267F99">string</span><span style="color: #000000">, </span><span style="color: #001080"><data-lsp lsp='(parameter) suffix: number' >suffix</data-lsp></span><span style="color: #000000">: </span><span style="color: #267F99">number</span><span style="color: #000000">): </span><span style="color: #267F99">number</span><span style="color: #000000">;</span></div><div class='line'><span style="color: #000000">};</span></div></code></div></pre>
<p>可以在函数声明时对函数进行重载</p>
<pre class="shiki light-plus twoslash lsp" style="background-color: #FFFFFF; color: #000000"><div class="language-id">ts</div><div class='code-container'><code><div class='line'><span style="color: #0000FF">function</span><span style="color: #000000"> </span><span style="color: #795E26"><data-lsp lsp='function foo(message: "a"): Date (+2 overloads)' >foo</data-lsp></span><span style="color: #000000">(</span><span style="color: #001080"><data-lsp lsp='(parameter) message: "a"' >message</data-lsp></span><span style="color: #000000">: </span><span style="color: #A31515">"a"</span><span style="color: #000000">): </span><span style="color: #267F99"><data-lsp lsp='interface Date' >Date</data-lsp></span><span style="color: #000000">;</span></div><div class='line'><span style="color: #0000FF">function</span><span style="color: #000000"> </span><span style="color: #795E26"><data-lsp lsp='function foo(message: "b"): number (+2 overloads)' >foo</data-lsp></span><span style="color: #000000">(</span><span style="color: #001080"><data-lsp lsp='(parameter) message: "b"' >message</data-lsp></span><span style="color: #000000">: </span><span style="color: #A31515">"b"</span><span style="color: #000000">): </span><span style="color: #267F99">number</span><span style="color: #000000">;</span></div><div class='line'><span style="color: #0000FF">function</span><span style="color: #000000"> </span><span style="color: #795E26"><data-lsp lsp='function foo(name: "c"): string (+2 overloads)' >foo</data-lsp></span><span style="color: #000000">(</span><span style="color: #001080"><data-lsp lsp='(parameter) name: "c"' >name</data-lsp></span><span style="color: #000000">: </span><span style="color: #A31515">"c"</span><span style="color: #000000">): </span><span style="color: #267F99">string</span><span style="color: #000000">;</span></div><div class='line'><span style="color: #0000FF">function</span><span style="color: #000000"> </span><span style="color: #795E26"><data-lsp lsp='function foo(message: "a"): Date (+2 overloads)' >foo</data-lsp></span><span style="color: #000000">(</span><span style="color: #001080"><data-lsp lsp='(parameter) message: string' >message</data-lsp></span><span style="color: #000000">: </span><span style="color: #267F99">string</span><span style="color: #000000">): </span><span style="color: #267F99">any</span><span style="color: #000000"> {</span></div><div class='line'><span style="color: #000000">  </span><span style="color: #AF00DB">return</span><span style="color: #000000"> </span><span style="color: #001080"><data-lsp lsp='(parameter) message: string' >message</data-lsp></span><span style="color: #000000">;</span></div><div class='line'><span style="color: #000000">}</span></div></code></div></pre>
<p>使用完整的函数类型声明可以给函数对象添加属性</p>
<pre class="shiki light-plus twoslash lsp" style="background-color: #FFFFFF; color: #000000"><div class="language-id">ts</div><div class='code-container'><code><div class='line'><span style="color: #0000FF">type</span><span style="color: #000000"> </span><span style="color: #267F99"><data-lsp lsp='type FooFn = {&#10;    (message: string): void;&#10;    bar: number;&#10;}' >FooFn</data-lsp></span><span style="color: #000000"> = {</span></div><div class='line'><span style="color: #000000">  (</span><span style="color: #001080"><data-lsp lsp='(parameter) message: string' >message</data-lsp></span><span style="color: #000000">: </span><span style="color: #267F99">string</span><span style="color: #000000">): </span><span style="color: #267F99">void</span><span style="color: #000000">;</span></div><div class='line'><span style="color: #000000">  </span><span style="color: #001080"><data-lsp lsp='(property) bar: number' >bar</data-lsp></span><span style="color: #000000">: </span><span style="color: #267F99">number</span><span style="color: #000000">;</span></div><div class='line'><span style="color: #000000">};</span></div></code></div></pre>
<p>泛型</p>
<pre class="shiki light-plus twoslash lsp" style="background-color: #FFFFFF; color: #000000"><div class="language-id">ts</div><div class='code-container'><code><div class='line'><span style="color: #008000">// A example for filter function</span></div><div class='line'><span style="color: #0000FF">type</span><span style="color: #000000"> </span><span style="color: #267F99"><data-lsp lsp='type Filter = &lt;T>(array: T[], f: (item: T) => boolean) => T[]' >Filter</data-lsp></span><span style="color: #000000"> = {</span></div><div class='line'><span style="color: #000000">  &lt;</span><span style="color: #267F99"><data-lsp lsp='(type parameter) T in &lt;T>(array: T[], f: (item: T) => boolean): T[]' >T</data-lsp></span><span style="color: #000000">&gt;(</span><span style="color: #001080"><data-lsp lsp='(parameter) array: T[]' >array</data-lsp></span><span style="color: #000000">: </span><span style="color: #267F99"><data-lsp lsp='(type parameter) T in &lt;T>(array: T[], f: (item: T) => boolean): T[]' >T</data-lsp></span><span style="color: #000000">[], </span><span style="color: #795E26"><data-lsp lsp='(parameter) f: (item: T) => boolean' >f</data-lsp></span><span style="color: #000000">: (</span><span style="color: #001080"><data-lsp lsp='(parameter) item: T' >item</data-lsp></span><span style="color: #000000">: </span><span style="color: #267F99"><data-lsp lsp='(type parameter) T in &lt;T>(array: T[], f: (item: T) => boolean): T[]' >T</data-lsp></span><span style="color: #000000">) </span><span style="color: #0000FF">=&gt;</span><span style="color: #000000"> </span><span style="color: #267F99">boolean</span><span style="color: #000000">): </span><span style="color: #267F99"><data-lsp lsp='(type parameter) T in &lt;T>(array: T[], f: (item: T) => boolean): T[]' >T</data-lsp></span><span style="color: #000000">[];</span></div><div class='line'><span style="color: #000000">};</span></div><div class='line'><span style="color: #0000FF">type</span><span style="color: #000000"> </span><span style="color: #267F99"><data-lsp lsp='type AnotherFilter = &lt;T>(array: T[], f: (item: T) => boolean) => T[]' >AnotherFilter</data-lsp></span><span style="color: #000000"> = &lt;</span><span style="color: #267F99"><data-lsp lsp='(type parameter) T in &lt;T>(array: T[], f: (item: T) => boolean): T[]' >T</data-lsp></span><span style="color: #000000">&gt;(</span><span style="color: #001080"><data-lsp lsp='(parameter) array: T[]' >array</data-lsp></span><span style="color: #000000">: </span><span style="color: #267F99"><data-lsp lsp='(type parameter) T in &lt;T>(array: T[], f: (item: T) => boolean): T[]' >T</data-lsp></span><span style="color: #000000">[], </span><span style="color: #795E26"><data-lsp lsp='(parameter) f: (item: T) => boolean' >f</data-lsp></span><span style="color: #000000">: (</span><span style="color: #001080"><data-lsp lsp='(parameter) item: T' >item</data-lsp></span><span style="color: #000000">: </span><span style="color: #267F99"><data-lsp lsp='(type parameter) T in &lt;T>(array: T[], f: (item: T) => boolean): T[]' >T</data-lsp></span><span style="color: #000000">) </span><span style="color: #0000FF">=&gt;</span><span style="color: #000000"> </span><span style="color: #267F99">boolean</span><span style="color: #000000">) </span><span style="color: #0000FF">=&gt;</span><span style="color: #000000"> </span><span style="color: #267F99"><data-lsp lsp='(type parameter) T in &lt;T>(array: T[], f: (item: T) => boolean): T[]' >T</data-lsp></span><span style="color: #000000">[];</span></div></code></div></pre>
<p>使用 <code>T extends Type</code> 的方式可以声明受限的泛型
在下面的 <code>mapNode</code> 函数声明中，如果仅使用 <code>T</code>，则无法从 <code>node</code> 中安全读取 <code>value</code> 属性，
若使用 <code>TreeNode</code> 不使用泛型，则返回值会丢失类型信息，统统为 <code>TreeNode</code> 类型</p>
<pre class="shiki light-plus twoslash lsp" style="background-color: #FFFFFF; color: #000000"><div class="language-id">ts</div><div class='code-container'><code><div class='line'><span style="color: #0000FF">type</span><span style="color: #000000"> </span><span style="color: #267F99"><data-lsp lsp='type TreeNode = {&#10;    value: string;&#10;}' >TreeNode</data-lsp></span><span style="color: #000000"> = {</span></div><div class='line'><span style="color: #000000">  </span><span style="color: #001080"><data-lsp lsp='(property) value: string' >value</data-lsp></span><span style="color: #000000">: </span><span style="color: #267F99">string</span><span style="color: #000000">;</span></div><div class='line'><span style="color: #000000">};</span></div><div class='line'><span style="color: #0000FF">type</span><span style="color: #000000"> </span><span style="color: #267F99"><data-lsp lsp='type LeafNode = TreeNode &amp; {&#10;    isLeaf: true;&#10;}' >LeafNode</data-lsp></span><span style="color: #000000"> = </span><span style="color: #267F99"><data-lsp lsp='type TreeNode = {&#10;    value: string;&#10;}' >TreeNode</data-lsp></span><span style="color: #000000"> & {</span></div><div class='line'><span style="color: #000000">  </span><span style="color: #001080"><data-lsp lsp='(property) isLeaf: true' >isLeaf</data-lsp></span><span style="color: #000000">: </span><span style="color: #267F99">true</span><span style="color: #000000">;</span></div><div class='line'><span style="color: #000000">};</span></div><div class='line'><span style="color: #0000FF">type</span><span style="color: #000000"> </span><span style="color: #267F99"><data-lsp lsp='type InnerNode = TreeNode &amp; {&#10;    children: [TreeNode] | [TreeNode, TreeNode];&#10;}' >InnerNode</data-lsp></span><span style="color: #000000"> = </span><span style="color: #267F99"><data-lsp lsp='type TreeNode = {&#10;    value: string;&#10;}' >TreeNode</data-lsp></span><span style="color: #000000"> & {</span></div><div class='line'><span style="color: #000000">  </span><span style="color: #001080"><data-lsp lsp='(property) children: [TreeNode] | [TreeNode, TreeNode]' >children</data-lsp></span><span style="color: #000000">: [</span><span style="color: #267F99"><data-lsp lsp='type TreeNode = {&#10;    value: string;&#10;}' >TreeNode</data-lsp></span><span style="color: #000000">] | [</span><span style="color: #267F99"><data-lsp lsp='type TreeNode = {&#10;    value: string;&#10;}' >TreeNode</data-lsp></span><span style="color: #000000">, </span><span style="color: #267F99"><data-lsp lsp='type TreeNode = {&#10;    value: string;&#10;}' >TreeNode</data-lsp></span><span style="color: #000000">];</span></div><div class='line'><span style="color: #000000">};</span></div><div class='line'>&nbsp;</div><div class='line'><span style="color: #0000FF">function</span><span style="color: #000000"> </span><span style="color: #795E26"><data-lsp lsp='function mapNode&lt;T extends TreeNode>(node: T, f: (value: string) => string): T &amp; {&#10;    value: string;&#10;}' >mapNode</data-lsp></span><span style="color: #000000">&lt;</span><span style="color: #267F99"><data-lsp lsp='(type parameter) T in mapNode&lt;T extends TreeNode>(node: T, f: (value: string) => string): T &amp; {&#10;    value: string;&#10;}' >T</data-lsp></span><span style="color: #000000"> </span><span style="color: #0000FF">extends</span><span style="color: #000000"> </span><span style="color: #267F99"><data-lsp lsp='type TreeNode = {&#10;    value: string;&#10;}' >TreeNode</data-lsp></span><span style="color: #000000">&gt;(</span><span style="color: #001080"><data-lsp lsp='(parameter) node: T extends TreeNode' >node</data-lsp></span><span style="color: #000000">: </span><span style="color: #267F99"><data-lsp lsp='(type parameter) T in mapNode&lt;T extends TreeNode>(node: T, f: (value: string) => string): T &amp; {&#10;    value: string;&#10;}' >T</data-lsp></span><span style="color: #000000">, </span><span style="color: #795E26"><data-lsp lsp='(parameter) f: (value: string) => string' >f</data-lsp></span><span style="color: #000000">: (</span><span style="color: #001080"><data-lsp lsp='(parameter) value: string' >value</data-lsp></span><span style="color: #000000">: </span><span style="color: #267F99">string</span><span style="color: #000000">) </span><span style="color: #0000FF">=&gt;</span><span style="color: #000000"> </span><span style="color: #267F99">string</span><span style="color: #000000">) {</span></div><div class='line'><span style="color: #000000">  </span><span style="color: #AF00DB">return</span><span style="color: #000000"> {</span></div><div class='line'><span style="color: #000000">    ...</span><span style="color: #001080"><data-lsp lsp='(parameter) node: T extends TreeNode' >node</data-lsp></span><span style="color: #000000">,</span></div><div class='line'><span style="color: #000000">    </span><span style="color: #001080"><data-lsp lsp='(property) value: string' >value</data-lsp>:</span><span style="color: #000000"> </span><span style="color: #795E26"><data-lsp lsp='(parameter) f: (value: string) => string' >f</data-lsp></span><span style="color: #000000">(</span><span style="color: #001080"><data-lsp lsp='(parameter) node: T extends TreeNode' >node</data-lsp></span><span style="color: #000000">.</span><span style="color: #001080"><data-lsp lsp='(property) value: string' >value</data-lsp></span><span style="color: #000000">),</span></div><div class='line'><span style="color: #000000">  };</span></div><div class='line'><span style="color: #000000">}</span></div><div class='line'>&nbsp;</div><div class='line'><span style="color: #0000FF">const</span><span style="color: #000000"> </span><span style="color: #0070C1"><data-lsp lsp='const fooNode: LeafNode' >fooNode</data-lsp></span><span style="color: #000000">: </span><span style="color: #267F99"><data-lsp lsp='type LeafNode = TreeNode &amp; {&#10;    isLeaf: true;&#10;}' >LeafNode</data-lsp></span><span style="color: #000000"> = {</span></div><div class='line'><span style="color: #000000">  </span><span style="color: #001080"><data-lsp lsp='(property) value: string' >value</data-lsp>:</span><span style="color: #000000"> </span><span style="color: #A31515">"foo"</span><span style="color: #000000">,</span></div><div class='line'><span style="color: #000000">  </span><span style="color: #001080"><data-lsp lsp='(property) isLeaf: true' >isLeaf</data-lsp>:</span><span style="color: #000000"> </span><span style="color: #0000FF">true</span><span style="color: #000000">,</span></div><div class='line'><span style="color: #000000">};</span></div><div class='line'><span style="color: #008000">// resultNode 的类型为 typeof fooNode & { value: string }</span></div><div class='line'><span style="color: #0000FF">const</span><span style="color: #000000"> </span><span style="color: #0070C1"><data-lsp lsp='const resultNode: TreeNode &amp; {&#10;    isLeaf: true;&#10;} &amp; {&#10;    value: string;&#10;}' >resultNode</data-lsp></span><span style="color: #000000"> = </span><span style="color: #795E26"><data-lsp lsp='function mapNode&lt;LeafNode>(node: LeafNode, f: (value: string) => string): TreeNode &amp; {&#10;    isLeaf: true;&#10;} &amp; {&#10;    value: string;&#10;}' >mapNode</data-lsp></span><span style="color: #000000">(</span><span style="color: #001080"><data-lsp lsp='const fooNode: LeafNode' >fooNode</data-lsp></span><span style="color: #000000">, (</span><span style="color: #001080"><data-lsp lsp='(parameter) value: string' >value</data-lsp></span><span style="color: #000000">) </span><span style="color: #0000FF">=&gt;</span><span style="color: #000000"> </span><span style="color: #001080"><data-lsp lsp='(parameter) value: string' >value</data-lsp></span><span style="color: #000000">.</span><span style="color: #795E26"><data-lsp lsp='(method) String.slice(start?: number | undefined, end?: number | undefined): string' >slice</data-lsp></span><span style="color: #000000">(</span><span style="color: #098658">1</span><span style="color: #000000">));</span></div></code></div></pre>
<p>模拟变长参数（Exercise 4）</p>
<pre class="shiki light-plus twoslash lsp" style="background-color: #FFFFFF; color: #000000"><div class="language-id">ts</div><div class='code-container'><code><div class='line'><span style="color: #0000FF">function</span><span style="color: #000000"> </span><span style="color: #795E26"><data-lsp lsp='function call&lt;T extends [unknown, string, ...unknown[]], R>(f: (...args: T) => R, ...args: T): R' >call</data-lsp></span><span style="color: #000000">&lt;</span><span style="color: #267F99"><data-lsp lsp='(type parameter) T in call&lt;T extends [unknown, string, ...unknown[]], R>(f: (...args: T) => R, ...args: T): R' >T</data-lsp></span><span style="color: #000000"> </span><span style="color: #0000FF">extends</span><span style="color: #000000"> [</span><span style="color: #267F99">unknown</span><span style="color: #000000">, </span><span style="color: #267F99">string</span><span style="color: #000000">, ...</span><span style="color: #267F99">unknown</span><span style="color: #000000">[]], </span><span style="color: #267F99"><data-lsp lsp='(type parameter) R in call&lt;T extends [unknown, string, ...unknown[]], R>(f: (...args: T) => R, ...args: T): R' >R</data-lsp></span><span style="color: #000000">&gt;(</span></div><div class='line'><span style="color: #000000">  </span><span style="color: #795E26"><data-lsp lsp='(parameter) f: (...args: T) => R' >f</data-lsp></span><span style="color: #000000">: (...</span><span style="color: #001080"><data-lsp lsp='(parameter) args: T extends [unknown, string, ...unknown[]]' >args</data-lsp></span><span style="color: #000000">: </span><span style="color: #267F99"><data-lsp lsp='(type parameter) T in call&lt;T extends [unknown, string, ...unknown[]], R>(f: (...args: T) => R, ...args: T): R' >T</data-lsp></span><span style="color: #000000">) </span><span style="color: #0000FF">=&gt;</span><span style="color: #000000"> </span><span style="color: #267F99"><data-lsp lsp='(type parameter) R in call&lt;T extends [unknown, string, ...unknown[]], R>(f: (...args: T) => R, ...args: T): R' >R</data-lsp></span><span style="color: #000000">,</span></div><div class='line'><span style="color: #000000">  ...</span><span style="color: #001080"><data-lsp lsp='(parameter) args: T extends [unknown, string, ...unknown[]]' >args</data-lsp></span><span style="color: #000000">: </span><span style="color: #267F99"><data-lsp lsp='(type parameter) T in call&lt;T extends [unknown, string, ...unknown[]], R>(f: (...args: T) => R, ...args: T): R' >T</data-lsp></span></div><div class='line'><span style="color: #000000">) {</span></div><div class='line'><span style="color: #000000">  </span><span style="color: #AF00DB">return</span><span style="color: #000000"> </span><span style="color: #795E26"><data-lsp lsp='(parameter) f: (...args: T) => R' >f</data-lsp></span><span style="color: #000000">(...</span><span style="color: #001080"><data-lsp lsp='(parameter) args: T extends [unknown, string, ...unknown[]]' >args</data-lsp></span><span style="color: #000000">);</span></div><div class='line'><span style="color: #000000">}</span></div><div class='line'><span style="color: #0000FF">function</span><span style="color: #000000"> </span><span style="color: #795E26"><data-lsp lsp='function fill&lt;T>(length: number, value: T): T[]' >fill</data-lsp></span><span style="color: #000000">&lt;</span><span style="color: #267F99"><data-lsp lsp='(type parameter) T in fill&lt;T>(length: number, value: T): T[]' >T</data-lsp></span><span style="color: #000000">&gt;(</span><span style="color: #001080"><data-lsp lsp='(parameter) length: number' >length</data-lsp></span><span style="color: #000000">: </span><span style="color: #267F99">number</span><span style="color: #000000">, </span><span style="color: #001080"><data-lsp lsp='(parameter) value: T' >value</data-lsp></span><span style="color: #000000">: </span><span style="color: #267F99"><data-lsp lsp='(type parameter) T in fill&lt;T>(length: number, value: T): T[]' >T</data-lsp></span><span style="color: #000000">) {</span></div><div class='line'><span style="color: #000000">  </span><span style="color: #AF00DB">return</span><span style="color: #000000"> </span><span style="color: #267F99"><data-lsp lsp='var Array: ArrayConstructor' >Array</data-lsp></span><span style="color: #000000">.</span><span style="color: #795E26"><data-lsp lsp='(method) ArrayConstructor.from&lt;unknown, T>(iterable: Iterable&lt;unknown> | ArrayLike&lt;unknown>, mapfn: (v: unknown, k: number) => T, thisArg?: any): T[] (+3 overloads)' >from</data-lsp></span><span style="color: #000000">({ </span><span style="color: #001080"><data-lsp lsp='(property) ArrayLike&lt;T>.length: number' >length</data-lsp></span><span style="color: #000000"> }, () </span><span style="color: #0000FF">=&gt;</span><span style="color: #000000"> </span><span style="color: #001080"><data-lsp lsp='(parameter) value: T' >value</data-lsp></span><span style="color: #000000">);</span></div><div class='line'><span style="color: #000000">}</span></div><div class='line'><span style="color: #0000FF">const</span><span style="color: #000000"> </span><span style="color: #0070C1"><data-lsp lsp='const fillArr: ""[]' >fillArr</data-lsp></span><span style="color: #000000"> = </span><span style="color: #795E26"><data-lsp lsp='function call&lt;[number, ""], ""[]>(f: (args_0: number, args_1: "") => ""[], args_0: number, args_1: ""): ""[]' >call</data-lsp></span><span style="color: #000000">(</span><span style="color: #001080"><data-lsp lsp='function fill&lt;T>(length: number, value: T): T[]' >fill</data-lsp></span><span style="color: #000000">, </span><span style="color: #098658">10</span><span style="color: #000000">, </span><span style="color: #A31515">""</span><span style="color: #000000">);</span></div></code></div></pre>
<p>泛型可以有默认类型。类似于函数的可选参数，有默认类型的泛型需要放在没有默认类型的泛型后面</p>
<pre class="shiki light-plus twoslash lsp" style="background-color: #FFFFFF; color: #000000"><div class="language-id">ts</div><div class='code-container'><code><div class='line'><span style="color: #0000FF">type</span><span style="color: #000000"> </span><span style="color: #267F99"><data-lsp lsp='type MyEvent&lt;Target extends HTMLElement = HTMLElement, Type = string> = {&#10;    target: Target;&#10;    type: Type;&#10;}' >MyEvent</data-lsp></span><span style="color: #000000">&lt;</span><span style="color: #267F99"><data-lsp lsp='(type parameter) Target in type MyEvent&lt;Target extends HTMLElement = HTMLElement, Type = string>' >Target</data-lsp></span><span style="color: #000000"> </span><span style="color: #0000FF">extends</span><span style="color: #000000"> </span><span style="color: #267F99"><data-lsp lsp='interface HTMLElement' >HTMLElement</data-lsp></span><span style="color: #000000"> = </span><span style="color: #267F99"><data-lsp lsp='interface HTMLElement' >HTMLElement</data-lsp></span><span style="color: #000000">, </span><span style="color: #267F99"><data-lsp lsp='(type parameter) Type in type MyEvent&lt;Target extends HTMLElement = HTMLElement, Type = string>' >Type</data-lsp></span><span style="color: #000000"> = </span><span style="color: #267F99">string</span><span style="color: #000000">&gt; = {</span></div><div class='line'><span style="color: #000000">  </span><span style="color: #001080"><data-lsp lsp='(property) target: Target extends HTMLElement = HTMLElement' >target</data-lsp></span><span style="color: #000000">: </span><span style="color: #267F99"><data-lsp lsp='(type parameter) Target in type MyEvent&lt;Target extends HTMLElement = HTMLElement, Type = string>' >Target</data-lsp></span><span style="color: #000000">;</span></div><div class='line'><span style="color: #000000">  </span><span style="color: #001080"><data-lsp lsp='(property) type: Type = string' >type</data-lsp></span><span style="color: #000000">: </span><span style="color: #267F99"><data-lsp lsp='(type parameter) Type in type MyEvent&lt;Target extends HTMLElement = HTMLElement, Type = string>' >Type</data-lsp></span><span style="color: #000000">;</span></div><div class='line'><span style="color: #000000">};</span></div><div class='line'><span style="color: #0000FF">let</span><span style="color: #000000"> </span><span style="color: #001080"><data-lsp lsp='let myEvent: MyEvent&lt;HTMLBodyElement, string>' >myEvent</data-lsp></span><span style="color: #000000">: </span><span style="color: #267F99"><data-lsp lsp='type MyEvent&lt;Target extends HTMLElement = HTMLElement, Type = string> = {&#10;    target: Target;&#10;    type: Type;&#10;}' >MyEvent</data-lsp></span><span style="color: #000000">&lt;</span><span style="color: #267F99"><data-lsp lsp='interface HTMLBodyElement' >HTMLBodyElement</data-lsp></span><span style="color: #000000">&gt; = {</span></div><div class='line'><span style="color: #000000">  </span><span style="color: #001080"><data-lsp lsp='(property) target: HTMLBodyElement' >target</data-lsp>:</span><span style="color: #000000"> &lt;</span><span style="color: #267F99"><data-lsp lsp='interface HTMLBodyElement' >HTMLBodyElement</data-lsp></span><span style="color: #000000">&gt;</span><span style="color: #001080"><data-lsp lsp='var document: Document' >document</data-lsp></span><span style="color: #000000">.</span><span style="color: #001080"><data-lsp lsp='(property) Document.body: HTMLElement' >body</data-lsp></span><span style="color: #000000">,</span></div><div class='line'><span style="color: #000000">  </span><span style="color: #001080"><data-lsp lsp='(property) type: string' >type</data-lsp>:</span><span style="color: #000000"> </span><span style="color: #A31515">"click"</span><span style="color: #000000">,</span></div><div class='line'><span style="color: #000000">};</span></div></code></div></pre>
<p>Exercise 5</p>
<pre class="shiki light-plus twoslash lsp" style="background-color: #FFFFFF; color: #000000"><div class="language-id">ts</div><div class='code-container'><code><div class='line'><span style="color: #0000FF">type</span><span style="color: #000000"> </span><span style="color: #267F99"><data-lsp lsp='type Is = &lt;T>(valueA: T, valueB: T) => boolean' >Is</data-lsp></span><span style="color: #000000"> = &lt;</span><span style="color: #267F99"><data-lsp lsp='(type parameter) T in &lt;T>(valueA: T, valueB: T): boolean' >T</data-lsp></span><span style="color: #000000">&gt;(</span><span style="color: #001080"><data-lsp lsp='(parameter) valueA: T' >valueA</data-lsp></span><span style="color: #000000">: </span><span style="color: #267F99"><data-lsp lsp='(type parameter) T in &lt;T>(valueA: T, valueB: T): boolean' >T</data-lsp></span><span style="color: #000000">, </span><span style="color: #001080"><data-lsp lsp='(parameter) valueB: T' >valueB</data-lsp></span><span style="color: #000000">: </span><span style="color: #267F99"><data-lsp lsp='(type parameter) T in &lt;T>(valueA: T, valueB: T): boolean' >T</data-lsp></span><span style="color: #000000">) </span><span style="color: #0000FF">=&gt;</span><span style="color: #000000"> </span><span style="color: #267F99">boolean</span><span style="color: #000000">;</span></div><div class='line'><span style="color: #0000FF">const</span><span style="color: #000000"> </span><span style="color: #795E26"><data-lsp lsp='const is: Is' >is</data-lsp></span><span style="color: #000000">: </span><span style="color: #267F99"><data-lsp lsp='type Is = &lt;T>(valueA: T, valueB: T) => boolean' >Is</data-lsp></span><span style="color: #000000"> = (</span><span style="color: #001080"><data-lsp lsp='(parameter) a: T' >a</data-lsp></span><span style="color: #000000">, </span><span style="color: #001080"><data-lsp lsp='(parameter) b: T' >b</data-lsp></span><span style="color: #000000">) </span><span style="color: #0000FF">=&gt;</span><span style="color: #000000"> {</span></div><div class='line'><span style="color: #000000">  </span><span style="color: #AF00DB">return</span><span style="color: #000000"> </span><span style="color: #001080"><data-lsp lsp='(parameter) a: T' >a</data-lsp></span><span style="color: #000000"> === </span><span style="color: #001080"><data-lsp lsp='(parameter) b: T' >b</data-lsp></span><span style="color: #000000">;</span></div><div class='line'><span style="color: #000000">};</span></div><div class='line'><span style="color: #0000FF">const</span><span style="color: #000000"> </span><span style="color: #0070C1"><data-lsp lsp='const equal: boolean' >equal</data-lsp></span><span style="color: #000000"> = </span><span style="color: #795E26"><data-lsp lsp='const is: &lt;string>(valueA: string, valueB: string) => boolean' >is</data-lsp></span><span style="color: #000000">(</span><span style="color: #A31515">"a"</span><span style="color: #000000">, </span><span style="color: #A31515">"b"</span><span style="color: #000000">);</span></div><div class='line'><span style="color: #0000FF">const</span><span style="color: #000000"> </span><span style="color: #0070C1"><data-lsp lsp='const equal2: boolean' >equal2</data-lsp></span><span style="color: #000000"> = </span><span style="color: #795E26"><data-lsp lsp='const is: &lt;number>(valueA: number, valueB: number) => boolean' >is</data-lsp></span><span style="color: #000000">(</span><span style="color: #098658">1</span><span style="color: #000000">, </span><span style="color: #098658">2</span><span style="color: #000000">);</span></div><div class='line'><span style="color: #0000FF">const</span><span style="color: #000000"> </span><span style="color: #0070C1"><data-lsp lsp='const err: boolean' >err</data-lsp></span><span style="color: #000000"> = </span><span style="color: #795E26"><data-lsp lsp='const is: &lt;string>(valueA: string, valueB: string) => boolean' >is</data-lsp></span><span style="color: #000000">(</span><span style="color: #A31515">"1"</span><span style="color: #000000">, </span><span style="color: #098658"><data-err>2</data-err></span><span style="color: #000000">);</span></div><span class="error"><span>Argument of type 'number' is not assignable to parameter of type 'string'.</span><span class="code">2345</span></span><span class="error-behind">Argument of type 'number' is not assignable to parameter of type 'string'.</span><div class='line'>&nbsp;</div><div class='line'><span style="color: #0000FF">type</span><span style="color: #000000"> </span><span style="color: #267F99"><data-lsp lsp='type MultiplyIs = &lt;T>(...args: T[]) => boolean' >MultiplyIs</data-lsp></span><span style="color: #000000"> = &lt;</span><span style="color: #267F99"><data-lsp lsp='(type parameter) T in &lt;T>(...args: T[]): boolean' >T</data-lsp></span><span style="color: #000000">&gt;(...</span><span style="color: #001080"><data-lsp lsp='(parameter) args: T[]' >args</data-lsp></span><span style="color: #000000">: </span><span style="color: #267F99"><data-lsp lsp='(type parameter) T in &lt;T>(...args: T[]): boolean' >T</data-lsp></span><span style="color: #000000">[]) </span><span style="color: #0000FF">=&gt;</span><span style="color: #000000"> </span><span style="color: #267F99">boolean</span><span style="color: #000000">;</span></div><div class='line'><span style="color: #0000FF">const</span><span style="color: #000000"> </span><span style="color: #795E26"><data-lsp lsp='const multiplyIs: MultiplyIs' >multiplyIs</data-lsp></span><span style="color: #000000">: </span><span style="color: #267F99"><data-lsp lsp='type MultiplyIs = &lt;T>(...args: T[]) => boolean' >MultiplyIs</data-lsp></span><span style="color: #000000"> = (...</span><span style="color: #001080"><data-lsp lsp='(parameter) args: T[]' >args</data-lsp></span><span style="color: #000000">) </span><span style="color: #0000FF">=&gt;</span><span style="color: #000000"> {</span></div><div class='line'><span style="color: #000000">  </span><span style="color: #AF00DB">for</span><span style="color: #000000"> (</span><span style="color: #0000FF">let</span><span style="color: #000000"> </span><span style="color: #001080"><data-lsp lsp='let i: number' >i</data-lsp></span><span style="color: #000000"> = </span><span style="color: #098658">1</span><span style="color: #000000">, </span><span style="color: #001080"><data-lsp lsp='let len: number' >len</data-lsp></span><span style="color: #000000"> = </span><span style="color: #001080"><data-lsp lsp='(parameter) args: T[]' >args</data-lsp></span><span style="color: #000000">.</span><span style="color: #001080"><data-lsp lsp='(property) Array&lt;T>.length: number' >length</data-lsp></span><span style="color: #000000">; </span><span style="color: #001080"><data-lsp lsp='let i: number' >i</data-lsp></span><span style="color: #000000"> &lt; </span><span style="color: #001080"><data-lsp lsp='let len: number' >len</data-lsp></span><span style="color: #000000">; </span><span style="color: #001080"><data-lsp lsp='let i: number' >i</data-lsp></span><span style="color: #000000">++) {</span></div><div class='line'><span style="color: #000000">    </span><span style="color: #AF00DB">if</span><span style="color: #000000"> (</span><span style="color: #001080"><data-lsp lsp='(parameter) args: T[]' >args</data-lsp></span><span style="color: #000000">[</span><span style="color: #001080"><data-lsp lsp='let i: number' >i</data-lsp></span><span style="color: #000000">] !== </span><span style="color: #001080"><data-lsp lsp='(parameter) args: T[]' >args</data-lsp></span><span style="color: #000000">[</span><span style="color: #001080"><data-lsp lsp='let i: number' >i</data-lsp></span><span style="color: #000000"> - </span><span style="color: #098658">1</span><span style="color: #000000">]) {</span></div><div class='line'><span style="color: #000000">      </span><span style="color: #AF00DB">return</span><span style="color: #000000"> </span><span style="color: #0000FF">false</span><span style="color: #000000">;</span></div><div class='line'><span style="color: #000000">    }</span></div><div class='line'><span style="color: #000000">  }</span></div><div class='line'><span style="color: #000000">  </span><span style="color: #AF00DB">return</span><span style="color: #000000"> </span><span style="color: #0000FF">true</span><span style="color: #000000">;</span></div><div class='line'><span style="color: #000000">  </span><span style="color: #008000">// 另一种不好读的方式</span></div><div class='line'><span style="color: #000000">  </span><span style="color: #008000">// args.reduce((accumulator, current, index) =&gt; {</span></div><div class='line'><span style="color: #000000">  </span><span style="color: #008000">//   if (index !== 0 && current !== args[index - 1]) {</span></div><div class='line'><span style="color: #000000">  </span><span style="color: #008000">//     return false;</span></div><div class='line'><span style="color: #000000">  </span><span style="color: #008000">//   }</span></div><div class='line'><span style="color: #000000">  </span><span style="color: #008000">//   return accumulator;</span></div><div class='line'><span style="color: #000000">  </span><span style="color: #008000">// }, true)</span></div><div class='line'><span style="color: #000000">};</span></div><div class='line'>&nbsp;</div><div class='line'><span style="color: #0000FF">const</span><span style="color: #000000"> </span><span style="color: #0070C1"><data-lsp lsp='const mEqual: boolean' >mEqual</data-lsp></span><span style="color: #000000"> = </span><span style="color: #795E26"><data-lsp lsp='const multiplyIs: &lt;string>(...args: string[]) => boolean' >multiplyIs</data-lsp></span><span style="color: #000000">([</span><span style="color: #098658">1</span><span style="color: #000000">], </span><span style="color: #A31515">""</span><span style="color: #000000">, [</span><span style="color: #098658">1</span><span style="color: #000000">, </span><span style="color: #098658">2</span><span style="color: #000000">, </span><span style="color: #098658">3</span><span style="color: #000000">]);</span></div><span class="error"><span>Argument of type 'number[]' is not assignable to parameter of type 'string'.</span><span class="code">2345</span></span><span class="error-behind">Argument of type 'number[]' is not assignable to parameter of type 'string'.</span></code></div></pre>`;
  return (
    <div
      className="markdown-body"
      dangerouslySetInnerHTML={{ __html: innerHTML }}
    />
  );
}

export function Chapter5ClassInterface() {
  const innerHTML = `<h1>Chapter 5: 类和接口</h1>
<p>关键词：</p>
<ul>
<li><code>public</code> / <code>private</code> / <code>protected</code></li>
<li><code>readonly</code></li>
<li><code>abstract</code></li>
</ul>
<pre class="shiki light-plus twoslash lsp" style="background-color: #FFFFFF; color: #000000"><div class="language-id">ts</div><div class='code-container'><code><div class='line'><span style="color: #0000FF">class</span><span style="color: #000000"> </span><span style="color: #267F99"><data-lsp lsp='class Piece' >Piece</data-lsp></span><span style="color: #000000"> {</span></div><div class='line'><span style="color: #000000"> </span><span style="color: #0000FF">public</span><span style="color: #000000"> </span><span style="color: #001080"><data-lsp lsp='(property) Piece.position: {&#10;    x: number;&#10;    y: number;&#10;}' >position</data-lsp></span><span style="color: #000000">: { </span><span style="color: #001080"><data-lsp lsp='(property) x: number' >x</data-lsp></span><span style="color: #000000">: </span><span style="color: #267F99">number</span><span style="color: #000000">; </span><span style="color: #001080"><data-lsp lsp='(property) y: number' >y</data-lsp></span><span style="color: #000000">: </span><span style="color: #267F99">number</span><span style="color: #000000"> };</span></div><div class='line'><span style="color: #000000"> </span><span style="color: #0000FF">constructor</span><span style="color: #000000">(</span><span style="color: #0000FF">private</span><span style="color: #000000"> </span><span style="color: #0000FF">readonly</span><span style="color: #000000"> </span><span style="color: #001080"><data-lsp lsp='(property) Piece.color: string' >color</data-lsp></span><span style="color: #000000">: </span><span style="color: #267F99">string</span><span style="color: #000000">) {</span></div><div class='line'><span style="color: #000000">   </span><span style="color: #0000FF">this</span><span style="color: #000000">.</span><span style="color: #001080"><data-lsp lsp='(property) Piece.position: {&#10;    x: number;&#10;    y: number;&#10;}' >position</data-lsp></span><span style="color: #000000"> = { </span><span style="color: #001080"><data-lsp lsp='(property) x: number' >x</data-lsp>:</span><span style="color: #000000"> </span><span style="color: #098658">0</span><span style="color: #000000">, </span><span style="color: #001080"><data-lsp lsp='(property) y: number' >y</data-lsp>:</span><span style="color: #000000"> </span><span style="color: #098658">0</span><span style="color: #000000"> };</span></div><div class='line'><span style="color: #000000"> }</span></div><div class='line'><span style="color: #000000">}</span></div><div class='line'><span style="color: #0000FF">const</span><span style="color: #000000"> </span><span style="color: #0070C1"><data-lsp lsp='const piece: Piece' >piece</data-lsp></span><span style="color: #000000"> = </span><span style="color: #0000FF">new</span><span style="color: #000000"> </span><span style="color: #795E26"><data-lsp lsp='constructor Piece(color: string): Piece' >Piece</data-lsp></span><span style="color: #000000">(</span><span style="color: #A31515">"red"</span><span style="color: #000000">);</span></div></code></div></pre>
<p><code>type</code> 和 <code>interface</code> 是同一概念的两种句法，但有细微区别（P114）</p>
<ol>
<li>type 更通用，interface 则必须为结构</li>
<li>interface 扩展时会检查是否可赋值，type 则不会</li>
<li>同一命名空间下的同名 interface 会合并，type 则会导致冲突</li>
</ol>
<pre class="shiki light-plus twoslash lsp" style="background-color: #FFFFFF; color: #000000"><div class="language-id">ts</div><div class='code-container'><code><div class='line'><span style="color: #0000FF">type</span><span style="color: #000000"> </span><span style="color: #267F99"><data-lsp lsp='type Char = "a" | "b" | "c"' >Char</data-lsp></span><span style="color: #000000"> = </span><span style="color: #A31515">"a"</span><span style="color: #000000"> | </span><span style="color: #A31515">"b"</span><span style="color: #000000"> | </span><span style="color: #A31515">"c"</span><span style="color: #000000">;</span></div><div class='line'><span style="color: #008000">// interface IChar = &apos;a&apos; | &apos;b&apos; | &apos;c&apos;;  -&gt; error</span></div><div class='line'><span style="color: #0000FF">interface</span><span style="color: #000000"> </span><span style="color: #267F99"><data-lsp lsp='interface InterfaceA' >InterfaceA</data-lsp></span><span style="color: #000000"> {</span></div><div class='line'><span style="color: #000000">  </span><span style="color: #001080"><data-lsp lsp='(property) InterfaceA.value: string' >value</data-lsp></span><span style="color: #000000">: </span><span style="color: #267F99">string</span><span style="color: #000000">;</span></div><div class='line'><span style="color: #000000">}</span></div><div class='line'><span style="color: #008000">// error</span></div><div class='line'><span style="color: #0000FF">interface</span><span style="color: #000000"> </span><span style="color: #267F99"><data-err><data-lsp lsp='interface InterfaceB' >InterfaceB</data-lsp></data-err></span><span style="color: #000000"> </span><span style="color: #0000FF">extends</span><span style="color: #000000"> </span><span style="color: #267F99"><data-lsp lsp='interface InterfaceA' >InterfaceA</data-lsp></span><span style="color: #000000"> {</span></div><span class="error"><span>Interface 'InterfaceB' incorrectly extends interface 'InterfaceA'.
  Types of property 'value' are incompatible.
    Type 'number' is not assignable to type 'string'.</span><span class="code">2430</span></span><span class="error-behind">Interface 'InterfaceB' incorrectly extends interface 'InterfaceA'.
  Types of property 'value' are incompatible.
    Type 'number' is not assignable to type 'string'.</span><div class='line'><span style="color: #000000">  </span><span style="color: #001080"><data-lsp lsp='(property) InterfaceB.value: number' >value</data-lsp></span><span style="color: #000000">: </span><span style="color: #267F99">number</span><span style="color: #000000">;</span></div><div class='line'><span style="color: #000000">}</span></div><div class='line'><span style="color: #008000">// 两个 InterfaceA 并不冲突，而是会合并</span></div><div class='line'><span style="color: #0000FF">interface</span><span style="color: #000000"> </span><span style="color: #267F99"><data-lsp lsp='interface InterfaceA' >InterfaceA</data-lsp></span><span style="color: #000000"> {</span></div><div class='line'><span style="color: #000000">  </span><span style="color: #001080"><data-lsp lsp='(property) InterfaceA.name: string' >name</data-lsp></span><span style="color: #000000">: </span><span style="color: #267F99">string</span><span style="color: #000000">;</span></div><div class='line'><span style="color: #000000">}</span></div></code></div></pre>
<p><code>interface</code> 也可以 <code>readonly</code>，但是不可以有 <code>public</code> / <code>private</code> / <code>protected</code> 修饰符</p>
<pre class="shiki light-plus twoslash lsp" style="background-color: #FFFFFF; color: #000000"><div class="language-id">ts</div><div class='code-container'><code><div class='line'><span style="color: #0000FF">interface</span><span style="color: #000000"> </span><span style="color: #267F99"><data-lsp lsp='interface Animal' >Animal</data-lsp></span><span style="color: #000000"> {</span></div><div class='line'><span style="color: #000000">  </span><span style="color: #0000FF">readonly</span><span style="color: #000000"> </span><span style="color: #001080"><data-lsp lsp='(property) Animal.name: string' >name</data-lsp></span><span style="color: #000000">: </span><span style="color: #267F99">string</span><span style="color: #000000">;</span></div><div class='line'><span style="color: #000000">}</span></div><div class='line'><span style="color: #0000FF">const</span><span style="color: #000000"> </span><span style="color: #0070C1"><data-lsp lsp='const cat: Animal' >cat</data-lsp></span><span style="color: #000000">: </span><span style="color: #267F99"><data-lsp lsp='interface Animal' >Animal</data-lsp></span><span style="color: #000000"> = { </span><span style="color: #001080"><data-lsp lsp='(property) Animal.name: string' >name</data-lsp>:</span><span style="color: #000000"> </span><span style="color: #A31515">"cat"</span><span style="color: #000000"> };</span></div><div class='line'><span style="color: #001080"><data-lsp lsp='const cat: Animal' >cat</data-lsp></span><span style="color: #000000">.</span><span style="color: #001080"><data-err><data-lsp lsp='(property) Animal.name: any' >name</data-lsp></data-err></span><span style="color: #000000"> = </span><span style="color: #A31515">""</span><span style="color: #000000">;</span></div><span class="error"><span>Cannot assign to 'name' because it is a read-only property.</span><span class="code">2540</span></span><span class="error-behind">Cannot assign to 'name' because it is a read-only property.</span></code></div></pre>
<p>值和类型位于不同的命名空间中，不会冲突</p>
<pre class="shiki light-plus twoslash lsp" style="background-color: #FFFFFF; color: #000000"><div class="language-id">ts</div><div class='code-container'><code><div class='line'><span style="color: #0000FF">let</span><span style="color: #000000"> </span><span style="color: #001080"><data-lsp lsp='let value: string' >value</data-lsp></span><span style="color: #000000"> = </span><span style="color: #A31515">"1"</span><span style="color: #000000">;</span></div><div class='line'><span style="color: #0000FF">type</span><span style="color: #000000"> </span><span style="color: #267F99"><data-lsp lsp='type value = string' >value</data-lsp></span><span style="color: #000000"> = </span><span style="color: #267F99">string</span><span style="color: #000000">;</span></div></code></div></pre>
<p>类声明会在类空间生成两个声明（P123）</p>
<ol>
<li>类的实例类型</li>
<li>类的构造方法类型，<code>keyof</code> ClassName 获得</li>
</ol>
<p>typeof 运算符还需要继续学习</p>
<pre class="shiki light-plus twoslash lsp" style="background-color: #FFFFFF; color: #000000"><div class="language-id">ts</div><div class='code-container'><code><div class='line'><span style="color: #0000FF">type</span><span style="color: #000000"> </span><span style="color: #267F99"><data-lsp lsp='type State = {&#10;    [key: string]: string;&#10;}' >State</data-lsp></span><span style="color: #000000"> = {</span></div><div class='line'><span style="color: #000000">  [</span><span style="color: #001080"><data-lsp lsp='(parameter) key: string' >key</data-lsp></span><span style="color: #000000">: </span><span style="color: #267F99">string</span><span style="color: #000000">]: </span><span style="color: #267F99">string</span><span style="color: #000000">;</span></div><div class='line'><span style="color: #000000">};</span></div><div class='line'>&nbsp;</div><div class='line'><span style="color: #0000FF">class</span><span style="color: #000000"> </span><span style="color: #267F99"><data-lsp lsp='class StringDataBase' >StringDataBase</data-lsp></span><span style="color: #000000"> {</span></div><div class='line'><span style="color: #000000">  </span><span style="color: #001080"><data-lsp lsp='(property) StringDataBase.state: State' >state</data-lsp></span><span style="color: #000000">: </span><span style="color: #267F99"><data-lsp lsp='type State = {&#10;    [key: string]: string;&#10;}' >State</data-lsp></span><span style="color: #000000"> = {};</span></div><div class='line'><span style="color: #000000">  </span><span style="color: #008000">// get 无法推导出返回值可能是 null (why?)，手动声明返回值类型</span></div><div class='line'><span style="color: #000000">  </span><span style="color: #795E26"><data-lsp lsp='(method) StringDataBase.get(key: string): string | null' >get</data-lsp></span><span style="color: #000000">(</span><span style="color: #001080"><data-lsp lsp='(parameter) key: string' >key</data-lsp></span><span style="color: #000000">: </span><span style="color: #267F99">string</span><span style="color: #000000">): </span><span style="color: #267F99">string</span><span style="color: #000000"> | </span><span style="color: #267F99">null</span><span style="color: #000000"> {</span></div><div class='line'><span style="color: #000000">    </span><span style="color: #AF00DB">return</span><span style="color: #000000"> </span><span style="color: #0000FF">this</span><span style="color: #000000">.</span><span style="color: #001080"><data-lsp lsp='(property) StringDataBase.state: State' >state</data-lsp></span><span style="color: #000000">[</span><span style="color: #001080"><data-lsp lsp='(parameter) key: string' >key</data-lsp></span><span style="color: #000000">] || </span><span style="color: #0000FF">null</span><span style="color: #000000">;</span></div><div class='line'><span style="color: #000000">  }</span></div><div class='line'><span style="color: #000000">  </span><span style="color: #795E26"><data-lsp lsp='(method) StringDataBase.set(key: string, value: string): void' >set</data-lsp></span><span style="color: #000000">(</span><span style="color: #001080"><data-lsp lsp='(parameter) key: string' >key</data-lsp></span><span style="color: #000000">: </span><span style="color: #267F99">string</span><span style="color: #000000">, </span><span style="color: #001080"><data-lsp lsp='(parameter) value: string' >value</data-lsp></span><span style="color: #000000">: </span><span style="color: #267F99">string</span><span style="color: #000000">) {</span></div><div class='line'><span style="color: #000000">    </span><span style="color: #0000FF">this</span><span style="color: #000000">.</span><span style="color: #001080"><data-lsp lsp='(property) StringDataBase.state: State' >state</data-lsp></span><span style="color: #000000">[</span><span style="color: #001080"><data-lsp lsp='(parameter) key: string' >key</data-lsp></span><span style="color: #000000">] = </span><span style="color: #001080"><data-lsp lsp='(parameter) value: string' >value</data-lsp></span><span style="color: #000000">;</span></div><div class='line'><span style="color: #000000">  }</span></div><div class='line'><span style="color: #000000">  </span><span style="color: #0000FF">static</span><span style="color: #000000"> </span><span style="color: #795E26"><data-lsp lsp='(method) StringDataBase.from(state: State): StringDataBase' >from</data-lsp></span><span style="color: #000000">(</span><span style="color: #001080"><data-lsp lsp='(parameter) state: State' >state</data-lsp></span><span style="color: #000000">: </span><span style="color: #267F99"><data-lsp lsp='type State = {&#10;    [key: string]: string;&#10;}' >State</data-lsp></span><span style="color: #000000">) {</span></div><div class='line'><span style="color: #000000">    </span><span style="color: #0000FF">const</span><span style="color: #000000"> </span><span style="color: #0070C1"><data-lsp lsp='const db: StringDataBase' >db</data-lsp></span><span style="color: #000000"> = </span><span style="color: #0000FF">new</span><span style="color: #000000"> </span><span style="color: #795E26"><data-lsp lsp='constructor StringDataBase(): StringDataBase' >StringDataBase</data-lsp></span><span style="color: #000000">();</span></div><div class='line'><span style="color: #000000">    </span><span style="color: #001080"><data-lsp lsp='const db: StringDataBase' >db</data-lsp></span><span style="color: #000000">.</span><span style="color: #001080"><data-lsp lsp='(property) StringDataBase.state: State' >state</data-lsp></span><span style="color: #000000"> = </span><span style="color: #001080"><data-lsp lsp='(parameter) state: State' >state</data-lsp></span><span style="color: #000000">;</span></div><div class='line'><span style="color: #000000">    </span><span style="color: #AF00DB">return</span><span style="color: #000000"> </span><span style="color: #001080"><data-lsp lsp='const db: StringDataBase' >db</data-lsp></span><span style="color: #000000">;</span></div><div class='line'><span style="color: #000000">  }</span></div><div class='line'><span style="color: #000000">}</span></div><div class='line'><span style="color: #008000">// type StringDataBaseType = typeof StringDataBase;</span></div></code></div></pre>
<p>Exercise 4（GitHub 上的答案）:</p>
<p>4 . [Hard] As an exercise, think about how you might design a typesafe builder pattern.
Extend the Builder pattern Builder Pattern example from earlier in this chapter to:</p>
<p>4a. Guarantee at compile time that someone can’t call .send() before setting at least URL
and method. Would it be easier to make this guarantee if you also force the user to call
methods in a specific order? (Hint: what can you return instead of this?)</p>
<pre class="shiki light-plus twoslash lsp" style="background-color: #FFFFFF; color: #000000"><div class="language-id">ts</div><div class='code-container'><code><div class='line'><span style="color: #0000FF">class</span><span style="color: #000000"> </span><span style="color: #267F99"><data-lsp lsp='class RequestBuilder' >RequestBuilder</data-lsp></span><span style="color: #000000"> {</span></div><div class='line'><span style="color: #000000">  </span><span style="color: #0000FF">protected</span><span style="color: #000000"> </span><span style="color: #001080"><data-lsp lsp='(property) RequestBuilder.data: object | null' >data</data-lsp></span><span style="color: #000000">: </span><span style="color: #267F99">object</span><span style="color: #000000"> | </span><span style="color: #267F99">null</span><span style="color: #000000"> = </span><span style="color: #0000FF">null</span><span style="color: #000000">;</span></div><div class='line'><span style="color: #000000">  </span><span style="color: #0000FF">protected</span><span style="color: #000000"> </span><span style="color: #001080"><data-lsp lsp='(property) RequestBuilder.method: "get" | "post" | null' >method</data-lsp></span><span style="color: #000000">: </span><span style="color: #A31515">"get"</span><span style="color: #000000"> | </span><span style="color: #A31515">"post"</span><span style="color: #000000"> | </span><span style="color: #267F99">null</span><span style="color: #000000"> = </span><span style="color: #0000FF">null</span><span style="color: #000000">;</span></div><div class='line'><span style="color: #000000">  </span><span style="color: #0000FF">protected</span><span style="color: #000000"> </span><span style="color: #001080"><data-lsp lsp='(property) RequestBuilder.url: string | null' >url</data-lsp></span><span style="color: #000000">: </span><span style="color: #267F99">string</span><span style="color: #000000"> | </span><span style="color: #267F99">null</span><span style="color: #000000"> = </span><span style="color: #0000FF">null</span><span style="color: #000000">;</span></div><div class='line'>&nbsp;</div><div class='line'><span style="color: #000000">  </span><span style="color: #795E26"><data-lsp lsp='(method) RequestBuilder.setMethod(method: "get" | "post"): RequestBuilderWithMethod' >setMethod</data-lsp></span><span style="color: #000000">(</span><span style="color: #001080"><data-lsp lsp='(parameter) method: "get" | "post"' >method</data-lsp></span><span style="color: #000000">: </span><span style="color: #A31515">"get"</span><span style="color: #000000"> | </span><span style="color: #A31515">"post"</span><span style="color: #000000">): </span><span style="color: #267F99"><data-lsp lsp='class RequestBuilderWithMethod' >RequestBuilderWithMethod</data-lsp></span><span style="color: #000000"> {</span></div><div class='line'><span style="color: #000000">    </span><span style="color: #AF00DB">return</span><span style="color: #000000"> </span><span style="color: #0000FF">new</span><span style="color: #000000"> </span><span style="color: #795E26"><data-lsp lsp='constructor RequestBuilderWithMethod(): RequestBuilderWithMethod' >RequestBuilderWithMethod</data-lsp></span><span style="color: #000000">().</span><span style="color: #795E26"><data-lsp lsp='(method) RequestBuilderWithMethod.setMethod(method: "get" | "post" | null): RequestBuilderWithMethod' >setMethod</data-lsp></span><span style="color: #000000">(</span><span style="color: #001080"><data-lsp lsp='(parameter) method: "get" | "post"' >method</data-lsp></span><span style="color: #000000">).</span><span style="color: #795E26"><data-lsp lsp='(method) RequestBuilder.setData(data: object | null): RequestBuilderWithMethod' >setData</data-lsp></span><span style="color: #000000">(</span><span style="color: #0000FF">this</span><span style="color: #000000">.</span><span style="color: #001080"><data-lsp lsp='(property) RequestBuilder.data: object | null' >data</data-lsp></span><span style="color: #000000">);</span></div><div class='line'><span style="color: #000000">  }</span></div><div class='line'><span style="color: #000000">  </span><span style="color: #795E26"><data-lsp lsp='(method) RequestBuilder.setData(data: object | null): this' >setData</data-lsp></span><span style="color: #000000">(</span><span style="color: #001080"><data-lsp lsp='(parameter) data: object | null' >data</data-lsp></span><span style="color: #000000">: </span><span style="color: #267F99">object</span><span style="color: #000000"> | </span><span style="color: #267F99">null</span><span style="color: #000000">): </span><span style="color: #267F99">this</span><span style="color: #000000"> {</span></div><div class='line'><span style="color: #000000">    </span><span style="color: #0000FF">this</span><span style="color: #000000">.</span><span style="color: #001080"><data-lsp lsp='(property) RequestBuilder.data: object | null' >data</data-lsp></span><span style="color: #000000"> = </span><span style="color: #001080"><data-lsp lsp='(parameter) data: object | null' >data</data-lsp></span><span style="color: #000000">;</span></div><div class='line'><span style="color: #000000">    </span><span style="color: #AF00DB">return</span><span style="color: #000000"> </span><span style="color: #0000FF">this</span><span style="color: #000000">;</span></div><div class='line'><span style="color: #000000">  }</span></div><div class='line'><span style="color: #000000">}</span></div><div class='line'>&nbsp;</div><div class='line'><span style="color: #0000FF">class</span><span style="color: #000000"> </span><span style="color: #267F99"><data-lsp lsp='class RequestBuilderWithMethod' >RequestBuilderWithMethod</data-lsp></span><span style="color: #000000"> </span><span style="color: #0000FF">extends</span><span style="color: #000000"> </span><span style="color: #267F99"><data-lsp lsp='class RequestBuilder' >RequestBuilder</data-lsp></span><span style="color: #000000"> {</span></div><div class='line'><span style="color: #000000">  </span><span style="color: #795E26"><data-lsp lsp='(method) RequestBuilderWithMethod.setMethod(method: "get" | "post" | null): this' >setMethod</data-lsp></span><span style="color: #000000">(</span><span style="color: #001080"><data-lsp lsp='(parameter) method: "get" | "post" | null' >method</data-lsp></span><span style="color: #000000">: </span><span style="color: #A31515">"get"</span><span style="color: #000000"> | </span><span style="color: #A31515">"post"</span><span style="color: #000000"> | </span><span style="color: #267F99">null</span><span style="color: #000000">): </span><span style="color: #267F99">this</span><span style="color: #000000"> {</span></div><div class='line'><span style="color: #000000">    </span><span style="color: #0000FF">this</span><span style="color: #000000">.</span><span style="color: #001080"><data-lsp lsp='(property) RequestBuilder.method: "get" | "post" | null' >method</data-lsp></span><span style="color: #000000"> = </span><span style="color: #001080"><data-lsp lsp='(parameter) method: "get" | "post" | null' >method</data-lsp></span><span style="color: #000000">;</span></div><div class='line'><span style="color: #000000">    </span><span style="color: #AF00DB">return</span><span style="color: #000000"> </span><span style="color: #0000FF">this</span><span style="color: #000000">;</span></div><div class='line'><span style="color: #000000">  }</span></div><div class='line'><span style="color: #000000">  </span><span style="color: #795E26"><data-lsp lsp='(method) RequestBuilderWithMethod.setURL(url: string): RequestBuilderWithMethodAndURL' >setURL</data-lsp></span><span style="color: #000000">(</span><span style="color: #001080"><data-lsp lsp='(parameter) url: string' >url</data-lsp></span><span style="color: #000000">: </span><span style="color: #267F99">string</span><span style="color: #000000">): </span><span style="color: #267F99"><data-lsp lsp='class RequestBuilderWithMethodAndURL' >RequestBuilderWithMethodAndURL</data-lsp></span><span style="color: #000000"> {</span></div><div class='line'><span style="color: #000000">    </span><span style="color: #AF00DB">return</span><span style="color: #000000"> </span><span style="color: #0000FF">new</span><span style="color: #000000"> </span><span style="color: #795E26"><data-lsp lsp='constructor RequestBuilderWithMethodAndURL(): RequestBuilderWithMethodAndURL' >RequestBuilderWithMethodAndURL</data-lsp></span><span style="color: #000000">()</span></div><div class='line'><span style="color: #000000">      .</span><span style="color: #795E26"><data-lsp lsp='(method) RequestBuilderWithMethod.setMethod(method: "get" | "post" | null): RequestBuilderWithMethodAndURL' >setMethod</data-lsp></span><span style="color: #000000">(</span><span style="color: #0000FF">this</span><span style="color: #000000">.</span><span style="color: #001080"><data-lsp lsp='(property) RequestBuilder.method: "get" | "post" | null' >method</data-lsp></span><span style="color: #000000">)</span></div><div class='line'><span style="color: #000000">      .</span><span style="color: #795E26"><data-lsp lsp='(method) RequestBuilderWithMethodAndURL.setURL(url: string): RequestBuilderWithMethodAndURL' >setURL</data-lsp></span><span style="color: #000000">(</span><span style="color: #001080"><data-lsp lsp='(parameter) url: string' >url</data-lsp></span><span style="color: #000000">)</span></div><div class='line'><span style="color: #000000">      .</span><span style="color: #795E26"><data-lsp lsp='(method) RequestBuilder.setData(data: object | null): RequestBuilderWithMethodAndURL' >setData</data-lsp></span><span style="color: #000000">(</span><span style="color: #0000FF">this</span><span style="color: #000000">.</span><span style="color: #001080"><data-lsp lsp='(property) RequestBuilder.data: object | null' >data</data-lsp></span><span style="color: #000000">);</span></div><div class='line'><span style="color: #000000">  }</span></div><div class='line'><span style="color: #000000">}</span></div><div class='line'>&nbsp;</div><div class='line'><span style="color: #0000FF">class</span><span style="color: #000000"> </span><span style="color: #267F99"><data-lsp lsp='class RequestBuilderWithMethodAndURL' >RequestBuilderWithMethodAndURL</data-lsp></span><span style="color: #000000"> </span><span style="color: #0000FF">extends</span><span style="color: #000000"> </span><span style="color: #267F99"><data-lsp lsp='class RequestBuilderWithMethod' >RequestBuilderWithMethod</data-lsp></span><span style="color: #000000"> {</span></div><div class='line'><span style="color: #000000">  </span><span style="color: #795E26"><data-lsp lsp='(method) RequestBuilderWithMethodAndURL.setURL(url: string): this' >setURL</data-lsp></span><span style="color: #000000">(</span><span style="color: #001080"><data-lsp lsp='(parameter) url: string' >url</data-lsp></span><span style="color: #000000">: </span><span style="color: #267F99">string</span><span style="color: #000000">): </span><span style="color: #267F99">this</span><span style="color: #000000"> {</span></div><div class='line'><span style="color: #000000">    </span><span style="color: #0000FF">this</span><span style="color: #000000">.</span><span style="color: #001080"><data-lsp lsp='(property) RequestBuilder.url: string | null' >url</data-lsp></span><span style="color: #000000"> = </span><span style="color: #001080"><data-lsp lsp='(parameter) url: string' >url</data-lsp></span><span style="color: #000000">;</span></div><div class='line'><span style="color: #000000">    </span><span style="color: #AF00DB">return</span><span style="color: #000000"> </span><span style="color: #0000FF">this</span><span style="color: #000000">;</span></div><div class='line'><span style="color: #000000">  }</span></div><div class='line'><span style="color: #000000">  </span><span style="color: #795E26"><data-lsp lsp='(method) RequestBuilderWithMethodAndURL.send(): void' >send</data-lsp></span><span style="color: #000000">() {</span></div><div class='line'><span style="color: #000000">    </span><span style="color: #008000">// ...</span></div><div class='line'><span style="color: #000000">  }</span></div><div class='line'><span style="color: #000000">}</span></div><div class='line'>&nbsp;</div><div class='line'><span style="color: #0000FF">new</span><span style="color: #000000"> </span><span style="color: #795E26"><data-lsp lsp='constructor RequestBuilder(): RequestBuilder' >RequestBuilder</data-lsp></span><span style="color: #000000">().</span><span style="color: #795E26"><data-lsp lsp='(method) RequestBuilder.setMethod(method: "get" | "post"): RequestBuilderWithMethod' >setMethod</data-lsp></span><span style="color: #000000">(</span><span style="color: #A31515">"get"</span><span style="color: #000000">).</span><span style="color: #795E26"><data-lsp lsp='(method) RequestBuilder.setData(data: object | null): this' >setData</data-lsp></span><span style="color: #000000">({}).</span><span style="color: #795E26"><data-lsp lsp='(method) RequestBuilderWithMethod.setURL(url: string): RequestBuilderWithMethodAndURL' >setURL</data-lsp></span><span style="color: #000000">(</span><span style="color: #A31515">"foo.com"</span><span style="color: #000000">).</span><span style="color: #795E26"><data-lsp lsp='(method) RequestBuilderWithMethodAndURL.send(): void' >send</data-lsp></span><span style="color: #000000">();</span></div></code></div></pre>
<p>4b. [Harder] How would you change your design if you wanted to make this guarantee, but still let people call methods in any order?</p>
<p>(This answer courtesy of @albertywu)</p>
<pre class="shiki light-plus twoslash lsp" style="background-color: #FFFFFF; color: #000000"><div class="language-id">ts</div><div class='code-container'><code><div class='line'><span style="color: #0000FF">interface</span><span style="color: #000000"> </span><span style="color: #267F99"><data-lsp lsp='interface BuildableRequest' >BuildableRequest</data-lsp></span><span style="color: #000000"> {</span></div><div class='line'><span style="color: #000000">  </span><span style="color: #001080"><data-lsp lsp='(property) BuildableRequest.data?: object | undefined' >data</data-lsp></span><span style="color: #000000">?: </span><span style="color: #267F99">object</span><span style="color: #000000">;</span></div><div class='line'><span style="color: #000000">  </span><span style="color: #001080"><data-lsp lsp='(property) BuildableRequest.method: "get" | "post"' >method</data-lsp></span><span style="color: #000000">: </span><span style="color: #A31515">"get"</span><span style="color: #000000"> | </span><span style="color: #A31515">"post"</span><span style="color: #000000">;</span></div><div class='line'><span style="color: #000000">  </span><span style="color: #001080"><data-lsp lsp='(property) BuildableRequest.url: string' >url</data-lsp></span><span style="color: #000000">: </span><span style="color: #267F99">string</span><span style="color: #000000">;</span></div><div class='line'><span style="color: #000000">}</span></div><div class='line'>&nbsp;</div><div class='line'><span style="color: #0000FF">class</span><span style="color: #000000"> </span><span style="color: #267F99"><data-lsp lsp='class RequestBuilder2' >RequestBuilder2</data-lsp></span><span style="color: #000000"> {</span></div><div class='line'><span style="color: #000000">  </span><span style="color: #001080"><data-lsp lsp='(property) RequestBuilder2.data?: object | undefined' >data</data-lsp></span><span style="color: #000000">?: </span><span style="color: #267F99">object</span><span style="color: #000000">;</span></div><div class='line'><span style="color: #000000">  </span><span style="color: #001080"><data-lsp lsp='(property) RequestBuilder2.method?: "get" | "post" | undefined' >method</data-lsp></span><span style="color: #000000">?: </span><span style="color: #A31515">"get"</span><span style="color: #000000"> | </span><span style="color: #A31515">"post"</span><span style="color: #000000">;</span></div><div class='line'><span style="color: #000000">  </span><span style="color: #001080"><data-lsp lsp='(property) RequestBuilder2.url?: string | undefined' >url</data-lsp></span><span style="color: #000000">?: </span><span style="color: #267F99">string</span><span style="color: #000000">;</span></div><div class='line'>&nbsp;</div><div class='line'><span style="color: #000000">  </span><span style="color: #795E26"><data-lsp lsp='(method) RequestBuilder2.setData(data: object): this &amp; Pick&lt;BuildableRequest, "data">' >setData</data-lsp></span><span style="color: #000000">(</span><span style="color: #001080"><data-lsp lsp='(parameter) data: object' >data</data-lsp></span><span style="color: #000000">: </span><span style="color: #267F99">object</span><span style="color: #000000">): </span><span style="color: #267F99">this</span><span style="color: #000000"> & </span><span style="color: #267F99"><data-lsp lsp='type Pick&lt;T, K extends keyof T> = { [P in K]: T[P]; }' >Pick</data-lsp></span><span style="color: #000000">&lt;</span><span style="color: #267F99"><data-lsp lsp='interface BuildableRequest' >BuildableRequest</data-lsp></span><span style="color: #000000">, </span><span style="color: #A31515">"data"</span><span style="color: #000000">&gt; {</span></div><div class='line'><span style="color: #000000">    </span><span style="color: #AF00DB">return</span><span style="color: #000000"> </span><span style="color: #267F99"><data-lsp lsp='var Object: ObjectConstructor' >Object</data-lsp></span><span style="color: #000000">.</span><span style="color: #795E26"><data-lsp lsp='(method) ObjectConstructor.assign&lt;this, {&#10;    data: object;&#10;}>(target: this, source: {&#10;    data: object;&#10;}): this &amp; {&#10;    data: object;&#10;} (+3 overloads)' >assign</data-lsp></span><span style="color: #000000">(</span><span style="color: #0000FF">this</span><span style="color: #000000">, { </span><span style="color: #001080"><data-lsp lsp='(property) data: object' >data</data-lsp></span><span style="color: #000000"> });</span></div><div class='line'><span style="color: #000000">  }</span></div><div class='line'>&nbsp;</div><div class='line'><span style="color: #000000">  </span><span style="color: #795E26"><data-lsp lsp='(method) RequestBuilder2.setMethod(method: "get" | "post"): this &amp; Pick&lt;BuildableRequest, "method">' >setMethod</data-lsp></span><span style="color: #000000">(</span><span style="color: #001080"><data-lsp lsp='(parameter) method: "get" | "post"' >method</data-lsp></span><span style="color: #000000">: </span><span style="color: #A31515">"get"</span><span style="color: #000000"> | </span><span style="color: #A31515">"post"</span><span style="color: #000000">): </span><span style="color: #267F99">this</span><span style="color: #000000"> & </span><span style="color: #267F99"><data-lsp lsp='type Pick&lt;T, K extends keyof T> = { [P in K]: T[P]; }' >Pick</data-lsp></span><span style="color: #000000">&lt;</span><span style="color: #267F99"><data-lsp lsp='interface BuildableRequest' >BuildableRequest</data-lsp></span><span style="color: #000000">, </span><span style="color: #A31515">"method"</span><span style="color: #000000">&gt; {</span></div><div class='line'><span style="color: #000000">    </span><span style="color: #AF00DB">return</span><span style="color: #000000"> </span><span style="color: #267F99"><data-lsp lsp='var Object: ObjectConstructor' >Object</data-lsp></span><span style="color: #000000">.</span><span style="color: #795E26"><data-lsp lsp='(method) ObjectConstructor.assign&lt;this, {&#10;    method: "get" | "post";&#10;}>(target: this, source: {&#10;    method: "get" | "post";&#10;}): this &amp; {&#10;    method: "get" | "post";&#10;} (+3 overloads)' >assign</data-lsp></span><span style="color: #000000">(</span><span style="color: #0000FF">this</span><span style="color: #000000">, { </span><span style="color: #001080"><data-lsp lsp='(property) method: "get" | "post"' >method</data-lsp></span><span style="color: #000000"> });</span></div><div class='line'><span style="color: #000000">  }</span></div><div class='line'>&nbsp;</div><div class='line'><span style="color: #000000">  </span><span style="color: #795E26"><data-lsp lsp='(method) RequestBuilder2.setURL(url: string): this &amp; Pick&lt;BuildableRequest, "url">' >setURL</data-lsp></span><span style="color: #000000">(</span><span style="color: #001080"><data-lsp lsp='(parameter) url: string' >url</data-lsp></span><span style="color: #000000">: </span><span style="color: #267F99">string</span><span style="color: #000000">): </span><span style="color: #267F99">this</span><span style="color: #000000"> & </span><span style="color: #267F99"><data-lsp lsp='type Pick&lt;T, K extends keyof T> = { [P in K]: T[P]; }' >Pick</data-lsp></span><span style="color: #000000">&lt;</span><span style="color: #267F99"><data-lsp lsp='interface BuildableRequest' >BuildableRequest</data-lsp></span><span style="color: #000000">, </span><span style="color: #A31515">"url"</span><span style="color: #000000">&gt; {</span></div><div class='line'><span style="color: #000000">    </span><span style="color: #AF00DB">return</span><span style="color: #000000"> </span><span style="color: #267F99"><data-lsp lsp='var Object: ObjectConstructor' >Object</data-lsp></span><span style="color: #000000">.</span><span style="color: #795E26"><data-lsp lsp='(method) ObjectConstructor.assign&lt;this, {&#10;    url: string;&#10;}>(target: this, source: {&#10;    url: string;&#10;}): this &amp; {&#10;    url: string;&#10;} (+3 overloads)' >assign</data-lsp></span><span style="color: #000000">(</span><span style="color: #0000FF">this</span><span style="color: #000000">, { </span><span style="color: #001080"><data-lsp lsp='(property) url: string' >url</data-lsp></span><span style="color: #000000"> });</span></div><div class='line'><span style="color: #000000">  }</span></div><div class='line'>&nbsp;</div><div class='line'><span style="color: #000000">  </span><span style="color: #795E26"><data-lsp lsp='(method) RequestBuilder2.build(this: BuildableRequest): BuildableRequest' >build</data-lsp></span><span style="color: #000000">(</span><span style="color: #0000FF"><data-lsp lsp='(parameter) this: BuildableRequest' >this</data-lsp></span><span style="color: #000000">: </span><span style="color: #267F99"><data-lsp lsp='interface BuildableRequest' >BuildableRequest</data-lsp></span><span style="color: #000000">) {</span></div><div class='line'><span style="color: #000000">    </span><span style="color: #AF00DB">return</span><span style="color: #000000"> </span><span style="color: #0000FF">this</span><span style="color: #000000">;</span></div><div class='line'><span style="color: #000000">  }</span></div><div class='line'><span style="color: #000000">}</span></div><div class='line'>&nbsp;</div><div class='line'><span style="color: #0000FF">new</span><span style="color: #000000"> </span><span style="color: #795E26"><data-lsp lsp='constructor RequestBuilder2(): RequestBuilder2' >RequestBuilder2</data-lsp></span><span style="color: #000000">()</span></div><div class='line'><span style="color: #000000">  .</span><span style="color: #795E26"><data-lsp lsp='(method) RequestBuilder2.setMethod(method: "get" | "post"): RequestBuilder2 &amp; Pick&lt;BuildableRequest, "method">' >setMethod</data-lsp></span><span style="color: #000000">(</span><span style="color: #A31515">"post"</span><span style="color: #000000">) </span><span style="color: #008000">// Try removing me!</span></div><div class='line'><span style="color: #000000">  .</span><span style="color: #795E26"><data-lsp lsp='(method) RequestBuilder2.setURL(url: string): RequestBuilder2 &amp; Pick&lt;BuildableRequest, "method"> &amp; Pick&lt;BuildableRequest, "url">' >setURL</data-lsp></span><span style="color: #000000">(</span><span style="color: #A31515">"bar"</span><span style="color: #000000">) </span><span style="color: #008000">// Try removing me!</span></div><div class='line'><span style="color: #000000">  .</span><span style="color: #795E26"><data-lsp lsp='(method) RequestBuilder2.setData(data: object): RequestBuilder2 &amp; Pick&lt;BuildableRequest, "method"> &amp; Pick&lt;BuildableRequest, "url"> &amp; Pick&lt;BuildableRequest, "data">' >setData</data-lsp></span><span style="color: #000000">({})</span></div><div class='line'><span style="color: #000000">  .</span><span style="color: #795E26"><data-lsp lsp='(method) RequestBuilder2.build(this: BuildableRequest): BuildableRequest' >build</data-lsp></span><span style="color: #000000">();</span></div></code></div></pre>`;
  return (
    <div
      className="markdown-body"
      dangerouslySetInnerHTML={{ __html: innerHTML }}
    />
  );
}

export function Chapter6TypeAdvanced() {
  const innerHTML = `<h1>Chapter 6: 类型进阶</h1>
<p>类型拓宽</p>
<p>初始化为 <code>null</code> 和 <code>undefined</code> 的变量类型被扩展为 <code>any</code>，但是离开作用域后会被分配一个具体的类型</p>
<pre class="shiki light-plus twoslash lsp" style="background-color: #FFFFFF; color: #000000"><div class="language-id">ts</div><div class='code-container'><code><div class='line'><span style="color: #0000FF">function</span><span style="color: #000000"> </span><span style="color: #795E26"><data-lsp lsp='function popA(): string' >popA</data-lsp></span><span style="color: #000000">() {</span></div><div class='line'><span style="color: #000000">  </span><span style="color: #0000FF">let</span><span style="color: #000000"> </span><span style="color: #001080"><data-lsp lsp='let a: any' >a</data-lsp></span><span style="color: #000000"> = </span><span style="color: #0000FF">null</span><span style="color: #000000">;</span></div><div class='line'><span style="color: #000000">  </span><span style="color: #001080"><data-lsp lsp='let a: any' >a</data-lsp></span><span style="color: #000000"> = </span><span style="color: #A31515">"1"</span><span style="color: #000000">;</span></div><div class='line'><span style="color: #000000">  </span><span style="color: #AF00DB">return</span><span style="color: #000000"> </span><span style="color: #001080"><data-lsp lsp='let a: string' >a</data-lsp></span><span style="color: #000000">; </span><span style="color: #008000">// any</span></div><div class='line'><span style="color: #000000">}</span></div><div class='line'><span style="color: #0000FF">let</span><span style="color: #000000"> </span><span style="color: #001080"><data-lsp lsp='let a: string' >a</data-lsp></span><span style="color: #000000"> = </span><span style="color: #795E26"><data-lsp lsp='function popA(): string' >popA</data-lsp></span><span style="color: #000000">(); </span><span style="color: #008000">// string</span></div></code></div></pre>
<p><code>as const</code> 可以阻止类型拓宽并且递归将成员设为 <code>readonly</code></p>
<pre class="shiki light-plus twoslash lsp" style="background-color: #FFFFFF; color: #000000"><div class="language-id">ts</div><div class='code-container'><code><div class='line'><span style="color: #0000FF">let</span><span style="color: #000000"> </span><span style="color: #001080"><data-lsp lsp='let ordinaryObj: {&#10;    x: number;&#10;}' >ordinaryObj</data-lsp></span><span style="color: #000000"> = { </span><span style="color: #001080"><data-lsp lsp='(property) x: number' >x</data-lsp>:</span><span style="color: #000000"> </span><span style="color: #098658">3</span><span style="color: #000000"> };</span></div><div class='line'><span style="color: #0000FF">let</span><span style="color: #000000"> </span><span style="color: #001080"><data-lsp lsp='let constObj: {&#10;    readonly x: 3;&#10;}' >constObj</data-lsp></span><span style="color: #000000"> = { </span><span style="color: #001080"><data-lsp lsp='(property) x: 3' >x</data-lsp>:</span><span style="color: #000000"> </span><span style="color: #098658">3</span><span style="color: #000000"> } </span><span style="color: #AF00DB">as</span><span style="color: #000000"> </span><span style="color: #0000FF"><data-lsp lsp='type const = {&#10;    readonly x: 3;&#10;}' >const</data-lsp></span><span style="color: #000000">;</span></div></code></div></pre>
<p>赋值时 TypeScript 会对 fresh object literal type 进行多余属性检查</p>
<pre class="shiki light-plus twoslash lsp" style="background-color: #FFFFFF; color: #000000"><div class="language-id">ts</div><div class='code-container'><code><div class='line'><span style="color: #0000FF">type</span><span style="color: #000000"> </span><span style="color: #267F99"><data-lsp lsp='type Person = {&#10;    name: string;&#10;}' >Person</data-lsp></span><span style="color: #000000"> = {</span></div><div class='line'><span style="color: #000000">  </span><span style="color: #001080"><data-lsp lsp='(property) name: string' >name</data-lsp></span><span style="color: #000000">: </span><span style="color: #267F99">string</span><span style="color: #000000">;</span></div><div class='line'><span style="color: #000000">};</span></div><div class='line'><span style="color: #0000FF">let</span><span style="color: #000000"> </span><span style="color: #001080"><data-lsp lsp='let p1: Person' >p1</data-lsp></span><span style="color: #000000">: </span><span style="color: #267F99"><data-lsp lsp='type Person = {&#10;    name: string;&#10;}' >Person</data-lsp></span><span style="color: #000000"> = { </span><span style="color: #001080"><data-lsp lsp='(property) name: string' >name</data-lsp>:</span><span style="color: #000000"> </span><span style="color: #A31515">"1"</span><span style="color: #000000">, </span><span style="color: #001080"><data-lsp lsp='(property) age: number' >age</data-lsp>:</span><span style="color: #000000"> </span><span style="color: #098658">1</span><span style="color: #000000"> }; </span><span style="color: #008000">// error</span></div><span class="error"><span>Type '{ name: string; age: number; }' is not assignable to type 'Person'.
  Object literal may only specify known properties, and 'age' does not exist in type 'Person'.</span><span class="code">2322</span></span><span class="error-behind">Type '{ name: string; age: number; }' is not assignable to type 'Person'.
  Object literal may only specify known properties, and 'age' does not exist in type 'Person'.</span><div class='line'><span style="color: #0000FF">let</span><span style="color: #000000"> </span><span style="color: #001080"><data-lsp lsp='let p2: {&#10;    name: string;&#10;    age: number;&#10;}' >p2</data-lsp></span><span style="color: #000000"> = { </span><span style="color: #001080"><data-lsp lsp='(property) name: string' >name</data-lsp>:</span><span style="color: #000000"> </span><span style="color: #A31515">"2"</span><span style="color: #000000">, </span><span style="color: #001080"><data-lsp lsp='(property) age: number' >age</data-lsp>:</span><span style="color: #000000"> </span><span style="color: #098658">2</span><span style="color: #000000"> };</span></div><div class='line'><span style="color: #0000FF">let</span><span style="color: #000000"> </span><span style="color: #001080"><data-lsp lsp='let p3: Person' >p3</data-lsp></span><span style="color: #000000">: </span><span style="color: #267F99"><data-lsp lsp='type Person = {&#10;    name: string;&#10;}' >Person</data-lsp></span><span style="color: #000000"> = </span><span style="color: #001080"><data-lsp lsp='let p2: {&#10;    name: string;&#10;    age: number;&#10;}' >p2</data-lsp></span><span style="color: #000000">; </span><span style="color: #008000">// assign success, 变量不再 fresh 了</span></div></code></div></pre>
<p>并集类型的成员可能重复，所以 TypeScript 需要更精确的明确并集类型的方式</p>
<pre class="shiki light-plus twoslash lsp" style="background-color: #FFFFFF; color: #000000"><div class="language-id">ts</div><div class='code-container'><code><div class='line'><span style="color: #0000FF">type</span><span style="color: #000000"> </span><span style="color: #267F99"><data-lsp lsp='type UserTextEvent = {&#10;    value: string;&#10;    target: HTMLInputElement;&#10;}' >UserTextEvent</data-lsp></span><span style="color: #000000"> = { </span><span style="color: #001080"><data-lsp lsp='(property) value: string' >value</data-lsp></span><span style="color: #000000">: </span><span style="color: #267F99">string</span><span style="color: #000000">; </span><span style="color: #001080"><data-lsp lsp='(property) target: HTMLInputElement' >target</data-lsp></span><span style="color: #000000">: </span><span style="color: #267F99"><data-lsp lsp='interface HTMLInputElement' >HTMLInputElement</data-lsp></span><span style="color: #000000"> };</span></div><div class='line'><span style="color: #0000FF">type</span><span style="color: #000000"> </span><span style="color: #267F99"><data-lsp lsp='type UserMouseEvent = {&#10;    value: number;&#10;    target: HTMLDivElement;&#10;}' >UserMouseEvent</data-lsp></span><span style="color: #000000"> = { </span><span style="color: #001080"><data-lsp lsp='(property) value: number' >value</data-lsp></span><span style="color: #000000">: </span><span style="color: #267F99">number</span><span style="color: #000000">; </span><span style="color: #001080"><data-lsp lsp='(property) target: HTMLDivElement' >target</data-lsp></span><span style="color: #000000">: </span><span style="color: #267F99"><data-lsp lsp='interface HTMLDivElement' >HTMLDivElement</data-lsp></span><span style="color: #000000"> };</span></div><div class='line'><span style="color: #0000FF">type</span><span style="color: #000000"> </span><span style="color: #267F99"><data-lsp lsp='type UserEvent = UserTextEvent | UserMouseEvent' >UserEvent</data-lsp></span><span style="color: #000000"> = </span><span style="color: #267F99"><data-lsp lsp='type UserTextEvent = {&#10;    value: string;&#10;    target: HTMLInputElement;&#10;}' >UserTextEvent</data-lsp></span><span style="color: #000000"> | </span><span style="color: #267F99"><data-lsp lsp='type UserMouseEvent = {&#10;    value: number;&#10;    target: HTMLDivElement;&#10;}' >UserMouseEvent</data-lsp></span><span style="color: #000000">;</span></div><div class='line'>&nbsp;</div><div class='line'><span style="color: #008000">// value 类型被细化了，但是 event 类型并没有，比如传入了</span></div><div class='line'><span style="color: #008000">// { value: string; target: HTMLInputElement | HTMLDivElement }，</span></div><div class='line'><span style="color: #008000">// 依然属于 UserEvent 类型，但是 Event 类型却并不是 UserTextEvent</span></div><div class='line'><span style="color: #0000FF">function</span><span style="color: #000000"> </span><span style="color: #795E26"><data-lsp lsp='function handleUserEvent(event: UserEvent): void' >handleUserEvent</data-lsp></span><span style="color: #000000">(</span><span style="color: #001080"><data-lsp lsp='(parameter) event: UserEvent' >event</data-lsp></span><span style="color: #000000">: </span><span style="color: #267F99"><data-lsp lsp='type UserEvent = UserTextEvent | UserMouseEvent' >UserEvent</data-lsp></span><span style="color: #000000">) {</span></div><div class='line'><span style="color: #000000">  </span><span style="color: #AF00DB">if</span><span style="color: #000000"> (</span><span style="color: #0000FF">typeof</span><span style="color: #000000"> </span><span style="color: #001080"><data-lsp lsp='(parameter) event: UserEvent' >event</data-lsp></span><span style="color: #000000">.</span><span style="color: #001080"><data-lsp lsp='(property) value: string | number' >value</data-lsp></span><span style="color: #000000"> === </span><span style="color: #A31515">"string"</span><span style="color: #000000">) {</span></div><div class='line'><span style="color: #000000">    </span><span style="color: #001080"><data-lsp lsp='(parameter) event: UserEvent' >event</data-lsp></span><span style="color: #000000">;</span></div><div class='line'><span style="color: #000000">    </span><span style="color: #001080"><data-lsp lsp='(parameter) event: UserEvent' >event</data-lsp></span><span style="color: #000000">.</span><span style="color: #001080"><data-lsp lsp='(property) value: string' >value</data-lsp></span><span style="color: #000000">;</span></div><div class='line'><span style="color: #000000">    </span><span style="color: #001080"><data-lsp lsp='(parameter) event: UserEvent' >event</data-lsp></span><span style="color: #000000">.</span><span style="color: #001080"><data-lsp lsp='(property) target: HTMLInputElement | HTMLDivElement' >target</data-lsp></span><span style="color: #000000">;</span></div><div class='line'><span style="color: #000000">  } </span><span style="color: #AF00DB">else</span><span style="color: #000000"> {</span></div><div class='line'><span style="color: #000000">    </span><span style="color: #001080"><data-lsp lsp='(parameter) event: UserEvent' >event</data-lsp></span><span style="color: #000000">;</span></div><div class='line'><span style="color: #000000">    </span><span style="color: #001080"><data-lsp lsp='(parameter) event: UserEvent' >event</data-lsp></span><span style="color: #000000">.</span><span style="color: #001080"><data-lsp lsp='(property) value: number' >value</data-lsp></span><span style="color: #000000">;</span></div><div class='line'><span style="color: #000000">    </span><span style="color: #001080"><data-lsp lsp='(parameter) event: UserEvent' >event</data-lsp></span><span style="color: #000000">.</span><span style="color: #001080"><data-lsp lsp='(property) target: HTMLInputElement | HTMLDivElement' >target</data-lsp></span><span style="color: #000000">;</span></div><div class='line'><span style="color: #000000">  }</span></div><div class='line'><span style="color: #000000">}</span></div></code></div></pre>
<p>加入明确的字面量可以解决这个问题</p>
<pre class="shiki light-plus twoslash lsp" style="background-color: #FFFFFF; color: #000000"><div class="language-id">ts</div><div class='code-container'><code><div class='line'><span style="color: #0000FF">type</span><span style="color: #000000"> </span><span style="color: #267F99"><data-lsp lsp='type UserTextEventWithType = {&#10;    type: "text";&#10;    value: string;&#10;    target: HTMLInputElement;&#10;}' >UserTextEventWithType</data-lsp></span><span style="color: #000000"> = {</span></div><div class='line'><span style="color: #000000">  </span><span style="color: #001080"><data-lsp lsp='(property) type: "text"' >type</data-lsp></span><span style="color: #000000">: </span><span style="color: #A31515">"text"</span><span style="color: #000000">;</span></div><div class='line'><span style="color: #000000">  </span><span style="color: #001080"><data-lsp lsp='(property) value: string' >value</data-lsp></span><span style="color: #000000">: </span><span style="color: #267F99">string</span><span style="color: #000000">;</span></div><div class='line'><span style="color: #000000">  </span><span style="color: #001080"><data-lsp lsp='(property) target: HTMLInputElement' >target</data-lsp></span><span style="color: #000000">: </span><span style="color: #267F99"><data-lsp lsp='interface HTMLInputElement' >HTMLInputElement</data-lsp></span><span style="color: #000000">;</span></div><div class='line'><span style="color: #000000">};</span></div><div class='line'><span style="color: #0000FF">type</span><span style="color: #000000"> </span><span style="color: #267F99"><data-lsp lsp='type UserMouseEventWithType = {&#10;    type: "mouse";&#10;    value: number;&#10;    target: HTMLDivElement;&#10;}' >UserMouseEventWithType</data-lsp></span><span style="color: #000000"> = {</span></div><div class='line'><span style="color: #000000">  </span><span style="color: #001080"><data-lsp lsp='(property) type: "mouse"' >type</data-lsp></span><span style="color: #000000">: </span><span style="color: #A31515">"mouse"</span><span style="color: #000000">;</span></div><div class='line'><span style="color: #000000">  </span><span style="color: #001080"><data-lsp lsp='(property) value: number' >value</data-lsp></span><span style="color: #000000">: </span><span style="color: #267F99">number</span><span style="color: #000000">;</span></div><div class='line'><span style="color: #000000">  </span><span style="color: #001080"><data-lsp lsp='(property) target: HTMLDivElement' >target</data-lsp></span><span style="color: #000000">: </span><span style="color: #267F99"><data-lsp lsp='interface HTMLDivElement' >HTMLDivElement</data-lsp></span><span style="color: #000000">;</span></div><div class='line'><span style="color: #000000">};</span></div><div class='line'><span style="color: #0000FF">type</span><span style="color: #000000"> </span><span style="color: #267F99"><data-lsp lsp='type UserEventWithType = UserTextEventWithType | UserMouseEventWithType' >UserEventWithType</data-lsp></span><span style="color: #000000"> = </span><span style="color: #267F99"><data-lsp lsp='type UserTextEventWithType = {&#10;    type: "text";&#10;    value: string;&#10;    target: HTMLInputElement;&#10;}' >UserTextEventWithType</data-lsp></span><span style="color: #000000"> | </span><span style="color: #267F99"><data-lsp lsp='type UserMouseEventWithType = {&#10;    type: "mouse";&#10;    value: number;&#10;    target: HTMLDivElement;&#10;}' >UserMouseEventWithType</data-lsp></span><span style="color: #000000">;</span></div><div class='line'>&nbsp;</div><div class='line'><span style="color: #0000FF">function</span><span style="color: #000000"> </span><span style="color: #795E26"><data-lsp lsp='function handleUserEventWithType(event: UserEventWithType): void' >handleUserEventWithType</data-lsp></span><span style="color: #000000">(</span><span style="color: #001080"><data-lsp lsp='(parameter) event: UserEventWithType' >event</data-lsp></span><span style="color: #000000">: </span><span style="color: #267F99"><data-lsp lsp='type UserEventWithType = UserTextEventWithType | UserMouseEventWithType' >UserEventWithType</data-lsp></span><span style="color: #000000">) {</span></div><div class='line'><span style="color: #000000">  </span><span style="color: #008000">// 两个分支中的类型明确了</span></div><div class='line'><span style="color: #000000">  </span><span style="color: #AF00DB">if</span><span style="color: #000000"> (</span><span style="color: #001080"><data-lsp lsp='(parameter) event: UserEventWithType' >event</data-lsp></span><span style="color: #000000">.</span><span style="color: #001080"><data-lsp lsp='(property) type: "text" | "mouse"' >type</data-lsp></span><span style="color: #000000"> === </span><span style="color: #A31515">"text"</span><span style="color: #000000">) {</span></div><div class='line'><span style="color: #000000">    </span><span style="color: #001080"><data-lsp lsp='(parameter) event: UserTextEventWithType' >event</data-lsp></span><span style="color: #000000">;</span></div><div class='line'><span style="color: #000000">    </span><span style="color: #001080"><data-lsp lsp='(parameter) event: UserTextEventWithType' >event</data-lsp></span><span style="color: #000000">.</span><span style="color: #001080"><data-lsp lsp='(property) value: string' >value</data-lsp></span><span style="color: #000000">;</span></div><div class='line'><span style="color: #000000">    </span><span style="color: #001080"><data-lsp lsp='(parameter) event: UserTextEventWithType' >event</data-lsp></span><span style="color: #000000">.</span><span style="color: #001080"><data-lsp lsp='(property) target: HTMLInputElement' >target</data-lsp></span><span style="color: #000000">;</span></div><div class='line'><span style="color: #000000">  } </span><span style="color: #AF00DB">else</span><span style="color: #000000"> {</span></div><div class='line'><span style="color: #000000">    </span><span style="color: #001080"><data-lsp lsp='(parameter) event: UserMouseEventWithType' >event</data-lsp></span><span style="color: #000000">;</span></div><div class='line'><span style="color: #000000">    </span><span style="color: #001080"><data-lsp lsp='(parameter) event: UserMouseEventWithType' >event</data-lsp></span><span style="color: #000000">.</span><span style="color: #001080"><data-lsp lsp='(property) value: number' >value</data-lsp></span><span style="color: #000000">;</span></div><div class='line'><span style="color: #000000">    </span><span style="color: #001080"><data-lsp lsp='(parameter) event: UserMouseEventWithType' >event</data-lsp></span><span style="color: #000000">.</span><span style="color: #001080"><data-lsp lsp='(property) target: HTMLDivElement' >target</data-lsp></span><span style="color: #000000">;</span></div><div class='line'><span style="color: #000000">  }</span></div><div class='line'><span style="color: #000000">}</span></div></code></div></pre>
<p>键入运算符：<code>type newType = TYPE[key]</code></p>

<pre class="shiki light-plus twoslash lsp" style="background-color: #FFFFFF; color: #000000"><div class="language-id">ts</div><div class='code-container'><code><div class='line'><span style="color: #0000FF">type</span><span style="color: #000000"> </span><span style="color: #267F99"><data-lsp lsp='type APIResponse = {&#10;    user: {&#10;        userId: number;&#10;        name: string;&#10;        friendList: {&#10;            count: number;&#10;            friends: {&#10;                name: string;&#10;            }[];&#10;        };&#10;    };&#10;}' >APIResponse</data-lsp></span><span style="color: #000000"> = {</span></div><div class='line'><span style="color: #000000">  </span><span style="color: #001080"><data-lsp lsp='(property) user: {&#10;    userId: number;&#10;    name: string;&#10;    friendList: {&#10;        count: number;&#10;        friends: {&#10;            name: string;&#10;        }[];&#10;    };&#10;}' >user</data-lsp></span><span style="color: #000000">: {</span></div><div class='line'><span style="color: #000000">    </span><span style="color: #001080"><data-lsp lsp='(property) userId: number' >userId</data-lsp></span><span style="color: #000000">: </span><span style="color: #267F99">number</span><span style="color: #000000">;</span></div><div class='line'><span style="color: #000000">    </span><span style="color: #001080"><data-lsp lsp='(property) name: string' >name</data-lsp></span><span style="color: #000000">: </span><span style="color: #267F99">string</span><span style="color: #000000">;</span></div><div class='line'><span style="color: #000000">    </span><span style="color: #001080"><data-lsp lsp='(property) friendList: {&#10;    count: number;&#10;    friends: {&#10;        name: string;&#10;    }[];&#10;}' >friendList</data-lsp></span><span style="color: #000000">: {</span></div><div class='line'><span style="color: #000000">      </span><span style="color: #001080"><data-lsp lsp='(property) count: number' >count</data-lsp></span><span style="color: #000000">: </span><span style="color: #267F99">number</span><span style="color: #000000">;</span></div><div class='line'><span style="color: #000000">      </span><span style="color: #001080"><data-lsp lsp='(property) friends: {&#10;    name: string;&#10;}[]' >friends</data-lsp></span><span style="color: #000000">: { </span><span style="color: #001080"><data-lsp lsp='(property) name: string' >name</data-lsp></span><span style="color: #000000">: </span><span style="color: #267F99">string</span><span style="color: #000000"> }[];</span></div><div class='line'><span style="color: #000000">    };</span></div><div class='line'><span style="color: #000000">  };</span></div><div class='line'><span style="color: #000000">};</span></div><div class='line'><span style="color: #008000">// friendList 的类型可以从 APIResponse 类型中使用键入运算符获取</span></div><div class='line'><span style="color: #0000FF">function</span><span style="color: #000000"> </span><span style="color: #795E26"><data-lsp lsp='function showFriendList(friendList: APIResponse["user"]["friendList"]): void' >showFriendList</data-lsp></span><span style="color: #000000">(</span><span style="color: #001080"><data-lsp lsp='(parameter) friendList: {&#10;    count: number;&#10;    friends: {&#10;        name: string;&#10;    }[];&#10;}' >friendList</data-lsp></span><span style="color: #000000">: </span><span style="color: #267F99"><data-lsp lsp='type APIResponse = {&#10;    user: {&#10;        userId: number;&#10;        name: string;&#10;        friendList: {&#10;            count: number;&#10;            friends: {&#10;                name: string;&#10;            }[];&#10;        };&#10;    };&#10;}' >APIResponse</data-lsp></span><span style="color: #000000">[</span><span style="color: #A31515">"user"</span><span style="color: #000000">][</span><span style="color: #A31515">"friendList"</span><span style="color: #000000">]) {</span></div><div class='line'><span style="color: #000000">  </span><span style="color: #001080"><data-lsp lsp='(parameter) friendList: {&#10;    count: number;&#10;    friends: {&#10;        name: string;&#10;    }[];&#10;}' >friendList</data-lsp></span><span style="color: #000000">.</span><span style="color: #001080"><data-lsp lsp='(property) friends: {&#10;    name: string;&#10;}[]' >friends</data-lsp></span><span style="color: #000000">.</span><span style="color: #795E26"><data-lsp lsp='(method) Array&lt;{ name: string; }>.forEach(callbackfn: (value: {&#10;    name: string;&#10;}, index: number, array: {&#10;    name: string;&#10;}[]) => void, thisArg?: any): void' >forEach</data-lsp></span><span style="color: #000000">((</span><span style="color: #001080"><data-lsp lsp='(parameter) friend: {&#10;    name: string;&#10;}' >friend</data-lsp></span><span style="color: #000000">) </span><span style="color: #0000FF">=&gt;</span><span style="color: #000000"> {</span></div><div class='line'><span style="color: #000000">    </span><span style="color: #001080"><data-lsp lsp='var console: Console' >console</data-lsp></span><span style="color: #000000">.</span><span style="color: #795E26"><data-lsp lsp='(method) Console.log(...data: any[]): void' >log</data-lsp></span><span style="color: #000000">(</span><span style="color: #001080"><data-lsp lsp='(parameter) friend: {&#10;    name: string;&#10;}' >friend</data-lsp></span><span style="color: #000000">.</span><span style="color: #001080"><data-lsp lsp='(property) name: string' >name</data-lsp></span><span style="color: #000000">);</span></div><div class='line'><span style="color: #000000">  });</span></div><div class='line'><span style="color: #000000">}</span></div></code></div></pre>
<p><code>keyof</code> 运算符获取对象所有键的类型，合并为一个字符串字面量类型</p>
<pre class="shiki light-plus twoslash lsp" style="background-color: #FFFFFF; color: #000000"><div class="language-id">ts</div><div class='code-container'><code><div class='line'><span style="color: #0000FF">type</span><span style="color: #000000"> </span><span style="color: #267F99"><data-lsp lsp='type ResponseKey = "userId" | "name" | "friendList"' >ResponseKey</data-lsp></span><span style="color: #000000"> = </span><span style="color: #0000FF">keyof</span><span style="color: #000000"> </span><span style="color: #267F99"><data-lsp lsp='type APIResponse = {&#10;    user: {&#10;        userId: number;&#10;        name: string;&#10;        friendList: {&#10;            count: number;&#10;            friends: {&#10;                name: string;&#10;            }[];&#10;        };&#10;    };&#10;}' >APIResponse</data-lsp></span><span style="color: #000000">[</span><span style="color: #A31515">"user"</span><span style="color: #000000">]; </span><span style="color: #008000">// "userId" | "name" | "friendList"</span></div></code></div></pre>
<p>利用 <code>keyof</code> 实现一个类型安全的读值函数</p>
<pre class="shiki light-plus twoslash lsp" style="background-color: #FFFFFF; color: #000000"><div class="language-id">ts</div><div class='code-container'><code><div class='line'><span style="color: #0000FF">function</span><span style="color: #000000"> </span><span style="color: #795E26"><data-lsp lsp='function get&lt;O extends object, K extends keyof O>(obj: O, key: K): O[K]' >get</data-lsp></span><span style="color: #000000">&lt;</span><span style="color: #267F99"><data-lsp lsp='(type parameter) O in get&lt;O extends object, K extends keyof O>(obj: O, key: K): O[K]' >O</data-lsp></span><span style="color: #000000"> </span><span style="color: #0000FF">extends</span><span style="color: #000000"> </span><span style="color: #267F99">object</span><span style="color: #000000">, </span><span style="color: #267F99"><data-lsp lsp='(type parameter) K in get&lt;O extends object, K extends keyof O>(obj: O, key: K): O[K]' >K</data-lsp></span><span style="color: #000000"> </span><span style="color: #0000FF">extends</span><span style="color: #000000"> </span><span style="color: #0000FF">keyof</span><span style="color: #000000"> </span><span style="color: #267F99"><data-lsp lsp='(type parameter) O in get&lt;O extends object, K extends keyof O>(obj: O, key: K): O[K]' >O</data-lsp></span><span style="color: #000000">&gt;(</span><span style="color: #001080"><data-lsp lsp='(parameter) obj: O extends object' >obj</data-lsp></span><span style="color: #000000">: </span><span style="color: #267F99"><data-lsp lsp='(type parameter) O in get&lt;O extends object, K extends keyof O>(obj: O, key: K): O[K]' >O</data-lsp></span><span style="color: #000000">, </span><span style="color: #001080"><data-lsp lsp='(parameter) key: K extends keyof O' >key</data-lsp></span><span style="color: #000000">: </span><span style="color: #267F99"><data-lsp lsp='(type parameter) K in get&lt;O extends object, K extends keyof O>(obj: O, key: K): O[K]' >K</data-lsp></span><span style="color: #000000">) {</span></div><div class='line'><span style="color: #000000">  </span><span style="color: #AF00DB">return</span><span style="color: #000000"> </span><span style="color: #001080"><data-lsp lsp='(parameter) obj: O extends object' >obj</data-lsp></span><span style="color: #000000">[</span><span style="color: #001080"><data-lsp lsp='(parameter) key: K extends keyof O' >key</data-lsp></span><span style="color: #000000">];</span></div><div class='line'><span style="color: #000000">}</span></div><div class='line'>&nbsp;</div><div class='line'><span style="color: #0000FF">const</span><span style="color: #000000"> </span><span style="color: #0070C1"><data-lsp lsp='const personInfo: {&#10;    name: string;&#10;    age: number;&#10;    friends: {&#10;        name: string;&#10;        age: number;&#10;    }[];&#10;}' >personInfo</data-lsp></span><span style="color: #000000"> = {</span></div><div class='line'><span style="color: #000000">  </span><span style="color: #001080"><data-lsp lsp='(property) name: string' >name</data-lsp>:</span><span style="color: #000000"> </span><span style="color: #A31515">"banqinghe"</span><span style="color: #000000">,</span></div><div class='line'><span style="color: #000000">  </span><span style="color: #001080"><data-lsp lsp='(property) age: number' >age</data-lsp>:</span><span style="color: #000000"> </span><span style="color: #098658">18</span><span style="color: #000000">,</span></div><div class='line'><span style="color: #000000">  </span><span style="color: #001080"><data-lsp lsp='(property) friends: {&#10;    name: string;&#10;    age: number;&#10;}[]' >friends</data-lsp>:</span><span style="color: #000000"> [{ </span><span style="color: #001080"><data-lsp lsp='(property) name: string' >name</data-lsp>:</span><span style="color: #000000"> </span><span style="color: #A31515">"banqinghe"</span><span style="color: #000000">, </span><span style="color: #001080"><data-lsp lsp='(property) age: number' >age</data-lsp>:</span><span style="color: #000000"> </span><span style="color: #098658">18</span><span style="color: #000000"> }],</span></div><div class='line'><span style="color: #000000">};</span></div><div class='line'>&nbsp;</div><div class='line'><span style="color: #0000FF">let</span><span style="color: #000000"> </span><span style="color: #001080"><data-lsp lsp='let friendName: {&#10;    name: string;&#10;    age: number;&#10;}[]' >friendName</data-lsp></span><span style="color: #000000"> = </span><span style="color: #795E26"><data-lsp lsp='function get&lt;{&#10;    name: string;&#10;    age: number;&#10;    friends: {&#10;        name: string;&#10;        age: number;&#10;    }[];&#10;}, "friends">(obj: {&#10;    name: string;&#10;    age: number;&#10;    friends: {&#10;        name: string;&#10;        age: number;&#10;    }[];&#10;}, key: "friends"): {&#10;    name: string;&#10;    age: number;&#10;}[]' >get</data-lsp></span><span style="color: #000000">(</span><span style="color: #001080"><data-lsp lsp='const personInfo: {&#10;    name: string;&#10;    age: number;&#10;    friends: {&#10;        name: string;&#10;        age: number;&#10;    }[];&#10;}' >personInfo</data-lsp></span><span style="color: #000000">, </span><span style="color: #A31515">&apos;friends&apos;</span><span style="color: #000000">);</span></div></code></div></pre>
<p><code>Record</code> 类型，用于描述有映射关系的对象</p>
<ul>
<li>常规的索引签名，键只能约束为 <code>string</code>、<code>number</code> 或 <code>symbol</code></li>
<li><code>Record</code>，对象的键还可以被约束为 <code>string</code> 和 <code>number</code> 的子类型</li>
</ul>
<p>映射类型是一种比 Record 更强大的映射类型，Record 类型实际上就是用映射类型实现的。</p>
<pre class="shiki light-plus twoslash lsp" style="background-color: #FFFFFF; color: #000000"><div class="language-id">ts</div><div class='code-container'><code><div class='line'><span style="color: #0000FF">type</span><span style="color: #000000"> </span><span style="color: #267F99"><data-lsp lsp='type Weekday = "Mon" | "Tue" | "Wed" | "Thu" | "Fri"' >Weekday</data-lsp></span><span style="color: #000000"> = </span><span style="color: #A31515">&apos;Mon&apos;</span><span style="color: #000000"> | </span><span style="color: #A31515">&apos;Tue&apos;</span><span style="color: #000000"> | </span><span style="color: #A31515">&apos;Wed&apos;</span><span style="color: #000000"> | </span><span style="color: #A31515">&apos;Thu&apos;</span><span style="color: #000000"> | </span><span style="color: #A31515">&apos;Fri&apos;</span><span style="color: #000000">;</span></div><div class='line'><span style="color: #0000FF">type</span><span style="color: #000000"> </span><span style="color: #267F99"><data-lsp lsp='type Day = Weekday | "Sat" | "Sun"' >Day</data-lsp></span><span style="color: #000000"> = </span><span style="color: #267F99"><data-lsp lsp='type Weekday = "Mon" | "Tue" | "Wed" | "Thu" | "Fri"' >Weekday</data-lsp></span><span style="color: #000000"> | </span><span style="color: #A31515">&apos;Sat&apos;</span><span style="color: #000000"> | </span><span style="color: #A31515">&apos;Sun&apos;</span><span style="color: #000000">;</span></div><div class='line'>&nbsp;</div><div class='line'><span style="color: #008000">// Without Record：无法指定 Weekday → Day 的映射</span></div><div class='line'><span style="color: #0000FF">const</span><span style="color: #000000"> </span><span style="color: #0070C1"><data-lsp lsp='const nextDayWithoutRecord: {&#10;    Mon: string;&#10;}' >nextDayWithoutRecord</data-lsp></span><span style="color: #000000"> = {</span></div><div class='line'><span style="color: #000000">  </span><span style="color: #001080"><data-lsp lsp='(property) Mon: string' >Mon</data-lsp>:</span><span style="color: #000000"> </span><span style="color: #A31515">&apos;Tue&apos;</span><span style="color: #000000">,</span></div><div class='line'><span style="color: #000000">};</span></div><div class='line'><span style="color: #001080"><data-lsp lsp='const nextDayWithoutRecord: {&#10;    Mon: string;&#10;}' >nextDayWithoutRecord</data-lsp></span><span style="color: #000000">.</span><span style="color: #001080"><data-err><data-lsp lsp='any' >Tue</data-lsp></data-err></span><span style="color: #000000">; </span><span style="color: #008000">// 使用时才会发现错误</span></div><span class="error"><span>Property 'Tue' does not exist on type '{ Mon: string; }'.</span><span class="code">2339</span></span><span class="error-behind">Property 'Tue' does not exist on type '{ Mon: string; }'.</span><div class='line'>&nbsp;</div><div class='line'><span style="color: #008000">// With Record</span></div><div class='line'><span style="color: #0000FF">const</span><span style="color: #000000"> </span><span style="color: #0070C1"><data-lsp lsp='const nextDayWithRecord: Record&lt;Weekday, Day>' >nextDayWithRecord</data-lsp></span><span style="color: #000000">: </span><span style="color: #267F99"><data-lsp lsp='type Record&lt;K extends string | number | symbol, T> = { [P in K]: T; }' >Record</data-lsp></span><span style="color: #000000">&lt;</span><span style="color: #267F99"><data-lsp lsp='type Weekday = "Mon" | "Tue" | "Wed" | "Thu" | "Fri"' >Weekday</data-lsp></span><span style="color: #000000">, </span><span style="color: #267F99"><data-lsp lsp='type Day = Weekday | "Sat" | "Sun"' >Day</data-lsp></span><span style="color: #000000">&gt; = {</span></div><div class='line'><span style="color: #000000">  </span><span style="color: #001080"><data-lsp lsp='(property) Mon: Day' >Mon</data-lsp>:</span><span style="color: #000000"> </span><span style="color: #A31515">&apos;Tue&apos;</span><span style="color: #000000">,</span></div><div class='line'><span style="color: #000000">  </span><span style="color: #001080"><data-lsp lsp='(property) Tue: Day' >Tue</data-lsp>:</span><span style="color: #000000"> </span><span style="color: #A31515">&apos;Wed&apos;</span><span style="color: #000000">,</span></div><div class='line'><span style="color: #000000">  </span><span style="color: #001080"><data-lsp lsp='(property) Wed: Day' >Wed</data-lsp>:</span><span style="color: #000000"> </span><span style="color: #A31515">&apos;Thu&apos;</span><span style="color: #000000">,</span></div><div class='line'><span style="color: #000000">  </span><span style="color: #001080"><data-lsp lsp='(property) Thu: Day' >Thu</data-lsp>:</span><span style="color: #000000"> </span><span style="color: #A31515">&apos;Fri&apos;</span><span style="color: #000000">,</span></div><div class='line'><span style="color: #000000">  </span><span style="color: #001080"><data-lsp lsp='(property) Fri: Day' >Fri</data-lsp>:</span><span style="color: #000000"> </span><span style="color: #A31515">&apos;Sat&apos;</span><span style="color: #000000">,</span></div><div class='line'><span style="color: #000000">};</span></div><div class='line'>&nbsp;</div><div class='line'><span style="color: #008000">// With Mapped Type</span></div><div class='line'><span style="color: #0000FF">const</span><span style="color: #000000"> </span><span style="color: #0070C1"><data-lsp lsp='const nextDayWithMappedType: {&#10;    Mon: Day;&#10;    Tue: Day;&#10;    Wed: Day;&#10;    Thu: Day;&#10;    Fri: Day;&#10;}' >nextDayWithMappedType</data-lsp></span><span style="color: #000000">: { [</span><span style="color: #267F99"><data-lsp lsp='(type parameter) K' >K</data-lsp></span><span style="color: #000000"> </span><span style="color: #0000FF">in</span><span style="color: #000000"> </span><span style="color: #267F99"><data-lsp lsp='type Weekday = "Mon" | "Tue" | "Wed" | "Thu" | "Fri"' >Weekday</data-lsp></span><span style="color: #000000">]: </span><span style="color: #267F99"><data-lsp lsp='type Day = Weekday | "Sat" | "Sun"' >Day</data-lsp></span><span style="color: #000000"> } = {</span></div><div class='line'><span style="color: #000000">  </span><span style="color: #001080"><data-lsp lsp='(property) Mon: Day' >Mon</data-lsp>:</span><span style="color: #000000"> </span><span style="color: #A31515">&apos;Tue&apos;</span><span style="color: #000000">,</span></div><div class='line'><span style="color: #000000">  </span><span style="color: #001080"><data-lsp lsp='(property) Tue: Day' >Tue</data-lsp>:</span><span style="color: #000000"> </span><span style="color: #A31515">&apos;Wed&apos;</span><span style="color: #000000">,</span></div><div class='line'><span style="color: #000000">  </span><span style="color: #001080"><data-lsp lsp='(property) Wed: Day' >Wed</data-lsp>:</span><span style="color: #000000"> </span><span style="color: #A31515">&apos;Thu&apos;</span><span style="color: #000000">,</span></div><div class='line'><span style="color: #000000">  </span><span style="color: #001080"><data-lsp lsp='(property) Thu: Day' >Thu</data-lsp>:</span><span style="color: #000000"> </span><span style="color: #A31515">&apos;Fri&apos;</span><span style="color: #000000">,</span></div><div class='line'><span style="color: #000000">  </span><span style="color: #001080"><data-lsp lsp='(property) Fri: Day' >Fri</data-lsp>:</span><span style="color: #000000"> </span><span style="color: #A31515">&apos;Sat&apos;</span><span style="color: #000000">,</span></div><div class='line'><span style="color: #000000">};</span></div></code></div></pre>
<p>使用映射类型实现 <code>Record</code>：</p>
<pre class="shiki light-plus" style="background-color: #FFFFFF; color: #000000"><div class="language-id">ts</div><div class='code-container'><code><div class='line'><span style="color: #008000">// keyof any 的返回为 string | number | symbol</span></div><div class='line'><span style="color: #0000FF">type</span><span style="color: #000000"> </span><span style="color: #267F99">Record</span><span style="color: #000000">&lt;</span><span style="color: #267F99">K</span><span style="color: #000000"> </span><span style="color: #0000FF">extends</span><span style="color: #000000"> </span><span style="color: #0000FF">keyof</span><span style="color: #000000"> </span><span style="color: #267F99">any</span><span style="color: #000000">, </span><span style="color: #267F99">T</span><span style="color: #000000">&gt; = {</span></div><div class='line'><span style="color: #000000">  [</span><span style="color: #267F99">P</span><span style="color: #000000"> </span><span style="color: #0000FF">in</span><span style="color: #000000"> </span><span style="color: #267F99">K</span><span style="color: #000000">]: </span><span style="color: #267F99">T</span><span style="color: #000000">;</span></div><div class='line'><span style="color: #000000">};</span></div></code></div></pre>
<p>映射类型结合 keyof 可以实现约束特定键对应值的类型。</p>
<p>特殊的类型运算符 <code>-</code>（减号），只能在映射类型中使用。可以将可选（?）或只读（readonly）状态去除。</p>
<p>与 <code>-</code> 对应的运算符 <code>+</code>，一般不直接使用，因为其一般蕴含在别的运算符中。</p>
<ul>
<li><code>+readonly</code> 等效于 <code>readonly</code></li>
<li><code>+?</code> 等效于 <code>?</code></li>
</ul>

<pre class="shiki light-plus twoslash lsp" style="background-color: #FFFFFF; color: #000000"><div class="language-id">ts</div><div class='code-container'><code><div class='line'><span style="color: #0000FF">type</span><span style="color: #000000"> </span><span style="color: #267F99"><data-lsp lsp='type Account = {&#10;    id: number;&#10;    isEmployee: boolean;&#10;    notes: string[];&#10;}' >Account</data-lsp></span><span style="color: #000000"> = {</span></div><div class='line'><span style="color: #000000">  </span><span style="color: #001080"><data-lsp lsp='(property) id: number' >id</data-lsp></span><span style="color: #000000">: </span><span style="color: #267F99">number</span><span style="color: #000000">;</span></div><div class='line'><span style="color: #000000">  </span><span style="color: #001080"><data-lsp lsp='(property) isEmployee: boolean' >isEmployee</data-lsp></span><span style="color: #000000">: </span><span style="color: #267F99">boolean</span><span style="color: #000000">;</span></div><div class='line'><span style="color: #000000">  </span><span style="color: #001080"><data-lsp lsp='(property) notes: string[]' >notes</data-lsp></span><span style="color: #000000">: </span><span style="color: #267F99">string</span><span style="color: #000000">[];</span></div><div class='line'><span style="color: #000000">};</span></div><div class='line'><span style="color: #008000">// 所有字段可选</span></div><div class='line'><span style="color: #0000FF">type</span><span style="color: #000000"> </span><span style="color: #267F99"><data-lsp lsp='type OptionalAccount = {&#10;    id?: number | undefined;&#10;    isEmployee?: boolean | undefined;&#10;    notes?: string[] | undefined;&#10;}' >OptionalAccount</data-lsp></span><span style="color: #000000"> = {</span></div><div class='line'><span style="color: #000000">  [</span><span style="color: #267F99"><data-lsp lsp='(type parameter) K' >K</data-lsp></span><span style="color: #000000"> </span><span style="color: #0000FF">in</span><span style="color: #000000"> </span><span style="color: #0000FF">keyof</span><span style="color: #000000"> </span><span style="color: #267F99"><data-lsp lsp='type Account = {&#10;    id: number;&#10;    isEmployee: boolean;&#10;    notes: string[];&#10;}' >Account</data-lsp></span><span style="color: #000000">]?: </span><span style="color: #267F99"><data-lsp lsp='type Account = {&#10;    id: number;&#10;    isEmployee: boolean;&#10;    notes: string[];&#10;}' >Account</data-lsp></span><span style="color: #000000">[</span><span style="color: #267F99"><data-lsp lsp='(type parameter) K' >K</data-lsp></span><span style="color: #000000">];</span></div><div class='line'><span style="color: #000000">};</span></div><div class='line'>&nbsp;</div><div class='line'><span style="color: #0000FF">type</span><span style="color: #000000"> </span><span style="color: #267F99"><data-lsp lsp='type RequiredAccount = {&#10;    id: number;&#10;    isEmployee: boolean;&#10;    notes: string[];&#10;}' >RequiredAccount</data-lsp></span><span style="color: #000000"> = {</span></div><div class='line'><span style="color: #000000">  [</span><span style="color: #267F99"><data-lsp lsp='(type parameter) K' >K</data-lsp></span><span style="color: #000000"> </span><span style="color: #0000FF">in</span><span style="color: #000000"> </span><span style="color: #0000FF">keyof</span><span style="color: #000000"> </span><span style="color: #267F99"><data-lsp lsp='type OptionalAccount = {&#10;    id?: number | undefined;&#10;    isEmployee?: boolean | undefined;&#10;    notes?: string[] | undefined;&#10;}' >OptionalAccount</data-lsp></span><span style="color: #000000">]-?: </span><span style="color: #267F99"><data-lsp lsp='type Account = {&#10;    id: number;&#10;    isEmployee: boolean;&#10;    notes: string[];&#10;}' >Account</data-lsp></span><span style="color: #000000">[</span><span style="color: #267F99"><data-lsp lsp='(type parameter) K' >K</data-lsp></span><span style="color: #000000">];</span></div><div class='line'><span style="color: #000000">};</span></div><div class='line'>&nbsp;</div><div class='line'><span style="color: #0000FF">type</span><span style="color: #000000"> </span><span style="color: #267F99"><data-lsp lsp='type ReadonlyAccount = {&#10;    readonly id: number;&#10;    readonly isEmployee: boolean;&#10;    readonly notes: string[];&#10;}' >ReadonlyAccount</data-lsp></span><span style="color: #000000"> = {</span></div><div class='line'><span style="color: #000000">  </span><span style="color: #0000FF">readonly</span><span style="color: #000000"> [</span><span style="color: #267F99"><data-lsp lsp='(type parameter) K' >K</data-lsp></span><span style="color: #000000"> </span><span style="color: #0000FF">in</span><span style="color: #000000"> </span><span style="color: #0000FF">keyof</span><span style="color: #000000"> </span><span style="color: #267F99"><data-lsp lsp='type Account = {&#10;    id: number;&#10;    isEmployee: boolean;&#10;    notes: string[];&#10;}' >Account</data-lsp></span><span style="color: #000000">]: </span><span style="color: #267F99"><data-lsp lsp='type Account = {&#10;    id: number;&#10;    isEmployee: boolean;&#10;    notes: string[];&#10;}' >Account</data-lsp></span><span style="color: #000000">[</span><span style="color: #267F99"><data-lsp lsp='(type parameter) K' >K</data-lsp></span><span style="color: #000000">];</span></div><div class='line'><span style="color: #000000">};</span></div><div class='line'>&nbsp;</div><div class='line'><span style="color: #0000FF">type</span><span style="color: #000000"> </span><span style="color: #267F99"><data-lsp lsp='type WritableAccount = {&#10;    id: number;&#10;    isEmployee: boolean;&#10;    notes: string[];&#10;}' >WritableAccount</data-lsp></span><span style="color: #000000"> = {</span></div><div class='line'><span style="color: #000000">  -</span><span style="color: #0000FF">readonly</span><span style="color: #000000"> [</span><span style="color: #267F99"><data-lsp lsp='(type parameter) K' >K</data-lsp></span><span style="color: #000000"> </span><span style="color: #0000FF">in</span><span style="color: #000000"> </span><span style="color: #0000FF">keyof</span><span style="color: #000000"> </span><span style="color: #267F99"><data-lsp lsp='type ReadonlyAccount = {&#10;    readonly id: number;&#10;    readonly isEmployee: boolean;&#10;    readonly notes: string[];&#10;}' >ReadonlyAccount</data-lsp></span><span style="color: #000000">]: </span><span style="color: #267F99"><data-lsp lsp='type Account = {&#10;    id: number;&#10;    isEmployee: boolean;&#10;    notes: string[];&#10;}' >Account</data-lsp></span><span style="color: #000000">[</span><span style="color: #267F99"><data-lsp lsp='(type parameter) K' >K</data-lsp></span><span style="color: #000000">];</span></div><div class='line'><span style="color: #000000">};</span></div><div class='line'>&nbsp;</div><div class='line'><span style="color: #008000">// 其他 case（所有字段可为 null、只读…… 见 P168）</span></div></code></div></pre>
<p>映射类型很好用，所以 TypeScript 内置了一些类型，用来描述常见的映射类型</p>
<ul>
<li><code>Record&#x3C;Keys, Values></code></li>
<li><code>Partial&#x3C;Object></code>：将 <code>Object</code> 中每个属性都置为可选</li>
<li><code>Required&#x3C;Object></code>：将 <code>Object</code> 中每个属性都置为必须</li>
<li><code>Readonly&#x3C;Object></code>：将 <code>Object</code> 中的每个属性都置为只读</li>
<li><code>Pick&#x3C;Object, Keys></code>：返回只含指定 <code>Keys</code> 的子类型</li>
<li><code>Omit&#x3C;Object, Keys></code>: 返回不含指定 <code>Keys</code> 的子类型（实现使用了 <code>Exclude</code>）</li>
</ul>
<p>（学习一下这些映射类型的实现）</p>
<pre class="shiki light-plus twoslash lsp" style="background-color: #FFFFFF; color: #000000"><div class="language-id">ts</div><div class='code-container'><code><div class='line'><span style="color: #0000FF">type</span><span style="color: #000000"> </span><span style="color: #267F99"><data-lsp lsp='type OptionalAccount2 = {&#10;    id?: number | undefined;&#10;    isEmployee?: boolean | undefined;&#10;    notes?: string[] | undefined;&#10;}' >OptionalAccount2</data-lsp></span><span style="color: #000000"> = </span><span style="color: #267F99"><data-lsp lsp='type Partial&lt;T> = { [P in keyof T]?: T[P] | undefined; }' >Partial</data-lsp></span><span style="color: #000000">&lt;</span><span style="color: #267F99"><data-lsp lsp='type Account = {&#10;    id: number;&#10;    isEmployee: boolean;&#10;    notes: string[];&#10;}' >Account</data-lsp></span><span style="color: #000000">&gt;;</span></div><div class='line'><span style="color: #0000FF">type</span><span style="color: #000000"> </span><span style="color: #267F99"><data-lsp lsp='type RequiredAccount2 = {&#10;    id: number;&#10;    isEmployee: boolean;&#10;    notes: string[];&#10;}' >RequiredAccount2</data-lsp></span><span style="color: #000000"> = </span><span style="color: #267F99"><data-lsp lsp='type Required&lt;T> = { [P in keyof T]-?: T[P]; }' >Required</data-lsp></span><span style="color: #000000">&lt;</span><span style="color: #267F99"><data-lsp lsp='type OptionalAccount2 = {&#10;    id?: number | undefined;&#10;    isEmployee?: boolean | undefined;&#10;    notes?: string[] | undefined;&#10;}' >OptionalAccount2</data-lsp></span><span style="color: #000000">&gt;;</span></div><div class='line'><span style="color: #0000FF">type</span><span style="color: #000000"> </span><span style="color: #267F99"><data-lsp lsp='type ReadonlyAccount2 = {&#10;    readonly id: number;&#10;    readonly isEmployee: boolean;&#10;    readonly notes: string[];&#10;}' >ReadonlyAccount2</data-lsp></span><span style="color: #000000"> = </span><span style="color: #267F99"><data-lsp lsp='type Readonly&lt;T> = { readonly [P in keyof T]: T[P]; }' >Readonly</data-lsp></span><span style="color: #000000">&lt;</span><span style="color: #267F99"><data-lsp lsp='type Account = {&#10;    id: number;&#10;    isEmployee: boolean;&#10;    notes: string[];&#10;}' >Account</data-lsp></span><span style="color: #000000">&gt;;</span></div><div class='line'><span style="color: #0000FF">type</span><span style="color: #000000"> </span><span style="color: #267F99"><data-lsp lsp='type PickAccount = {&#10;    id: number;&#10;    isEmployee: boolean;&#10;}' >PickAccount</data-lsp></span><span style="color: #000000"> = </span><span style="color: #267F99"><data-lsp lsp='type Pick&lt;T, K extends keyof T> = { [P in K]: T[P]; }' >Pick</data-lsp></span><span style="color: #000000">&lt;</span><span style="color: #267F99"><data-lsp lsp='type Account = {&#10;    id: number;&#10;    isEmployee: boolean;&#10;    notes: string[];&#10;}' >Account</data-lsp></span><span style="color: #000000">, </span><span style="color: #A31515">&apos;id&apos;</span><span style="color: #000000"> | </span><span style="color: #A31515">&apos;isEmployee&apos;</span><span style="color: #000000">&gt;;</span></div><div class='line'><span style="color: #0000FF">type</span><span style="color: #000000"> </span><span style="color: #267F99"><data-lsp lsp='type OmitAccount = {&#10;    isEmployee: boolean;&#10;    notes: string[];&#10;}' >OmitAccount</data-lsp></span><span style="color: #000000"> = </span><span style="color: #267F99"><data-lsp lsp='type Omit&lt;T, K extends string | number | symbol> = { [P in Exclude&lt;keyof T, K>]: T[P]; }' >Omit</data-lsp></span><span style="color: #000000">&lt;</span><span style="color: #267F99"><data-lsp lsp='type Account = {&#10;    id: number;&#10;    isEmployee: boolean;&#10;    notes: string[];&#10;}' >Account</data-lsp></span><span style="color: #000000">, </span><span style="color: #A31515">&apos;id&apos;</span><span style="color: #000000">&gt;;</span></div></code></div></pre>
<p>伴生对象模式，即将同名的对象和类放配对在一起。TypeScript 中可以实现类似的模式，因为 TypeScript 中值和类型处于不同
的命名空间中，所以可以做到将同名对象和类型放在一起。</p>
<p>Tips：若一个 ts 文件中既 export type 又 export 变量，并且二者同名，<code>import { type } from './file'</code> 的时候会同时将二者导入。</p>
<p>将数组推导为元组的方法：</p>
<ol>
<li>as const</li>
<li>利用剩余参数类型</li>
</ol>
<pre class="shiki light-plus twoslash lsp" style="background-color: #FFFFFF; color: #000000"><div class="language-id">ts</div><div class='code-container'><code><div class='line'><span style="color: #0000FF">function</span><span style="color: #000000"> </span><span style="color: #795E26"><data-lsp lsp='function tuple&lt;T extends unknown[]>(...args: T): T' >tuple</data-lsp></span><span style="color: #000000">&lt;</span><span style="color: #267F99"><data-lsp lsp='(type parameter) T in tuple&lt;T extends unknown[]>(...args: T): T' >T</data-lsp></span><span style="color: #000000"> </span><span style="color: #0000FF">extends</span><span style="color: #000000"> </span><span style="color: #267F99">unknown</span><span style="color: #000000">[]&gt;(...</span><span style="color: #001080"><data-lsp lsp='(parameter) args: T extends unknown[]' >args</data-lsp></span><span style="color: #000000">: </span><span style="color: #267F99"><data-lsp lsp='(type parameter) T in tuple&lt;T extends unknown[]>(...args: T): T' >T</data-lsp></span><span style="color: #000000">): </span><span style="color: #267F99"><data-lsp lsp='(type parameter) T in tuple&lt;T extends unknown[]>(...args: T): T' >T</data-lsp></span><span style="color: #000000"> {</span></div><div class='line'><span style="color: #000000">  </span><span style="color: #AF00DB">return</span><span style="color: #000000"> </span><span style="color: #001080"><data-lsp lsp='(parameter) args: T extends unknown[]' >args</data-lsp></span><span style="color: #000000">;</span></div><div class='line'><span style="color: #000000">}</span></div><div class='line'>&nbsp;</div><div class='line'><span style="color: #0000FF">const</span><span style="color: #000000"> </span><span style="color: #0070C1"><data-lsp lsp='const tuple0: (string | number | boolean)[]' >tuple0</data-lsp></span><span style="color: #000000"> = [</span><span style="color: #098658">1</span><span style="color: #000000">, </span><span style="color: #A31515">&apos;2&apos;</span><span style="color: #000000">, </span><span style="color: #0000FF">true</span><span style="color: #000000">]; </span><span style="color: #008000">// (number | string | boolean)[]</span></div><div class='line'><span style="color: #0000FF">const</span><span style="color: #000000"> </span><span style="color: #0070C1"><data-lsp lsp='const tuple1: [number, string, boolean]' >tuple1</data-lsp></span><span style="color: #000000"> = </span><span style="color: #795E26"><data-lsp lsp='function tuple&lt;[number, string, boolean]>(args_0: number, args_1: string, args_2: boolean): [number, string, boolean]' >tuple</data-lsp></span><span style="color: #000000">(</span><span style="color: #098658">1</span><span style="color: #000000">, </span><span style="color: #A31515">&apos;2&apos;</span><span style="color: #000000">, </span><span style="color: #0000FF">true</span><span style="color: #000000">); </span><span style="color: #008000">// [number, string, boolean]</span></div></code></div></pre>
<p>细化类型只在当前作用域中有效，不会转移到其他作用域。这就导致下面的 parseInt 函数依然无法得知 isString(input) 返回的是 true 还是 false。</p>
<p>当<strong>函数细化了参数类型</strong>且<strong>返回值为 boolean 时</strong>，可以使用 is 操作符使类型细化能在作用域之间转移。这一特性的使用场景较少。</p>
<pre class="shiki light-plus twoslash lsp" style="background-color: #FFFFFF; color: #000000"><div class="language-id">ts</div><div class='code-container'><code><div class='line'><span style="color: #0000FF">function</span><span style="color: #000000"> </span><span style="color: #795E26"><data-lsp lsp='function isString(input: unknown): input is string' >isString</data-lsp></span><span style="color: #000000">(</span><span style="color: #001080"><data-lsp lsp='(parameter) input: unknown' >input</data-lsp></span><span style="color: #000000">: </span><span style="color: #267F99">unknown</span><span style="color: #000000">): </span><span style="color: #001080"><data-lsp lsp='(parameter) input: unknown' >input</data-lsp></span><span style="color: #000000"> </span><span style="color: #0000FF">is</span><span style="color: #000000"> </span><span style="color: #267F99">string</span><span style="color: #000000"> {</span></div><div class='line'><span style="color: #000000">  </span><span style="color: #AF00DB">return</span><span style="color: #000000"> </span><span style="color: #0000FF">typeof</span><span style="color: #000000"> </span><span style="color: #001080"><data-lsp lsp='(parameter) input: unknown' >input</data-lsp></span><span style="color: #000000"> === </span><span style="color: #A31515">&apos;string&apos;</span><span style="color: #000000">;</span></div><div class='line'><span style="color: #000000">}</span></div><div class='line'><span style="color: #0000FF">function</span><span style="color: #000000"> </span><span style="color: #795E26"><data-lsp lsp='function parseInput&lt;T>(input: string | number): string | number' >parseInput</data-lsp></span><span style="color: #000000">&lt;</span><span style="color: #267F99"><data-lsp lsp='(type parameter) T in parseInput&lt;T>(input: string | number): string | number' >T</data-lsp></span><span style="color: #000000">&gt;(</span><span style="color: #001080"><data-lsp lsp='(parameter) input: string | number' >input</data-lsp></span><span style="color: #000000">: </span><span style="color: #267F99">string</span><span style="color: #000000"> | </span><span style="color: #267F99">number</span><span style="color: #000000">) {</span></div><div class='line'><span style="color: #000000">  </span><span style="color: #AF00DB">if</span><span style="color: #000000"> (</span><span style="color: #795E26"><data-lsp lsp='function isString(input: unknown): input is string' >isString</data-lsp></span><span style="color: #000000">(</span><span style="color: #001080"><data-lsp lsp='(parameter) input: string | number' >input</data-lsp></span><span style="color: #000000">)) {</span></div><div class='line'><span style="color: #000000">    </span><span style="color: #AF00DB">return</span><span style="color: #000000"> </span><span style="color: #001080"><data-lsp lsp='(parameter) input: string' >input</data-lsp></span><span style="color: #000000">.</span><span style="color: #795E26"><data-lsp lsp='(method) String.toUpperCase(): string' >toUpperCase</data-lsp></span><span style="color: #000000">();</span></div><div class='line'><span style="color: #000000">  } </span><span style="color: #AF00DB">else</span><span style="color: #000000"> {</span></div><div class='line'><span style="color: #000000">    </span><span style="color: #AF00DB">return</span><span style="color: #000000"> </span><span style="color: #001080"><data-lsp lsp='(parameter) input: number' >input</data-lsp></span><span style="color: #000000">;</span></div><div class='line'><span style="color: #000000">  }</span></div><div class='line'><span style="color: #000000">}</span></div><div class='line'><span style="color: #008000">// 我自己还有一个问题是，怎么才能推导出 parseInput 返回的类型呢？</span></div><div class='line'><span style="color: #0000FF">const</span><span style="color: #000000"> </span><span style="color: #0070C1"><data-lsp lsp='const resParse: string | number' >resParse</data-lsp></span><span style="color: #000000"> = </span><span style="color: #795E26"><data-lsp lsp='function parseInput&lt;unknown>(input: string | number): string | number' >parseInput</data-lsp></span><span style="color: #000000">(</span><span style="color: #098658">1</span><span style="color: #000000">); </span><span style="color: #008000">// string | number</span></div></code></div></pre>
<p>条件类型，形如 <code>T extends string ? true : false</code>。可以认为是类型层面的三元表达式</p>
<p>条件类型遵从分配律，也可以说具有分配性质，即： <code>(string | number) extends T ? A : B</code> 等价于 <code>(string extends T) ? A : B | (number extends T) ? A : B</code></p>
<p>根据分配性质，下面的 <code>ToArray</code> 类型可以对并集类型的数组进行分配：</p>
<pre class="shiki light-plus twoslash lsp" style="background-color: #FFFFFF; color: #000000"><div class="language-id">ts</div><div class='code-container'><code><div class='line'><span style="color: #0000FF">type</span><span style="color: #000000"> </span><span style="color: #267F99"><data-lsp lsp='type ToArray&lt;T> = T extends unknown ? T[] : T[]' >ToArray</data-lsp></span><span style="color: #000000">&lt;</span><span style="color: #267F99"><data-lsp lsp='(type parameter) T in type ToArray&lt;T>' >T</data-lsp></span><span style="color: #000000">&gt; = </span><span style="color: #267F99"><data-lsp lsp='(type parameter) T in type ToArray&lt;T>' >T</data-lsp></span><span style="color: #000000"> </span><span style="color: #0000FF">extends</span><span style="color: #000000"> </span><span style="color: #267F99">unknown</span><span style="color: #000000"> ? </span><span style="color: #267F99"><data-lsp lsp='(type parameter) T in type ToArray&lt;T>' >T</data-lsp></span><span style="color: #000000">[] : </span><span style="color: #267F99"><data-lsp lsp='(type parameter) T in type ToArray&lt;T>' >T</data-lsp></span><span style="color: #000000">[];</span></div><div class='line'><span style="color: #0000FF">type</span><span style="color: #000000"> </span><span style="color: #267F99"><data-lsp lsp='type A = number[]' >A</data-lsp></span><span style="color: #000000"> = </span><span style="color: #267F99"><data-lsp lsp='type ToArray&lt;T> = T extends unknown ? T[] : T[]' >ToArray</data-lsp></span><span style="color: #000000">&lt;</span><span style="color: #267F99">number</span><span style="color: #000000">&gt;;</span></div><div class='line'><span style="color: #0000FF">type</span><span style="color: #000000"> </span><span style="color: #267F99"><data-lsp lsp='type B = number[] | string[] | false[] | true[]' >B</data-lsp></span><span style="color: #000000"> = </span><span style="color: #267F99"><data-lsp lsp='type ToArray&lt;T> = T extends unknown ? T[] : T[]' >ToArray</data-lsp></span><span style="color: #000000">&lt;</span><span style="color: #267F99">number</span><span style="color: #000000"> | </span><span style="color: #267F99">string</span><span style="color: #000000"> | </span><span style="color: #267F99">boolean</span><span style="color: #000000">&gt;;</span></div></code></div></pre>
<p>利用分配性质，也可以用于实现一个 <code>Without</code> 类型，<code>Without&#x3C;T, U></code> 即为 <code>T</code> 中不含 <code>U</code> 类型的类型。</p>
<pre class="shiki light-plus twoslash lsp" style="background-color: #FFFFFF; color: #000000"><div class="language-id">ts</div><div class='code-container'><code><div class='line'><span style="color: #0000FF">type</span><span style="color: #000000"> </span><span style="color: #267F99"><data-lsp lsp='type Without&lt;T, U> = T extends U ? never : T' >Without</data-lsp></span><span style="color: #000000">&lt;</span><span style="color: #267F99"><data-lsp lsp='(type parameter) T in type Without&lt;T, U>' >T</data-lsp></span><span style="color: #000000">, </span><span style="color: #267F99"><data-lsp lsp='(type parameter) U in type Without&lt;T, U>' >U</data-lsp></span><span style="color: #000000">&gt; = </span><span style="color: #267F99"><data-lsp lsp='(type parameter) T in type Without&lt;T, U>' >T</data-lsp></span><span style="color: #000000"> </span><span style="color: #0000FF">extends</span><span style="color: #000000"> </span><span style="color: #267F99"><data-lsp lsp='(type parameter) U in type Without&lt;T, U>' >U</data-lsp></span><span style="color: #000000"> ? </span><span style="color: #267F99">never</span><span style="color: #000000"> : </span><span style="color: #267F99"><data-lsp lsp='(type parameter) T in type Without&lt;T, U>' >T</data-lsp></span><span style="color: #000000">;</span></div><div class='line'><span style="color: #0000FF">type</span><span style="color: #000000"> </span><span style="color: #267F99"><data-lsp lsp='type NoAB = "b" | "c"' >NoAB</data-lsp></span><span style="color: #000000"> = </span><span style="color: #267F99"><data-lsp lsp='type Without&lt;T, U> = T extends U ? never : T' >Without</data-lsp></span><span style="color: #000000">&lt;</span><span style="color: #A31515">&apos;a&apos;</span><span style="color: #000000"> | </span><span style="color: #A31515">&apos;b&apos;</span><span style="color: #000000"> | </span><span style="color: #A31515">&apos;c&apos;</span><span style="color: #000000">, </span><span style="color: #A31515">&apos;a&apos;</span><span style="color: #000000">&gt;; </span><span style="color: #008000">// &apos;b&apos; | &apos;c&apos;</span></div></code></div></pre>
<p>上面的 NoAB 的运算过程：</p>
<pre class="shiki light-plus" style="background-color: #FFFFFF; color: #000000"><div class="language-id">ts</div><div class='code-container'><code><div class='line'><span style="color: #0000FF">type</span><span style="color: #000000"> </span><span style="color: #267F99">NoAB</span><span style="color: #000000"> = </span><span style="color: #267F99">Without</span><span style="color: #000000">&lt;</span><span style="color: #A31515">'a'</span><span style="color: #000000"> | </span><span style="color: #A31515">'b'</span><span style="color: #000000"> | </span><span style="color: #A31515">'c'</span><span style="color: #000000">, </span><span style="color: #A31515">'a'</span><span style="color: #000000">&gt;; </span><span style="color: #008000">// 'b' | 'c'</span></div><div class='line'><span style="color: #000000">          = </span><span style="color: #001080">Without</span><span style="color: #000000">&lt;</span><span style="color: #A31515">'a'</span><span style="color: #000000">, </span><span style="color: #A31515">'a'</span><span style="color: #000000">&gt; | </span><span style="color: #001080">Without</span><span style="color: #000000">&lt;</span><span style="color: #A31515">'b'</span><span style="color: #000000">, </span><span style="color: #A31515">'a'</span><span style="color: #000000">&gt; | </span><span style="color: #001080">Without</span><span style="color: #000000">&lt;</span><span style="color: #A31515">'c'</span><span style="color: #000000">, </span><span style="color: #A31515">'a'</span><span style="color: #000000">&gt;;</span></div><div class='line'><span style="color: #000000">          = </span><span style="color: #001080">never</span><span style="color: #000000"> | </span><span style="color: #A31515">'b'</span><span style="color: #000000"> | </span><span style="color: #A31515">'c'</span></div><div class='line'><span style="color: #000000">          = </span><span style="color: #A31515">'b'</span><span style="color: #000000"> | </span><span style="color: #A31515">'c'</span></div></code></div></pre>
<p>P177 中说如果没有分配类型，上面的 <code>NoAB</code> 类型就会是 <code>never</code> 了。但是我自己感觉不应该还是 <code>'a' | 'b' | 'c'</code> 吗？因为 <code>'a' | 'b' | 'c'</code> 整体是不能赋值给 <code>'a'</code> 的，所以返回的是三元表达式的右分支。</p>
<p>下面的 <code>ElementType</code> 可以用于提取数组元素的类型：</p>
<pre class="shiki light-plus twoslash lsp" style="background-color: #FFFFFF; color: #000000"><div class="language-id">ts</div><div class='code-container'><code><div class='line'><span style="color: #0000FF">type</span><span style="color: #000000"> </span><span style="color: #267F99"><data-lsp lsp='type ElementType&lt;T> = T extends unknown[] ? T[number] : T' >ElementType</data-lsp></span><span style="color: #000000">&lt;</span><span style="color: #267F99"><data-lsp lsp='(type parameter) T in type ElementType&lt;T>' >T</data-lsp></span><span style="color: #000000">&gt; = </span><span style="color: #267F99"><data-lsp lsp='(type parameter) T in type ElementType&lt;T>' >T</data-lsp></span><span style="color: #000000"> </span><span style="color: #0000FF">extends</span><span style="color: #000000"> </span><span style="color: #267F99">unknown</span><span style="color: #000000">[] ? </span><span style="color: #267F99"><data-lsp lsp='(type parameter) T in type ElementType&lt;T>' >T</data-lsp></span><span style="color: #000000">[</span><span style="color: #267F99">number</span><span style="color: #000000">] : </span><span style="color: #267F99"><data-lsp lsp='(type parameter) T in type ElementType&lt;T>' >T</data-lsp></span><span style="color: #000000">;</span></div><div class='line'><span style="color: #0000FF">type</span><span style="color: #000000"> </span><span style="color: #267F99"><data-lsp lsp='type E = number' >E</data-lsp></span><span style="color: #000000"> = </span><span style="color: #267F99"><data-lsp lsp='type ElementType&lt;T> = T extends unknown[] ? T[number] : T' >ElementType</data-lsp></span><span style="color: #000000">&lt;</span><span style="color: #267F99">number</span><span style="color: #000000">[]&gt;;</span></div></code></div></pre>
<p><code>[number]</code> 可以用来提取数组的元素类型，因为数组在这里和对象是一样的结构。</p>
<pre class="shiki light-plus twoslash lsp" style="background-color: #FFFFFF; color: #000000"><div class="language-id">ts</div><div class='code-container'><code><div class='line'><span style="color: #0000FF">type</span><span style="color: #000000"> </span><span style="color: #267F99"><data-lsp lsp='type Bool = boolean' >Bool</data-lsp></span><span style="color: #000000"> = </span><span style="color: #267F99">boolean</span><span style="color: #000000">[][</span><span style="color: #267F99">number</span><span style="color: #000000">];</span></div></code></div></pre>
<p>除了可以在尖括号里声明泛型变量（如 <code>&#x3C;T></code>），也可以在条件类型中使用 <code>infer</code> 关键字声明。</p>
<p>上文中的 <code>ElementType</code> 类型可以使用 <code>infer</code> 关键字重写：</p>
<pre class="shiki light-plus twoslash lsp" style="background-color: #FFFFFF; color: #000000"><div class="language-id">ts</div><div class='code-container'><code><div class='line'><span style="color: #0000FF">type</span><span style="color: #000000"> </span><span style="color: #267F99"><data-lsp lsp='type ElementType2&lt;T> = T extends (infer U)[] ? U : T' >ElementType2</data-lsp></span><span style="color: #000000">&lt;</span><span style="color: #267F99"><data-lsp lsp='(type parameter) T in type ElementType2&lt;T>' >T</data-lsp></span><span style="color: #000000">&gt; = </span><span style="color: #267F99"><data-lsp lsp='(type parameter) T in type ElementType2&lt;T>' >T</data-lsp></span><span style="color: #000000"> </span><span style="color: #0000FF">extends</span><span style="color: #000000"> (</span><span style="color: #0000FF">infer</span><span style="color: #000000"> </span><span style="color: #267F99"><data-lsp lsp='(type parameter) U' >U</data-lsp></span><span style="color: #000000">)[] ? </span><span style="color: #267F99"><data-lsp lsp='(type parameter) U' >U</data-lsp></span><span style="color: #000000"> : </span><span style="color: #267F99"><data-lsp lsp='(type parameter) T in type ElementType2&lt;T>' >T</data-lsp></span><span style="color: #000000">;</span></div><div class='line'><span style="color: #0000FF">type</span><span style="color: #000000"> </span><span style="color: #267F99"><data-lsp lsp='type E2 = boolean' >E2</data-lsp></span><span style="color: #000000"> = </span><span style="color: #267F99"><data-lsp lsp='type ElementType2&lt;T> = T extends (infer U)[] ? U : T' >ElementType2</data-lsp></span><span style="color: #000000">&lt;</span><span style="color: #267F99">boolean</span><span style="color: #000000">[]&gt;;</span></div></code></div></pre>
<p>可以看出，<code>infer</code> 的作用是条件类型中类型推导的结果。</p>
<p>另一个例子：</p>
<pre class="shiki light-plus twoslash lsp" style="background-color: #FFFFFF; color: #000000"><div class="language-id">ts</div><div class='code-container'><code><div class='line'><span style="color: #0000FF">type</span><span style="color: #000000"> </span><span style="color: #267F99"><data-lsp lsp='type SecondArg&lt;F> = F extends (a: any, b: infer B) => any ? B : never' >SecondArg</data-lsp></span><span style="color: #000000">&lt;</span><span style="color: #267F99"><data-lsp lsp='(type parameter) F in type SecondArg&lt;F>' >F</data-lsp></span><span style="color: #000000">&gt; = </span><span style="color: #267F99"><data-lsp lsp='(type parameter) F in type SecondArg&lt;F>' >F</data-lsp></span><span style="color: #000000"> </span><span style="color: #0000FF">extends</span><span style="color: #000000"> (</span><span style="color: #001080"><data-lsp lsp='(parameter) a: any' >a</data-lsp></span><span style="color: #000000">: </span><span style="color: #267F99">any</span><span style="color: #000000">, </span><span style="color: #001080"><data-lsp lsp='(parameter) b: B' >b</data-lsp></span><span style="color: #000000">: </span><span style="color: #0000FF">infer</span><span style="color: #000000"> </span><span style="color: #267F99"><data-lsp lsp='(type parameter) B' >B</data-lsp></span><span style="color: #000000">) </span><span style="color: #0000FF">=&gt;</span><span style="color: #000000"> </span><span style="color: #267F99">any</span><span style="color: #000000"> ? </span><span style="color: #267F99"><data-lsp lsp='(type parameter) B' >B</data-lsp></span><span style="color: #000000"> : </span><span style="color: #267F99">never</span><span style="color: #000000">;</span></div><div class='line'><span style="color: #0000FF">type</span><span style="color: #000000"> </span><span style="color: #267F99"><data-lsp lsp='type F = (start?: number | undefined, end?: number | undefined) => any[]' >F</data-lsp></span><span style="color: #000000"> = </span><span style="color: #0000FF">typeof</span><span style="color: #000000"> </span><span style="color: #267F99"><data-lsp lsp='var Array: ArrayConstructor' >Array</data-lsp></span><span style="color: #000000">[</span><span style="color: #A31515">&apos;prototype&apos;</span><span style="color: #000000">][</span><span style="color: #A31515">&apos;slice&apos;</span><span style="color: #000000">];</span></div><div class='line'><span style="color: #008000">// 得到了 Array.prototype.slice 的第二个参数类型</span></div><div class='line'><span style="color: #0000FF">type</span><span style="color: #000000"> </span><span style="color: #267F99"><data-lsp lsp='type Arg2 = number | undefined' >Arg2</data-lsp></span><span style="color: #000000"> = </span><span style="color: #267F99"><data-lsp lsp='type SecondArg&lt;F> = F extends (a: any, b: infer B) => any ? B : never' >SecondArg</data-lsp></span><span style="color: #000000">&lt;</span><span style="color: #267F99"><data-lsp lsp='type F = (start?: number | undefined, end?: number | undefined) => any[]' >F</data-lsp></span><span style="color: #000000">&gt;;</span></div></code></div></pre>
<p>内置的条件类型（记得学习一下实现，都不难）：</p>
<ul>
<li>
<p><code>Exclude&#x3C;T, U></code>：计算在 <code>T</code> 中而不在 <code>U</code> 中的类型</p>
<pre class="shiki light-plus twoslash lsp" style="background-color: #FFFFFF; color: #000000"><div class="language-id">ts</div><div class='code-container'><code><div class='line'><span style="color: #0000FF">type</span><span style="color: #000000"> </span><span style="color: #267F99"><data-lsp lsp='type EXC = boolean' >EXC</data-lsp></span><span style="color: #000000"> = </span><span style="color: #267F99"><data-lsp lsp='type Exclude&lt;T, U> = T extends U ? never : T' >Exclude</data-lsp></span><span style="color: #000000">&lt;</span><span style="color: #267F99">boolean</span><span style="color: #000000"> | </span><span style="color: #267F99">number</span><span style="color: #000000">, </span><span style="color: #267F99">number</span><span style="color: #000000">&gt;;</span></div></code></div></pre>
</li>
<li>
<p><code>Extract&#x3C;T, U></code>：计算在 <code>T</code> 可以赋值给 <code>U</code> 的类型，具体实现就是和 <code>Exclude</code> 的条件分支反过来</p>
<pre class="shiki light-plus twoslash lsp" style="background-color: #FFFFFF; color: #000000"><div class="language-id">ts</div><div class='code-container'><code><div class='line'><span style="color: #0000FF">type</span><span style="color: #000000"> </span><span style="color: #267F99"><data-lsp lsp='type EXT = string | number' >EXT</data-lsp></span><span style="color: #000000"> = </span><span style="color: #267F99"><data-lsp lsp='type Extract&lt;T, U> = T extends U ? T : never' >Extract</data-lsp></span><span style="color: #000000">&lt;</span><span style="color: #267F99">boolean</span><span style="color: #000000"> | </span><span style="color: #267F99">number</span><span style="color: #000000"> | </span><span style="color: #267F99">string</span><span style="color: #000000">, </span><span style="color: #267F99">string</span><span style="color: #000000"> | </span><span style="color: #267F99">number</span><span style="color: #000000">&gt;;</span></div></code></div></pre>
</li>
<li>
<p><code>NonNullable&#x3C;T></code>：从 <code>T</code> 中去除 <code>null</code> 和 <code>undefined</code>，<code>undefined extends null</code> 是成立的。实现就是用的 <code>extends null</code> 条件类型。</p>
<pre class="shiki light-plus twoslash lsp" style="background-color: #FFFFFF; color: #000000"><div class="language-id">ts</div><div class='code-container'><code><div class='line'><span style="color: #0000FF">type</span><span style="color: #000000"> </span><span style="color: #267F99"><data-lsp lsp='type NON = string | number' >NON</data-lsp></span><span style="color: #000000"> = </span><span style="color: #267F99"><data-lsp lsp='type NonNullable&lt;T> = T extends null | undefined ? never : T' >NonNullable</data-lsp></span><span style="color: #000000">&lt;</span><span style="color: #267F99">string</span><span style="color: #000000"> | </span><span style="color: #267F99">null</span><span style="color: #000000"> | </span><span style="color: #267F99">number</span><span style="color: #000000"> | </span><span style="color: #267F99">undefined</span><span style="color: #000000">&gt;;</span></div></code></div></pre>
</li>
<li>
<p><code>ReturnType&#x3C;T></code>：获取函数返回值类型（对泛型和重载的函数无效）</p>
<pre class="shiki light-plus twoslash lsp" style="background-color: #FFFFFF; color: #000000"><div class="language-id">ts</div><div class='code-container'><code><div class='line'><span style="color: #0000FF">type</span><span style="color: #000000"> </span><span style="color: #267F99"><data-lsp lsp='type RET = string' >RET</data-lsp></span><span style="color: #000000"> = </span><span style="color: #267F99"><data-lsp lsp='type ReturnType&lt;T extends (...args: any) => any> = T extends (...args: any) => infer R ? R : any' >ReturnType</data-lsp></span><span style="color: #000000">&lt;() </span><span style="color: #0000FF">=&gt;</span><span style="color: #000000"> </span><span style="color: #267F99">string</span><span style="color: #000000">&gt;;</span></div></code></div></pre>
</li>
<li>
<p><code>InstanceType&#x3C;T></code>：获取构造函数的实例类型，其实就是获取构造函数的返回值类型，使用 abstract new 做函数类型前缀判断是不是构造函数（看起来是这样）</p>
<pre class="shiki light-plus twoslash lsp" style="background-color: #FFFFFF; color: #000000"><div class="language-id">ts</div><div class='code-container'><code><div class='line'><span style="color: #008000">// type InstanceType&lt;T extends abstract new (...args: any) =&gt; any&gt; = T extends abstract new (...args: any) =&gt; infer R ? R : any</span></div><div class='line'><span style="color: #0000FF">type</span><span style="color: #000000"> </span><span style="color: #267F99"><data-lsp lsp='type INST_ARR = unknown[]' >INST_ARR</data-lsp></span><span style="color: #000000"> = </span><span style="color: #267F99"><data-lsp lsp='type InstanceType&lt;T extends abstract new (...args: any) => any> = T extends abstract new (...args: any) => infer R ? R : any' >InstanceType</data-lsp></span><span style="color: #000000">&lt;</span><span style="color: #0000FF">typeof</span><span style="color: #000000"> </span><span style="color: #267F99"><data-lsp lsp='var Array: ArrayConstructor' >Array</data-lsp></span><span style="color: #000000">&gt;;</span></div><div class='line'><span style="color: #0000FF">type</span><span style="color: #000000"> </span><span style="color: #267F99"><data-lsp lsp='type INST_DATE = Date' >INST_DATE</data-lsp></span><span style="color: #000000"> = </span><span style="color: #267F99"><data-lsp lsp='type InstanceType&lt;T extends abstract new (...args: any) => any> = T extends abstract new (...args: any) => infer R ? R : any' >InstanceType</data-lsp></span><span style="color: #000000">&lt;</span><span style="color: #0000FF">typeof</span><span style="color: #000000"> </span><span style="color: #267F99"><data-lsp lsp='var Date: DateConstructor' >Date</data-lsp></span><span style="color: #000000">&gt;;</span></div></code></div></pre>
</li>
</ul>
<p>类型断言的两种方式：</p>
<ol>
<li><code>as</code></li>
<li><T> 前缀，比如有时候会遇到这样的写法：<code>const canvas = &#x3C;HTMLCanvasElement> document.getElementById('#canvas');</code></li>
</ol>
<p>尖括号前缀是旧语法，推荐使用 <code>as</code> 操作符。</p>
<p>非空断言：<code>Something!</code> 表示确定 <code>Something</code> 是非空的。
明确赋值断言：<code>let userId!: string;</code> 表示确定 <code>userId</code> 在使用时是已经被赋值的。</p>
<p>TypeScript 类型的不支持名义类型，即如果有两个类型声明 <code>type UserId = string</code>、<code>type CompanyId = string</code>，那么 <code>function get(id: UserId)</code> 也是能接受 <code>CompanyId</code> 类型的参数的。</p>
<p>一种解决的方式，名为类型烙印（type branding），即使用如下的类型声明：</p>
<pre class="shiki light-plus twoslash lsp" style="background-color: #FFFFFF; color: #000000"><div class="language-id">ts</div><div class='code-container'><code><div class='line'><span style="color: #0000FF">type</span><span style="color: #000000"> </span><span style="color: #267F99"><data-lsp lsp='type UserId = string &amp; {&#10;    readonly brand: unique symbol;&#10;}' >UserId</data-lsp></span><span style="color: #000000"> = </span><span style="color: #267F99">string</span><span style="color: #000000"> & { </span><span style="color: #0000FF">readonly</span><span style="color: #000000"> </span><span style="color: #001080"><data-lsp lsp='(property) brand: unique symbol' >brand</data-lsp></span><span style="color: #000000">: </span><span style="color: #267F99">unique</span><span style="color: #000000"> </span><span style="color: #267F99">symbol</span><span style="color: #000000"> };</span></div><div class='line'><span style="color: #0000FF">type</span><span style="color: #000000"> </span><span style="color: #267F99"><data-lsp lsp='type CompanyId = string &amp; {&#10;    readonly brand: unique symbol;&#10;}' >CompanyId</data-lsp></span><span style="color: #000000"> = </span><span style="color: #267F99">string</span><span style="color: #000000"> & { </span><span style="color: #0000FF">readonly</span><span style="color: #000000"> </span><span style="color: #001080"><data-lsp lsp='(property) brand: unique symbol' >brand</data-lsp></span><span style="color: #000000">: </span><span style="color: #267F99">unique</span><span style="color: #000000"> </span><span style="color: #267F99">symbol</span><span style="color: #000000"> };</span></div><div class='line'><span style="color: #0000FF">function</span><span style="color: #000000"> </span><span style="color: #795E26"><data-lsp lsp='function UserId(id: string): UserId' >UserId</data-lsp></span><span style="color: #000000">(</span><span style="color: #001080"><data-lsp lsp='(parameter) id: string' >id</data-lsp></span><span style="color: #000000">: </span><span style="color: #267F99">string</span><span style="color: #000000">) {</span></div><div class='line'><span style="color: #000000">  </span><span style="color: #AF00DB">return</span><span style="color: #000000"> </span><span style="color: #001080"><data-lsp lsp='(parameter) id: string' >id</data-lsp></span><span style="color: #000000"> </span><span style="color: #AF00DB">as</span><span style="color: #000000"> </span><span style="color: #267F99"><data-lsp lsp='type UserId = string &amp; {&#10;    readonly brand: unique symbol;&#10;}' >UserId</data-lsp></span><span style="color: #000000">;</span></div><div class='line'><span style="color: #000000">}</span></div><div class='line'><span style="color: #0000FF">function</span><span style="color: #000000"> </span><span style="color: #795E26"><data-lsp lsp='function CompanyId(id: string): CompanyId' >CompanyId</data-lsp></span><span style="color: #000000">(</span><span style="color: #001080"><data-lsp lsp='(parameter) id: string' >id</data-lsp></span><span style="color: #000000">: </span><span style="color: #267F99">string</span><span style="color: #000000">) {</span></div><div class='line'><span style="color: #000000">  </span><span style="color: #AF00DB">return</span><span style="color: #000000"> </span><span style="color: #001080"><data-lsp lsp='(parameter) id: string' >id</data-lsp></span><span style="color: #000000"> </span><span style="color: #AF00DB">as</span><span style="color: #000000"> </span><span style="color: #267F99"><data-lsp lsp='type CompanyId = string &amp; {&#10;    readonly brand: unique symbol;&#10;}' >CompanyId</data-lsp></span><span style="color: #000000">;</span></div><div class='line'><span style="color: #000000">}</span></div><div class='line'><span style="color: #0000FF">function</span><span style="color: #000000"> </span><span style="color: #795E26"><data-lsp lsp='function getUserInfo(id: UserId): void' >getUserInfo</data-lsp></span><span style="color: #000000">(</span><span style="color: #001080"><data-lsp lsp='(parameter) id: UserId' >id</data-lsp></span><span style="color: #000000">: </span><span style="color: #267F99"><data-lsp lsp='type UserId = string &amp; {&#10;    readonly brand: unique symbol;&#10;}' >UserId</data-lsp></span><span style="color: #000000">) {}</span></div><div class='line'><span style="color: #795E26"><data-lsp lsp='function getUserInfo(id: UserId): void' >getUserInfo</data-lsp></span><span style="color: #000000">(</span><span style="color: #795E26"><data-lsp lsp='function UserId(id: string): UserId' >UserId</data-lsp></span><span style="color: #000000">(</span><span style="color: #A31515">&apos;123&apos;</span><span style="color: #000000">));</span></div><div class='line'><span style="color: #795E26"><data-lsp lsp='function getUserInfo(id: UserId): void' >getUserInfo</data-lsp></span><span style="color: #000000">(</span><span style="color: #795E26"><data-lsp lsp='function CompanyId(id: string): CompanyId' >CompanyId</data-lsp></span><span style="color: #000000">(</span><span style="color: #A31515">&apos;123&apos;</span><span style="color: #000000">));</span></div><span class="error"><span>Argument of type 'CompanyId' is not assignable to parameter of type 'UserId'.
  Type 'CompanyId' is not assignable to type '{ readonly brand: unique symbol; }'.
    Types of property 'brand' are incompatible.
      Type 'typeof brand' is not assignable to type 'typeof brand'. Two different types with this name exist, but they are unrelated.</span><span class="code">2345</span></span><span class="error-behind">Argument of type 'CompanyId' is not assignable to parameter of type 'UserId'.
  Type 'CompanyId' is not assignable to type '{ readonly brand: unique symbol; }'.
    Types of property 'brand' are incompatible.
      Type 'typeof brand' is not assignable to type 'typeof brand'. Two different types with this name exist, but they are unrelated.</span></code></div></pre>
<p>使用 TypeScript 接口合并的特性可以扩展现有的接口，如为 Array 的原型添加新的方法。</p>
<pre class="shiki light-plus twoslash lsp" style="background-color: #FFFFFF; color: #000000"><div class="language-id">ts</div><div class='code-container'><code><div class='line'><span style="color: #0000FF">interface</span><span style="color: #000000"> </span><span style="color: #267F99"><data-lsp lsp='interface Array&lt;T>' >Array</data-lsp></span><span style="color: #000000">&lt;</span><span style="color: #267F99"><data-lsp lsp='(type parameter) T in Array&lt;T>' >T</data-lsp></span><span style="color: #000000">&gt; {</span></div><div class='line'><span style="color: #000000">  </span><span style="color: #795E26"><data-lsp lsp='(method) Array&lt;T>.zip&lt;U>(list: U[]): [T, U][]' >zip</data-lsp></span><span style="color: #000000">&lt;</span><span style="color: #267F99"><data-lsp lsp='(type parameter) U in Array&lt;T>.zip&lt;U>(list: U[]): [T, U][]' >U</data-lsp></span><span style="color: #000000">&gt;(</span><span style="color: #001080"><data-lsp lsp='(parameter) list: U[]' >list</data-lsp></span><span style="color: #000000">: </span><span style="color: #267F99"><data-lsp lsp='(type parameter) U in Array&lt;T>.zip&lt;U>(list: U[]): [T, U][]' >U</data-lsp></span><span style="color: #000000">[]): [</span><span style="color: #267F99"><data-lsp lsp='(type parameter) T in Array&lt;T>' >T</data-lsp></span><span style="color: #000000">, </span><span style="color: #267F99"><data-lsp lsp='(type parameter) U in Array&lt;T>.zip&lt;U>(list: U[]): [T, U][]' >U</data-lsp></span><span style="color: #000000">][];</span></div><div class='line'><span style="color: #000000">}</span></div><div class='line'>&nbsp;</div><div class='line'><span style="color: #000000">[</span><span style="color: #098658">1</span><span style="color: #000000">].</span><span style="color: #795E26"><data-lsp lsp='(method) Array&lt;number>.zip&lt;boolean>(list: boolean[]): [number, boolean][]' >zip</data-lsp></span><span style="color: #000000">&lt;</span><span style="color: #267F99">boolean</span><span style="color: #000000">&gt;([</span><span style="color: #0000FF">true</span><span style="color: #000000">]);</span></div></code></div></pre>
<p>在 tsconfig 文件中使用 <code>exclude</code> 将定义文件排除在外，这样就可以要求在开发过程中必须先 <code>import</code> 才能使用定义。（P189）</p>
<p><strong>Exercise 3</strong>：计算不同时在 <code>T</code> 和 <code>U</code> 中的类型：</p>
<pre class="shiki light-plus twoslash lsp" style="background-color: #FFFFFF; color: #000000"><div class="language-id">ts</div><div class='code-container'><code><div class='line'><span style="color: #0000FF">type</span><span style="color: #000000"> </span><span style="color: #267F99"><data-lsp lsp='type Exclusive&lt;T, U> = (T extends U ? never : T) | (U extends T ? never : U)' >Exclusive</data-lsp></span><span style="color: #000000">&lt;</span><span style="color: #267F99"><data-lsp lsp='(type parameter) T in type Exclusive&lt;T, U>' >T</data-lsp></span><span style="color: #000000">, </span><span style="color: #267F99"><data-lsp lsp='(type parameter) U in type Exclusive&lt;T, U>' >U</data-lsp></span><span style="color: #000000">&gt; = (</span><span style="color: #267F99"><data-lsp lsp='(type parameter) T in type Exclusive&lt;T, U>' >T</data-lsp></span><span style="color: #000000"> </span><span style="color: #0000FF">extends</span><span style="color: #000000"> </span><span style="color: #267F99"><data-lsp lsp='(type parameter) U in type Exclusive&lt;T, U>' >U</data-lsp></span><span style="color: #000000"> ? </span><span style="color: #267F99">never</span><span style="color: #000000"> : </span><span style="color: #267F99"><data-lsp lsp='(type parameter) T in type Exclusive&lt;T, U>' >T</data-lsp></span><span style="color: #000000">) | (</span><span style="color: #267F99"><data-lsp lsp='(type parameter) U in type Exclusive&lt;T, U>' >U</data-lsp></span><span style="color: #000000"> </span><span style="color: #0000FF">extends</span><span style="color: #000000"> </span><span style="color: #267F99"><data-lsp lsp='(type parameter) T in type Exclusive&lt;T, U>' >T</data-lsp></span><span style="color: #000000"> ? </span><span style="color: #267F99">never</span><span style="color: #000000"> : </span><span style="color: #267F99"><data-lsp lsp='(type parameter) U in type Exclusive&lt;T, U>' >U</data-lsp></span><span style="color: #000000">);</span></div><div class='line'><span style="color: #0000FF">type</span><span style="color: #000000"> </span><span style="color: #267F99"><data-lsp lsp='type ExclusiveNumber = 1 | 4' >ExclusiveNumber</data-lsp></span><span style="color: #000000"> = </span><span style="color: #267F99"><data-lsp lsp='type Exclusive&lt;T, U> = (T extends U ? never : T) | (U extends T ? never : U)' >Exclusive</data-lsp></span><span style="color: #000000">&lt;</span><span style="color: #098658">1</span><span style="color: #000000"> | </span><span style="color: #098658">2</span><span style="color: #000000"> | </span><span style="color: #098658">3</span><span style="color: #000000">, </span><span style="color: #098658">2</span><span style="color: #000000"> | </span><span style="color: #098658">3</span><span style="color: #000000"> | </span><span style="color: #098658">4</span><span style="color: #000000">&gt;;</span></div><div class='line'>&nbsp;</div><div class='line'><span style="color: #008000">// 下面是更好的写法：</span></div><div class='line'><span style="color: #0000FF">type</span><span style="color: #000000"> </span><span style="color: #267F99"><data-lsp lsp='type Exclusive2&lt;T, U> = Exclude&lt;T, U> | Exclude&lt;U, T>' >Exclusive2</data-lsp></span><span style="color: #000000">&lt;</span><span style="color: #267F99"><data-lsp lsp='(type parameter) T in type Exclusive2&lt;T, U>' >T</data-lsp></span><span style="color: #000000">, </span><span style="color: #267F99"><data-lsp lsp='(type parameter) U in type Exclusive2&lt;T, U>' >U</data-lsp></span><span style="color: #000000">&gt; = </span><span style="color: #267F99"><data-lsp lsp='type Exclude&lt;T, U> = T extends U ? never : T' >Exclude</data-lsp></span><span style="color: #000000">&lt;</span><span style="color: #267F99"><data-lsp lsp='(type parameter) T in type Exclusive2&lt;T, U>' >T</data-lsp></span><span style="color: #000000">, </span><span style="color: #267F99"><data-lsp lsp='(type parameter) U in type Exclusive2&lt;T, U>' >U</data-lsp></span><span style="color: #000000">&gt; | </span><span style="color: #267F99"><data-lsp lsp='type Exclude&lt;T, U> = T extends U ? never : T' >Exclude</data-lsp></span><span style="color: #000000">&lt;</span><span style="color: #267F99"><data-lsp lsp='(type parameter) U in type Exclusive2&lt;T, U>' >U</data-lsp></span><span style="color: #000000">, </span><span style="color: #267F99"><data-lsp lsp='(type parameter) T in type Exclusive2&lt;T, U>' >T</data-lsp></span><span style="color: #000000">&gt;;</span></div></code></div></pre>
<p><strong>Exercise 4</strong>：将 6.6.3 中的示例改写成不用明确赋值断言（<em>Definite Assignment Assertions</em>）的形式</p>
<pre class="shiki light-plus" style="background-color: #FFFFFF; color: #000000"><div class="language-id">ts</div><div class='code-container'><code><div class='line'><span style="color: #008000">// 使用明确赋值断言</span></div><div class='line'><span style="color: #0000FF">let</span><span style="color: #000000"> </span><span style="color: #001080">userId</span><span style="color: #000000">!: </span><span style="color: #267F99">string</span><span style="color: #000000">;</span></div><div class='line'><span style="color: #795E26">fetchUser</span><span style="color: #000000">();</span></div><div class='line'><span style="color: #001080">userId</span><span style="color: #000000">.</span><span style="color: #795E26">toUpperCase</span><span style="color: #000000">();</span></div><div class='line'></div><div class='line'><span style="color: #0000FF">function</span><span style="color: #000000"> </span><span style="color: #795E26">fetchUser</span><span style="color: #000000">() {</span></div><div class='line'><span style="color: #000000">  </span><span style="color: #001080">userId</span><span style="color: #000000"> = </span><span style="color: #001080">localStorage</span><span style="color: #000000">.</span><span style="color: #795E26">getItem</span><span style="color: #000000">(</span><span style="color: #A31515">'userId'</span><span style="color: #000000">)!;</span></div><div class='line'><span style="color: #000000">}</span></div></code></div></pre>
<p>不用明确赋值断言的话，还是用 <code>fetchUser()</code> 的返回值赋值比较好：</p>
<pre class="shiki light-plus twoslash lsp" style="background-color: #FFFFFF; color: #000000"><div class="language-id">ts</div><div class='code-container'><code><div class='line'><span style="color: #0000FF">let</span><span style="color: #000000"> </span><span style="color: #001080"><data-lsp lsp='let userId: string' >userId</data-lsp></span><span style="color: #000000"> = </span><span style="color: #795E26"><data-lsp lsp='function fetchUser(): string' >fetchUser</data-lsp></span><span style="color: #000000">();</span></div><div class='line'><span style="color: #001080"><data-lsp lsp='let userId: string' >userId</data-lsp></span><span style="color: #000000">.</span><span style="color: #795E26"><data-lsp lsp='(method) String.toUpperCase(): string' >toUpperCase</data-lsp></span><span style="color: #000000">();</span></div><div class='line'>&nbsp;</div><div class='line'><span style="color: #0000FF">function</span><span style="color: #000000"> </span><span style="color: #795E26"><data-lsp lsp='function fetchUser(): string' >fetchUser</data-lsp></span><span style="color: #000000">() {</span></div><div class='line'><span style="color: #000000">  </span><span style="color: #AF00DB">return</span><span style="color: #000000"> </span><span style="color: #001080"><data-lsp lsp='var localStorage: Storage' >localStorage</data-lsp></span><span style="color: #000000">.</span><span style="color: #795E26"><data-lsp lsp='(method) Storage.getItem(key: string): string | null' >getItem</data-lsp></span><span style="color: #000000">(</span><span style="color: #A31515">&apos;userId&apos;</span><span style="color: #000000">)!;</span></div><div class='line'><span style="color: #000000">}</span></div></code></div></pre>`;
  return (
    <div
      className="markdown-body"
      dangerouslySetInnerHTML={{ __html: innerHTML }}
    />
  );
}

export function Intro() {
  const innerHTML = `<h1 style="margin-bottom: 30px">《TypeScript 编程》读书笔记</h1>
<p>GitHub: <a href="https://github.com/banqinghe/programming-typescript-note/">https://github.com/banqinghe/programming-typescript-note/</a></p>`;
  return (
    <div
      className="markdown-body"
      dangerouslySetInnerHTML={{ __html: innerHTML }}
    />
  );
}