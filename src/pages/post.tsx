
export function Chapter3AllTypes() {
  const innerHTML = `<h1>Chapter 3: 类型全解</h1>
<p><code>unknown</code> 表示任何值，但是当进行特定操作前 ts 会要求细化类型</p>
<ol>
<li>ts 不会把任何值推导为 <code>unknown</code>，需要显式指定</li>
<li><code>unknown</code> 类型变量可以比较</li>
</ol>
<pre class="shiki light-plus twoslash lsp" style="background-color: #FFFFFF; color: #000000"><div class="language-id">ts</div><div class='code-container'><code><div class='line'><span style="color: #0000FF">let</span><span style="color: #000000"> </span><span style="color: #001080"><data-lsp lsp='let a: unknown' >a</data-lsp></span><span style="color: #000000">: </span><span style="color: #267F99">unknown</span><span style="color: #000000">;</span></div><div class='line'><span style="color: #0000FF">let</span><span style="color: #000000"> </span><span style="color: #001080"><data-lsp lsp='let b: boolean' >b</data-lsp></span><span style="color: #000000"> = </span><span style="color: #001080"><data-lsp lsp='let a: unknown' >a</data-lsp></span><span style="color: #000000"> === </span><span style="color: #098658">123</span><span style="color: #000000">;</span></div><div class='line'><span style="color: #0000FF">let</span><span style="color: #000000"> </span><span style="color: #001080"><data-lsp lsp='let c: any' >c</data-lsp></span><span style="color: #000000"> = </span><span style="color: #001080"><data-err><data-lsp lsp='let a: unknown' >a</data-lsp></data-err></span><span style="color: #000000"> + </span><span style="color: #098658">10</span><span style="color: #000000">;</span></div><span class="error"><span>Object is of type 'unknown'.</span><span class="code">2571</span></span><span class="error-behind">Object is of type 'unknown'.</span><div class='line'><span style="color: #AF00DB">if</span><span style="color: #000000"> (</span><span style="color: #0000FF">typeof</span><span style="color: #000000"> </span><span style="color: #001080"><data-lsp lsp='let a: unknown' >a</data-lsp></span><span style="color: #000000"> === </span><span style="color: #A31515">"number"</span><span style="color: #000000">) {</span></div><div class='line'><span style="color: #000000">  </span><span style="color: #0000FF">let</span><span style="color: #000000"> </span><span style="color: #001080"><data-lsp lsp='let d: number' >d</data-lsp></span><span style="color: #000000"> = </span><span style="color: #001080"><data-lsp lsp='let a: number' >a</data-lsp></span><span style="color: #000000"> + </span><span style="color: #098658">10</span><span style="color: #000000">;</span></div><div class='line'><span style="color: #000000">}</span></div></code></div></pre>
<p>类型字面量：仅表示一个值的类型</p>
<pre class="shiki light-plus twoslash lsp" style="background-color: #FFFFFF; color: #000000"><div class="language-id">ts</div><div class='code-container'><code><div class='line'><span style="color: #0000FF">let</span><span style="color: #000000"> </span><span style="color: #001080"><data-lsp lsp='let real: true' >real</data-lsp></span><span style="color: #000000">: </span><span style="color: #267F99">true</span><span style="color: #000000"> = </span><span style="color: #0000FF">true</span><span style="color: #000000">;</span></div><div class='line'><span style="color: #0000FF">let</span><span style="color: #000000"> </span><span style="color: #001080"><data-lsp lsp='let exact: 1' >exact</data-lsp></span><span style="color: #000000">: </span><span style="color: #098658">1</span><span style="color: #000000"> = </span><span style="color: #098658">1</span><span style="color: #000000">;</span></div></code></div></pre>
<p><code>object</code> 类型表示一个非 <code>null</code> 的对象，但是对值得访问一无所知</p>
<pre class="shiki light-plus twoslash lsp" style="background-color: #FFFFFF; color: #000000"><div class="language-id">ts</div><div class='code-container'><code><div class='line'><span style="color: #0000FF">let</span><span style="color: #000000"> </span><span style="color: #001080"><data-lsp lsp='let message: object' >message</data-lsp></span><span style="color: #000000">: </span><span style="color: #267F99">object</span><span style="color: #000000"> = { </span><span style="color: #001080"><data-lsp lsp='(property) name: string' >name</data-lsp>:</span><span style="color: #000000"> </span><span style="color: #A31515">"hello"</span><span style="color: #000000"> };</span></div><div class='line'><span style="color: #001080"><data-lsp lsp='let message: object' >message</data-lsp></span><span style="color: #000000">.</span><span style="color: #001080"><data-err><data-lsp lsp='any' >name</data-lsp></data-err></span><span style="color: #000000">;</span></div><span class="error"><span>Property 'name' does not exist on type 'object'.</span><span class="code">2339</span></span><span class="error-behind">Property 'name' does not exist on type 'object'.</span></code></div></pre>
<p>class constructor 中的 <code>public</code> 是 <code>this.property = property</code> 的简写</p>
<pre class="shiki light-plus twoslash lsp" style="background-color: #FFFFFF; color: #000000"><div class="language-id">ts</div><div class='code-container'><code><div class='line'><span style="color: #0000FF">class</span><span style="color: #000000"> </span><span style="color: #267F99"><data-lsp lsp='class Person' >Person</data-lsp></span><span style="color: #000000"> {</span></div><div class='line'><span style="color: #000000">  </span><span style="color: #0000FF">constructor</span><span style="color: #000000">(</span><span style="color: #0000FF">public</span><span style="color: #000000"> </span><span style="color: #001080"><data-lsp lsp='(property) Person.name: string' >name</data-lsp></span><span style="color: #000000">: </span><span style="color: #267F99">string</span><span style="color: #000000">) {}</span></div><div class='line'><span style="color: #000000">  </span><span style="color: #008000">// 等价于：</span></div><div class='line'><span style="color: #000000">  </span><span style="color: #008000">// constructor(name: string) { this.name = name; }</span></div><div class='line'><span style="color: #000000">}</span></div></code></div></pre>
<p><code>{}</code> 和 <code>Object</code> 也可以用来声明对象类型，有细微差别，不推荐使用（P41）</p>
<p>类型别名使用块级作用域</p>
<pre class="shiki light-plus twoslash lsp" style="background-color: #FFFFFF; color: #000000"><div class="language-id">ts</div><div class='code-container'><code><div class='line'><span style="color: #0000FF">function</span><span style="color: #000000"> </span><span style="color: #795E26"><data-lsp lsp='function test(): void' >test</data-lsp></span><span style="color: #000000">() {</span></div><div class='line'><span style="color: #000000">  </span><span style="color: #0000FF">type</span><span style="color: #000000"> </span><span style="color: #267F99"><data-lsp lsp='type Person = {&#10;    name: string;&#10;}' >Person</data-lsp></span><span style="color: #000000"> = { </span><span style="color: #001080"><data-lsp lsp='(property) name: string' >name</data-lsp></span><span style="color: #000000">: </span><span style="color: #267F99">string</span><span style="color: #000000"> };</span></div><div class='line'><span style="color: #000000">  </span><span style="color: #AF00DB">if</span><span style="color: #000000"> (</span><span style="color: #267F99"><data-lsp lsp='var Math: Math' >Math</data-lsp></span><span style="color: #000000">.</span><span style="color: #795E26"><data-lsp lsp='(method) Math.random(): number' >random</data-lsp></span><span style="color: #000000">() &gt; </span><span style="color: #098658">0.5</span><span style="color: #000000">) {</span></div><div class='line'><span style="color: #000000">    </span><span style="color: #0000FF">type</span><span style="color: #000000"> </span><span style="color: #267F99"><data-lsp lsp='type Person = {&#10;    age: number;&#10;}' >Person</data-lsp></span><span style="color: #000000"> = { </span><span style="color: #001080"><data-lsp lsp='(property) age: number' >age</data-lsp></span><span style="color: #000000">: </span><span style="color: #267F99">number</span><span style="color: #000000"> };</span></div><div class='line'><span style="color: #000000">    </span><span style="color: #0000FF">let</span><span style="color: #000000"> </span><span style="color: #001080"><data-lsp lsp='let person: Person' >person</data-lsp></span><span style="color: #000000">: </span><span style="color: #267F99"><data-lsp lsp='type Person = {&#10;    age: number;&#10;}' >Person</data-lsp></span><span style="color: #000000">;</span></div><div class='line'><span style="color: #000000">  }</span></div><div class='line'><span style="color: #000000">}</span></div></code></div></pre>
<p>元组</p>
<ul>
<li>支持可选符号 ?</li>
<li>支持剩余元素 ...</li>
</ul>
<pre class="shiki light-plus twoslash lsp" style="background-color: #FFFFFF; color: #000000"><div class="language-id">ts</div><div class='code-container'><code><div class='line'><span style="color: #0000FF">let</span><span style="color: #000000"> </span><span style="color: #001080"><data-lsp lsp='let ticket: [string, number]' >ticket</data-lsp></span><span style="color: #000000">: [</span><span style="color: #267F99">string</span><span style="color: #000000">, </span><span style="color: #267F99">number</span><span style="color: #000000">] = [</span><span style="color: #A31515">"bqh"</span><span style="color: #000000">, </span><span style="color: #098658">10185</span><span style="color: #000000">];</span></div><div class='line'><span style="color: #0000FF">let</span><span style="color: #000000"> </span><span style="color: #001080"><data-lsp lsp='let trains: [string, (number | undefined)?][]' >trains</data-lsp></span><span style="color: #000000">: [</span><span style="color: #267F99">string</span><span style="color: #000000">, </span><span style="color: #267F99">number</span><span style="color: #000000">?][] = [[</span><span style="color: #A31515">"a"</span><span style="color: #000000">, </span><span style="color: #098658">123</span><span style="color: #000000">], [</span><span style="color: #A31515">"b"</span><span style="color: #000000">]];</span></div><div class='line'><span style="color: #0000FF">let</span><span style="color: #000000"> </span><span style="color: #001080"><data-lsp lsp='let list: [number, boolean, ...string[]]' >list</data-lsp></span><span style="color: #000000">: [</span><span style="color: #267F99">number</span><span style="color: #000000">, </span><span style="color: #267F99">boolean</span><span style="color: #000000">, ...</span><span style="color: #267F99">string</span><span style="color: #000000">[]] = [</span><span style="color: #098658">1</span><span style="color: #000000">, </span><span style="color: #0000FF">true</span><span style="color: #000000">, </span><span style="color: #A31515">"a"</span><span style="color: #000000">, </span><span style="color: #A31515">"b"</span><span style="color: #000000">, </span><span style="color: #A31515">"c"</span><span style="color: #000000">];</span></div></code></div></pre>
<p>数组类型有 <code>readonly</code> 标识，只读数组不再能被改变</p>
<pre class="shiki light-plus twoslash lsp" style="background-color: #FFFFFF; color: #000000"><div class="language-id">ts</div><div class='code-container'><code><div class='line'><span style="color: #0000FF">let</span><span style="color: #000000"> </span><span style="color: #001080"><data-lsp lsp='let arr: readonly number[]' >arr</data-lsp></span><span style="color: #000000">: </span><span style="color: #0000FF">readonly</span><span style="color: #000000"> </span><span style="color: #267F99">number</span><span style="color: #000000">[] = [</span><span style="color: #098658">1</span><span style="color: #000000">, </span><span style="color: #098658">2</span><span style="color: #000000">, </span><span style="color: #098658">3</span><span style="color: #000000">];</span></div><div class='line'><span style="color: #001080"><data-lsp lsp='let arr: readonly number[]' >arr</data-lsp></span><span style="color: #000000">[</span><span style="color: #098658">1</span><span style="color: #000000">] = </span><span style="color: #098658">2</span><span style="color: #000000">;</span></div><span class="error"><span>Index signature in type 'readonly number[]' only permits reading.</span><span class="code">2542</span></span><span class="error-behind">Index signature in type 'readonly number[]' only permits reading.</span><div class='line'><span style="color: #001080"><data-lsp lsp='let arr: readonly number[]' >arr</data-lsp></span><span style="color: #000000">.</span><span style="color: #795E26"><data-err><data-lsp lsp='any' >push</data-lsp></data-err></span><span style="color: #000000">(</span><span style="color: #098658">1</span><span style="color: #000000">);</span></div><span class="error"><span>Property 'push' does not exist on type 'readonly number[]'.</span><span class="code">2339</span></span><span class="error-behind">Property 'push' does not exist on type 'readonly number[]'.</span></code></div></pre>
<ul>
<li><code>void</code> 可表示无显式返回值函数的返回类型，例如 <code>console.log()</code></li>
<li><code>never</code> 可表示不会结束或抛出异常的的函数的返回类型</li>
<li><code>never</code> 值可以赋值给任何类型的变量</li>
</ul>
<pre class="shiki light-plus twoslash lsp" style="background-color: #FFFFFF; color: #000000"><div class="language-id">ts</div><div class='code-container'><code><div class='line'><span style="color: #0000FF">function</span><span style="color: #000000"> </span><span style="color: #795E26"><data-lsp lsp='function error(message: string): never' >error</data-lsp></span><span style="color: #000000">(</span><span style="color: #001080"><data-lsp lsp='(parameter) message: string' >message</data-lsp></span><span style="color: #000000">: </span><span style="color: #267F99">string</span><span style="color: #000000">): </span><span style="color: #267F99">never</span><span style="color: #000000"> {</span></div><div class='line'><span style="color: #000000">  </span><span style="color: #AF00DB">throw</span><span style="color: #000000"> </span><span style="color: #0000FF">new</span><span style="color: #000000"> </span><span style="color: #267F99"><data-lsp lsp='var Error: ErrorConstructor&#10;new (message?: string | undefined) => Error' >Error</data-lsp></span><span style="color: #000000">(</span><span style="color: #A31515">&apos;Failed to return. msg:&apos;</span><span style="color: #000000"> + </span><span style="color: #001080"><data-lsp lsp='(parameter) message: string' >message</data-lsp></span><span style="color: #000000">);</span></div><div class='line'><span style="color: #000000">}</span></div><div class='line'><span style="color: #0000FF">function</span><span style="color: #000000"> </span><span style="color: #795E26"><data-lsp lsp='function loop(): never' >loop</data-lsp></span><span style="color: #000000">(): </span><span style="color: #267F99">never</span><span style="color: #000000"> {</span></div><div class='line'><span style="color: #000000">  </span><span style="color: #AF00DB">while</span><span style="color: #000000"> (</span><span style="color: #0000FF">true</span><span style="color: #000000">) {}</span></div><div class='line'><span style="color: #000000">}</span></div><div class='line'><span style="color: #0000FF">let</span><span style="color: #000000"> </span><span style="color: #001080"><data-lsp lsp='let sth: number' >sth</data-lsp></span><span style="color: #000000"> = </span><span style="color: #098658">100</span><span style="color: #000000">;</span></div><div class='line'><span style="color: #001080"><data-lsp lsp='let sth: number' >sth</data-lsp></span><span style="color: #000000"> = </span><span style="color: #795E26"><data-lsp lsp='function loop(): never' >loop</data-lsp></span><span style="color: #000000">();</span></div></code></div></pre>
<p>枚举</p>
<ul>
<li><code>enum</code> 编译为一个对象a</li>
<li><code>const enum</code> 则不生成 JavaScript 代码，而是在用到枚举成员的地方内插对应的值，</li>
<li>设置 <code>complierOptions</code> 中的 <code>preserveConstEnums</code> 参数为 true 可以保留枚举常量（Disable erasing <code>const enum</code> declarations in generated code.）</li>
</ul>
<pre class="shiki light-plus twoslash lsp" style="background-color: #FFFFFF; color: #000000"><div class="language-id">ts</div><div class='code-container'><code><div class='line'><span style="color: #0000FF">enum</span><span style="color: #000000"> </span><span style="color: #267F99"><data-lsp lsp='enum Color' >Color</data-lsp></span><span style="color: #000000"> {</span></div><div class='line'><span style="color: #000000">  </span><span style="color: #0070C1"><data-lsp lsp='(enum member) Color.Red = "#f00"' >Red</data-lsp></span><span style="color: #000000"> = </span><span style="color: #A31515">"#f00"</span><span style="color: #000000">,</span></div><div class='line'><span style="color: #000000">  </span><span style="color: #0070C1"><data-lsp lsp='(enum member) Color.Green = "#0f0"' >Green</data-lsp></span><span style="color: #000000"> = </span><span style="color: #A31515">"#0f0"</span><span style="color: #000000">,</span></div><div class='line'><span style="color: #000000">  </span><span style="color: #0070C1"><data-lsp lsp='(enum member) Color.Blue = "#00f"' >Blue</data-lsp></span><span style="color: #000000"> = </span><span style="color: #A31515">"#00f"</span><span style="color: #000000">,</span></div><div class='line'><span style="color: #000000">}</span></div><div class='line'><span style="color: #008000">// 编译结果：</span></div><div class='line'><span style="color: #008000">// var Color;</span></div><div class='line'><span style="color: #008000">// (function (Color) {</span></div><div class='line'><span style="color: #008000">//     Color["Red"] = "#f00";</span></div><div class='line'><span style="color: #008000">//     Color["Green"] = "#0f0";</span></div><div class='line'><span style="color: #008000">//     Color["Blue"] = "#00f";</span></div><div class='line'><span style="color: #008000">// })(Color || (Color = {}));</span></div></code></div></pre>`;
  return (
    <div
      className="markdown-body"
      dangerouslySetInnerHTML={{ __html: innerHTML }}
    />
  );
}

export function Chapter4Function() {
  const innerHTML = `<h1>Chapter 4: 函数</h1>
<p>当需要在函数中使用 <code>this</code> 时，可以在参数列表的第一项声明 <code>this</code> 的类型，否则 <code>this</code> 为 <code>any</code>，并不安全</p>
<pre class="shiki light-plus twoslash lsp" style="background-color: #FFFFFF; color: #000000"><div class="language-id">ts</div><div class='code-container'><code><div class='line'><span style="color: #0000FF">function</span><span style="color: #000000"> </span><span style="color: #795E26"><data-lsp lsp='function helloDate(this: Date, greet: string): string' >helloDate</data-lsp></span><span style="color: #000000">(</span><span style="color: #0000FF"><data-lsp lsp='(parameter) this: Date' >this</data-lsp></span><span style="color: #000000">: </span><span style="color: #267F99"><data-lsp lsp='interface Date' >Date</data-lsp></span><span style="color: #000000">, </span><span style="color: #001080"><data-lsp lsp='(parameter) greet: string' >greet</data-lsp></span><span style="color: #000000">: </span><span style="color: #267F99">string</span><span style="color: #000000">) {</span></div><div class='line'><span style="color: #000000">  </span><span style="color: #AF00DB">return</span><span style="color: #000000"> </span><span style="color: #001080"><data-lsp lsp='(parameter) greet: string' >greet</data-lsp></span><span style="color: #000000"> + </span><span style="color: #0000FF">this</span><span style="color: #000000">.</span><span style="color: #795E26"><data-lsp lsp='(method) Date.getDate(): number' >getDate</data-lsp></span><span style="color: #000000">();</span></div><div class='line'><span style="color: #000000">}</span></div><div class='line'>&nbsp;</div><div class='line'><span style="color: #008000">// error</span></div><div class='line'><span style="color: #795E26"><data-lsp lsp='function helloDate(this: Date, greet: string): string' >helloDate</data-lsp></span><span style="color: #000000">(</span><span style="color: #A31515">&apos;hello&apos;</span><span style="color: #000000">);</span></div><span class="error"><span>The 'this' context of type 'void' is not assignable to method's 'this' of type 'Date'.</span><span class="code">2684</span></span><span class="error-behind">The 'this' context of type 'void' is not assignable to method's 'this' of type 'Date'.</span><div class='line'><span style="color: #001080"><data-lsp lsp='function helloDate(this: Date, greet: string): string' >helloDate</data-lsp></span><span style="color: #000000">.</span><span style="color: #795E26"><data-lsp lsp='(method) CallableFunction.call&lt;Date, [string], string>(this: (this: Date, args_0: string) => string, thisArg: Date, args_0: string): string' >call</data-lsp></span><span style="color: #000000">(<data-err>{}</data-err>, </span><span style="color: #A31515">"hello"</span><span style="color: #000000">);</span></div><span class="error"><span>Argument of type '{}' is not assignable to parameter of type 'Date'.
  Type '{}' is missing the following properties from type 'Date': toDateString, toTimeString, toLocaleDateString, toLocaleTimeString, and 38 more.</span><span class="code">2345</span></span><span class="error-behind">Argument of type '{}' is not assignable to parameter of type 'Date'.
  Type '{}' is missing the following properties from type 'Date': toDateString, toTimeString, toLocaleDateString, toLocaleTimeString, and 38 more.</span><div class='line'>&nbsp;</div><div class='line'><span style="color: #008000">// correct</span></div><div class='line'><span style="color: #001080"><data-lsp lsp='function helloDate(this: Date, greet: string): string' >helloDate</data-lsp></span><span style="color: #000000">.</span><span style="color: #795E26"><data-lsp lsp='(method) CallableFunction.call&lt;Date, [string], string>(this: (this: Date, args_0: string) => string, thisArg: Date, args_0: string): string' >call</data-lsp></span><span style="color: #000000">(</span><span style="color: #0000FF">new</span><span style="color: #000000"> </span><span style="color: #267F99"><data-lsp lsp='var Date: DateConstructor&#10;new () => Date (+4 overloads)' >Date</data-lsp></span><span style="color: #000000">(), </span><span style="color: #A31515">"hello"</span><span style="color: #000000">);</span></div></code></div></pre>
<p>函数类型有两种声明方式，分别为简写和完整形式</p>
<pre class="shiki light-plus twoslash lsp" style="background-color: #FFFFFF; color: #000000"><div class="language-id">ts</div><div class='code-container'><code><div class='line'><span style="color: #008000">// The following two declare are the same</span></div><div class='line'><span style="color: #0000FF">type</span><span style="color: #000000"> </span><span style="color: #267F99"><data-lsp lsp='type LogA = (message: string) => void' >LogA</data-lsp></span><span style="color: #000000"> = (</span><span style="color: #001080"><data-lsp lsp='(parameter) message: string' >message</data-lsp></span><span style="color: #000000">: </span><span style="color: #267F99">string</span><span style="color: #000000">) </span><span style="color: #0000FF">=&gt;</span><span style="color: #000000"> </span><span style="color: #267F99">void</span><span style="color: #000000">;</span></div><div class='line'><span style="color: #0000FF">type</span><span style="color: #000000"> </span><span style="color: #267F99"><data-lsp lsp='type LogB = (message: string) => void' >LogB</data-lsp></span><span style="color: #000000"> = {</span></div><div class='line'><span style="color: #000000">  (</span><span style="color: #001080"><data-lsp lsp='(parameter) message: string' >message</data-lsp></span><span style="color: #000000">: </span><span style="color: #267F99">string</span><span style="color: #000000">): </span><span style="color: #267F99">void</span><span style="color: #000000">;</span></div><div class='line'><span style="color: #000000">};</span></div></code></div></pre>
<p>函数类型的完整声明可以用来进行函数的重载</p>
<pre class="shiki light-plus twoslash lsp" style="background-color: #FFFFFF; color: #000000"><div class="language-id">ts</div><div class='code-container'><code><div class='line'><span style="color: #0000FF">type</span><span style="color: #000000"> </span><span style="color: #267F99"><data-lsp lsp='type Print = {&#10;    (message: string): void;&#10;    (message: string, suffix: number): number;&#10;    (prefix: number, message: string, suffix: number): number;&#10;}' >Print</data-lsp></span><span style="color: #000000"> = {</span></div><div class='line'><span style="color: #000000">  (</span><span style="color: #001080"><data-lsp lsp='(parameter) message: string' >message</data-lsp></span><span style="color: #000000">: </span><span style="color: #267F99">string</span><span style="color: #000000">): </span><span style="color: #267F99">void</span><span style="color: #000000">;</span></div><div class='line'><span style="color: #000000">  (</span><span style="color: #001080"><data-lsp lsp='(parameter) message: string' >message</data-lsp></span><span style="color: #000000">: </span><span style="color: #267F99">string</span><span style="color: #000000">, </span><span style="color: #001080"><data-lsp lsp='(parameter) suffix: number' >suffix</data-lsp></span><span style="color: #000000">: </span><span style="color: #267F99">number</span><span style="color: #000000">): </span><span style="color: #267F99">number</span><span style="color: #000000">;</span></div><div class='line'><span style="color: #000000">  (</span><span style="color: #001080"><data-lsp lsp='(parameter) prefix: number' >prefix</data-lsp></span><span style="color: #000000">: </span><span style="color: #267F99">number</span><span style="color: #000000">, </span><span style="color: #001080"><data-lsp lsp='(parameter) message: string' >message</data-lsp></span><span style="color: #000000">: </span><span style="color: #267F99">string</span><span style="color: #000000">, </span><span style="color: #001080"><data-lsp lsp='(parameter) suffix: number' >suffix</data-lsp></span><span style="color: #000000">: </span><span style="color: #267F99">number</span><span style="color: #000000">): </span><span style="color: #267F99">number</span><span style="color: #000000">;</span></div><div class='line'><span style="color: #000000">};</span></div></code></div></pre>
<p>可以在函数声明时对函数进行重载</p>
<pre class="shiki light-plus twoslash lsp" style="background-color: #FFFFFF; color: #000000"><div class="language-id">ts</div><div class='code-container'><code><div class='line'><span style="color: #0000FF">function</span><span style="color: #000000"> </span><span style="color: #795E26"><data-lsp lsp='function foo(message: "a"): Date (+2 overloads)' >foo</data-lsp></span><span style="color: #000000">(</span><span style="color: #001080"><data-lsp lsp='(parameter) message: "a"' >message</data-lsp></span><span style="color: #000000">: </span><span style="color: #A31515">"a"</span><span style="color: #000000">): </span><span style="color: #267F99"><data-lsp lsp='interface Date' >Date</data-lsp></span><span style="color: #000000">;</span></div><div class='line'><span style="color: #0000FF">function</span><span style="color: #000000"> </span><span style="color: #795E26"><data-lsp lsp='function foo(message: "b"): number (+2 overloads)' >foo</data-lsp></span><span style="color: #000000">(</span><span style="color: #001080"><data-lsp lsp='(parameter) message: "b"' >message</data-lsp></span><span style="color: #000000">: </span><span style="color: #A31515">"b"</span><span style="color: #000000">): </span><span style="color: #267F99">number</span><span style="color: #000000">;</span></div><div class='line'><span style="color: #0000FF">function</span><span style="color: #000000"> </span><span style="color: #795E26"><data-lsp lsp='function foo(name: "c"): string (+2 overloads)' >foo</data-lsp></span><span style="color: #000000">(</span><span style="color: #001080"><data-lsp lsp='(parameter) name: "c"' >name</data-lsp></span><span style="color: #000000">: </span><span style="color: #A31515">"c"</span><span style="color: #000000">): </span><span style="color: #267F99">string</span><span style="color: #000000">;</span></div><div class='line'><span style="color: #0000FF">function</span><span style="color: #000000"> </span><span style="color: #795E26"><data-lsp lsp='function foo(message: "a"): Date (+2 overloads)' >foo</data-lsp></span><span style="color: #000000">(</span><span style="color: #001080"><data-lsp lsp='(parameter) message: string' >message</data-lsp></span><span style="color: #000000">: </span><span style="color: #267F99">string</span><span style="color: #000000">): </span><span style="color: #267F99">any</span><span style="color: #000000"> {</span></div><div class='line'><span style="color: #000000">  </span><span style="color: #AF00DB">return</span><span style="color: #000000"> </span><span style="color: #001080"><data-lsp lsp='(parameter) message: string' >message</data-lsp></span><span style="color: #000000">;</span></div><div class='line'><span style="color: #000000">}</span></div></code></div></pre>
<p>使用完整的函数类型声明可以给函数对象添加属性</p>
<pre class="shiki light-plus twoslash lsp" style="background-color: #FFFFFF; color: #000000"><div class="language-id">ts</div><div class='code-container'><code><div class='line'><span style="color: #0000FF">type</span><span style="color: #000000"> </span><span style="color: #267F99"><data-lsp lsp='type FooFn = {&#10;    (message: string): void;&#10;    bar: number;&#10;}' >FooFn</data-lsp></span><span style="color: #000000"> = {</span></div><div class='line'><span style="color: #000000">  (</span><span style="color: #001080"><data-lsp lsp='(parameter) message: string' >message</data-lsp></span><span style="color: #000000">: </span><span style="color: #267F99">string</span><span style="color: #000000">): </span><span style="color: #267F99">void</span><span style="color: #000000">;</span></div><div class='line'><span style="color: #000000">  </span><span style="color: #001080"><data-lsp lsp='(property) bar: number' >bar</data-lsp></span><span style="color: #000000">: </span><span style="color: #267F99">number</span><span style="color: #000000">;</span></div><div class='line'><span style="color: #000000">};</span></div></code></div></pre>
<p>泛型</p>
<pre class="shiki light-plus twoslash lsp" style="background-color: #FFFFFF; color: #000000"><div class="language-id">ts</div><div class='code-container'><code><div class='line'><span style="color: #008000">// A example for filter function</span></div><div class='line'><span style="color: #0000FF">type</span><span style="color: #000000"> </span><span style="color: #267F99"><data-lsp lsp='type Filter = &lt;T>(array: T[], f: (item: T) => boolean) => T[]' >Filter</data-lsp></span><span style="color: #000000"> = {</span></div><div class='line'><span style="color: #000000">  &lt;</span><span style="color: #267F99"><data-lsp lsp='(type parameter) T in &lt;T>(array: T[], f: (item: T) => boolean): T[]' >T</data-lsp></span><span style="color: #000000">&gt;(</span><span style="color: #001080"><data-lsp lsp='(parameter) array: T[]' >array</data-lsp></span><span style="color: #000000">: </span><span style="color: #267F99"><data-lsp lsp='(type parameter) T in &lt;T>(array: T[], f: (item: T) => boolean): T[]' >T</data-lsp></span><span style="color: #000000">[], </span><span style="color: #795E26"><data-lsp lsp='(parameter) f: (item: T) => boolean' >f</data-lsp></span><span style="color: #000000">: (</span><span style="color: #001080"><data-lsp lsp='(parameter) item: T' >item</data-lsp></span><span style="color: #000000">: </span><span style="color: #267F99"><data-lsp lsp='(type parameter) T in &lt;T>(array: T[], f: (item: T) => boolean): T[]' >T</data-lsp></span><span style="color: #000000">) </span><span style="color: #0000FF">=&gt;</span><span style="color: #000000"> </span><span style="color: #267F99">boolean</span><span style="color: #000000">): </span><span style="color: #267F99"><data-lsp lsp='(type parameter) T in &lt;T>(array: T[], f: (item: T) => boolean): T[]' >T</data-lsp></span><span style="color: #000000">[];</span></div><div class='line'><span style="color: #000000">};</span></div><div class='line'><span style="color: #0000FF">type</span><span style="color: #000000"> </span><span style="color: #267F99"><data-lsp lsp='type AnotherFilter = &lt;T>(array: T[], f: (item: T) => boolean) => T[]' >AnotherFilter</data-lsp></span><span style="color: #000000"> = &lt;</span><span style="color: #267F99"><data-lsp lsp='(type parameter) T in &lt;T>(array: T[], f: (item: T) => boolean): T[]' >T</data-lsp></span><span style="color: #000000">&gt;(</span><span style="color: #001080"><data-lsp lsp='(parameter) array: T[]' >array</data-lsp></span><span style="color: #000000">: </span><span style="color: #267F99"><data-lsp lsp='(type parameter) T in &lt;T>(array: T[], f: (item: T) => boolean): T[]' >T</data-lsp></span><span style="color: #000000">[], </span><span style="color: #795E26"><data-lsp lsp='(parameter) f: (item: T) => boolean' >f</data-lsp></span><span style="color: #000000">: (</span><span style="color: #001080"><data-lsp lsp='(parameter) item: T' >item</data-lsp></span><span style="color: #000000">: </span><span style="color: #267F99"><data-lsp lsp='(type parameter) T in &lt;T>(array: T[], f: (item: T) => boolean): T[]' >T</data-lsp></span><span style="color: #000000">) </span><span style="color: #0000FF">=&gt;</span><span style="color: #000000"> </span><span style="color: #267F99">boolean</span><span style="color: #000000">) </span><span style="color: #0000FF">=&gt;</span><span style="color: #000000"> </span><span style="color: #267F99"><data-lsp lsp='(type parameter) T in &lt;T>(array: T[], f: (item: T) => boolean): T[]' >T</data-lsp></span><span style="color: #000000">[];</span></div></code></div></pre>
<p>使用 <code>T extends Type</code> 的方式可以声明受限的泛型
在下面的 <code>mapNode</code> 函数声明中，如果仅使用 <code>T</code>，则无法从 <code>node</code> 中安全读取 <code>value</code> 属性，
若使用 <code>TreeNode</code> 不使用泛型，则返回值会丢失类型信息，统统为 <code>TreeNode</code> 类型</p>
<pre class="shiki light-plus twoslash lsp" style="background-color: #FFFFFF; color: #000000"><div class="language-id">ts</div><div class='code-container'><code><div class='line'><span style="color: #0000FF">type</span><span style="color: #000000"> </span><span style="color: #267F99"><data-lsp lsp='type TreeNode = {&#10;    value: string;&#10;}' >TreeNode</data-lsp></span><span style="color: #000000"> = {</span></div><div class='line'><span style="color: #000000">  </span><span style="color: #001080"><data-lsp lsp='(property) value: string' >value</data-lsp></span><span style="color: #000000">: </span><span style="color: #267F99">string</span><span style="color: #000000">;</span></div><div class='line'><span style="color: #000000">};</span></div><div class='line'><span style="color: #0000FF">type</span><span style="color: #000000"> </span><span style="color: #267F99"><data-lsp lsp='type LeafNode = TreeNode &amp; {&#10;    isLeaf: true;&#10;}' >LeafNode</data-lsp></span><span style="color: #000000"> = </span><span style="color: #267F99"><data-lsp lsp='type TreeNode = {&#10;    value: string;&#10;}' >TreeNode</data-lsp></span><span style="color: #000000"> & {</span></div><div class='line'><span style="color: #000000">  </span><span style="color: #001080"><data-lsp lsp='(property) isLeaf: true' >isLeaf</data-lsp></span><span style="color: #000000">: </span><span style="color: #267F99">true</span><span style="color: #000000">;</span></div><div class='line'><span style="color: #000000">};</span></div><div class='line'><span style="color: #0000FF">type</span><span style="color: #000000"> </span><span style="color: #267F99"><data-lsp lsp='type InnerNode = TreeNode &amp; {&#10;    children: [TreeNode] | [TreeNode, TreeNode];&#10;}' >InnerNode</data-lsp></span><span style="color: #000000"> = </span><span style="color: #267F99"><data-lsp lsp='type TreeNode = {&#10;    value: string;&#10;}' >TreeNode</data-lsp></span><span style="color: #000000"> & {</span></div><div class='line'><span style="color: #000000">  </span><span style="color: #001080"><data-lsp lsp='(property) children: [TreeNode] | [TreeNode, TreeNode]' >children</data-lsp></span><span style="color: #000000">: [</span><span style="color: #267F99"><data-lsp lsp='type TreeNode = {&#10;    value: string;&#10;}' >TreeNode</data-lsp></span><span style="color: #000000">] | [</span><span style="color: #267F99"><data-lsp lsp='type TreeNode = {&#10;    value: string;&#10;}' >TreeNode</data-lsp></span><span style="color: #000000">, </span><span style="color: #267F99"><data-lsp lsp='type TreeNode = {&#10;    value: string;&#10;}' >TreeNode</data-lsp></span><span style="color: #000000">];</span></div><div class='line'><span style="color: #000000">};</span></div><div class='line'>&nbsp;</div><div class='line'><span style="color: #0000FF">function</span><span style="color: #000000"> </span><span style="color: #795E26"><data-lsp lsp='function mapNode&lt;T extends TreeNode>(node: T, f: (value: string) => string): T &amp; {&#10;    value: string;&#10;}' >mapNode</data-lsp></span><span style="color: #000000">&lt;</span><span style="color: #267F99"><data-lsp lsp='(type parameter) T in mapNode&lt;T extends TreeNode>(node: T, f: (value: string) => string): T &amp; {&#10;    value: string;&#10;}' >T</data-lsp></span><span style="color: #000000"> </span><span style="color: #0000FF">extends</span><span style="color: #000000"> </span><span style="color: #267F99"><data-lsp lsp='type TreeNode = {&#10;    value: string;&#10;}' >TreeNode</data-lsp></span><span style="color: #000000">&gt;(</span><span style="color: #001080"><data-lsp lsp='(parameter) node: T extends TreeNode' >node</data-lsp></span><span style="color: #000000">: </span><span style="color: #267F99"><data-lsp lsp='(type parameter) T in mapNode&lt;T extends TreeNode>(node: T, f: (value: string) => string): T &amp; {&#10;    value: string;&#10;}' >T</data-lsp></span><span style="color: #000000">, </span><span style="color: #795E26"><data-lsp lsp='(parameter) f: (value: string) => string' >f</data-lsp></span><span style="color: #000000">: (</span><span style="color: #001080"><data-lsp lsp='(parameter) value: string' >value</data-lsp></span><span style="color: #000000">: </span><span style="color: #267F99">string</span><span style="color: #000000">) </span><span style="color: #0000FF">=&gt;</span><span style="color: #000000"> </span><span style="color: #267F99">string</span><span style="color: #000000">) {</span></div><div class='line'><span style="color: #000000">  </span><span style="color: #AF00DB">return</span><span style="color: #000000"> {</span></div><div class='line'><span style="color: #000000">    ...</span><span style="color: #001080"><data-lsp lsp='(parameter) node: T extends TreeNode' >node</data-lsp></span><span style="color: #000000">,</span></div><div class='line'><span style="color: #000000">    </span><span style="color: #001080"><data-lsp lsp='(property) value: string' >value</data-lsp>:</span><span style="color: #000000"> </span><span style="color: #795E26"><data-lsp lsp='(parameter) f: (value: string) => string' >f</data-lsp></span><span style="color: #000000">(</span><span style="color: #001080"><data-lsp lsp='(parameter) node: T extends TreeNode' >node</data-lsp></span><span style="color: #000000">.</span><span style="color: #001080"><data-lsp lsp='(property) value: string' >value</data-lsp></span><span style="color: #000000">),</span></div><div class='line'><span style="color: #000000">  };</span></div><div class='line'><span style="color: #000000">}</span></div><div class='line'>&nbsp;</div><div class='line'><span style="color: #0000FF">const</span><span style="color: #000000"> </span><span style="color: #0070C1"><data-lsp lsp='const fooNode: LeafNode' >fooNode</data-lsp></span><span style="color: #000000">: </span><span style="color: #267F99"><data-lsp lsp='type LeafNode = TreeNode &amp; {&#10;    isLeaf: true;&#10;}' >LeafNode</data-lsp></span><span style="color: #000000"> = {</span></div><div class='line'><span style="color: #000000">  </span><span style="color: #001080"><data-lsp lsp='(property) value: string' >value</data-lsp>:</span><span style="color: #000000"> </span><span style="color: #A31515">"foo"</span><span style="color: #000000">,</span></div><div class='line'><span style="color: #000000">  </span><span style="color: #001080"><data-lsp lsp='(property) isLeaf: true' >isLeaf</data-lsp>:</span><span style="color: #000000"> </span><span style="color: #0000FF">true</span><span style="color: #000000">,</span></div><div class='line'><span style="color: #000000">};</span></div><div class='line'><span style="color: #008000">// resultNode 的类型为 typeof fooNode & { value: string }</span></div><div class='line'><span style="color: #0000FF">const</span><span style="color: #000000"> </span><span style="color: #0070C1"><data-lsp lsp='const resultNode: TreeNode &amp; {&#10;    isLeaf: true;&#10;} &amp; {&#10;    value: string;&#10;}' >resultNode</data-lsp></span><span style="color: #000000"> = </span><span style="color: #795E26"><data-lsp lsp='function mapNode&lt;LeafNode>(node: LeafNode, f: (value: string) => string): TreeNode &amp; {&#10;    isLeaf: true;&#10;} &amp; {&#10;    value: string;&#10;}' >mapNode</data-lsp></span><span style="color: #000000">(</span><span style="color: #001080"><data-lsp lsp='const fooNode: LeafNode' >fooNode</data-lsp></span><span style="color: #000000">, (</span><span style="color: #001080"><data-lsp lsp='(parameter) value: string' >value</data-lsp></span><span style="color: #000000">) </span><span style="color: #0000FF">=&gt;</span><span style="color: #000000"> </span><span style="color: #001080"><data-lsp lsp='(parameter) value: string' >value</data-lsp></span><span style="color: #000000">.</span><span style="color: #795E26"><data-lsp lsp='(method) String.slice(start?: number | undefined, end?: number | undefined): string' >slice</data-lsp></span><span style="color: #000000">(</span><span style="color: #098658">1</span><span style="color: #000000">));</span></div></code></div></pre>
<p>模拟变长参数（Exercise 4）</p>
<pre class="shiki light-plus twoslash lsp" style="background-color: #FFFFFF; color: #000000"><div class="language-id">ts</div><div class='code-container'><code><div class='line'><span style="color: #0000FF">function</span><span style="color: #000000"> </span><span style="color: #795E26"><data-lsp lsp='function call&lt;T extends [unknown, string, ...unknown[]], R>(f: (...args: T) => R, ...args: T): R' >call</data-lsp></span><span style="color: #000000">&lt;</span><span style="color: #267F99"><data-lsp lsp='(type parameter) T in call&lt;T extends [unknown, string, ...unknown[]], R>(f: (...args: T) => R, ...args: T): R' >T</data-lsp></span><span style="color: #000000"> </span><span style="color: #0000FF">extends</span><span style="color: #000000"> [</span><span style="color: #267F99">unknown</span><span style="color: #000000">, </span><span style="color: #267F99">string</span><span style="color: #000000">, ...</span><span style="color: #267F99">unknown</span><span style="color: #000000">[]], </span><span style="color: #267F99"><data-lsp lsp='(type parameter) R in call&lt;T extends [unknown, string, ...unknown[]], R>(f: (...args: T) => R, ...args: T): R' >R</data-lsp></span><span style="color: #000000">&gt;(</span></div><div class='line'><span style="color: #000000">  </span><span style="color: #795E26"><data-lsp lsp='(parameter) f: (...args: T) => R' >f</data-lsp></span><span style="color: #000000">: (...</span><span style="color: #001080"><data-lsp lsp='(parameter) args: T extends [unknown, string, ...unknown[]]' >args</data-lsp></span><span style="color: #000000">: </span><span style="color: #267F99"><data-lsp lsp='(type parameter) T in call&lt;T extends [unknown, string, ...unknown[]], R>(f: (...args: T) => R, ...args: T): R' >T</data-lsp></span><span style="color: #000000">) </span><span style="color: #0000FF">=&gt;</span><span style="color: #000000"> </span><span style="color: #267F99"><data-lsp lsp='(type parameter) R in call&lt;T extends [unknown, string, ...unknown[]], R>(f: (...args: T) => R, ...args: T): R' >R</data-lsp></span><span style="color: #000000">,</span></div><div class='line'><span style="color: #000000">  ...</span><span style="color: #001080"><data-lsp lsp='(parameter) args: T extends [unknown, string, ...unknown[]]' >args</data-lsp></span><span style="color: #000000">: </span><span style="color: #267F99"><data-lsp lsp='(type parameter) T in call&lt;T extends [unknown, string, ...unknown[]], R>(f: (...args: T) => R, ...args: T): R' >T</data-lsp></span></div><div class='line'><span style="color: #000000">) {</span></div><div class='line'><span style="color: #000000">  </span><span style="color: #AF00DB">return</span><span style="color: #000000"> </span><span style="color: #795E26"><data-lsp lsp='(parameter) f: (...args: T) => R' >f</data-lsp></span><span style="color: #000000">(...</span><span style="color: #001080"><data-lsp lsp='(parameter) args: T extends [unknown, string, ...unknown[]]' >args</data-lsp></span><span style="color: #000000">);</span></div><div class='line'><span style="color: #000000">}</span></div><div class='line'><span style="color: #0000FF">function</span><span style="color: #000000"> </span><span style="color: #795E26"><data-lsp lsp='function fill&lt;T>(length: number, value: T): T[]' >fill</data-lsp></span><span style="color: #000000">&lt;</span><span style="color: #267F99"><data-lsp lsp='(type parameter) T in fill&lt;T>(length: number, value: T): T[]' >T</data-lsp></span><span style="color: #000000">&gt;(</span><span style="color: #001080"><data-lsp lsp='(parameter) length: number' >length</data-lsp></span><span style="color: #000000">: </span><span style="color: #267F99">number</span><span style="color: #000000">, </span><span style="color: #001080"><data-lsp lsp='(parameter) value: T' >value</data-lsp></span><span style="color: #000000">: </span><span style="color: #267F99"><data-lsp lsp='(type parameter) T in fill&lt;T>(length: number, value: T): T[]' >T</data-lsp></span><span style="color: #000000">) {</span></div><div class='line'><span style="color: #000000">  </span><span style="color: #AF00DB">return</span><span style="color: #000000"> </span><span style="color: #267F99"><data-lsp lsp='var Array: ArrayConstructor' >Array</data-lsp></span><span style="color: #000000">.</span><span style="color: #795E26"><data-lsp lsp='(method) ArrayConstructor.from&lt;unknown, T>(iterable: Iterable&lt;unknown> | ArrayLike&lt;unknown>, mapfn: (v: unknown, k: number) => T, thisArg?: any): T[] (+3 overloads)' >from</data-lsp></span><span style="color: #000000">({ </span><span style="color: #001080"><data-lsp lsp='(property) ArrayLike&lt;T>.length: number' >length</data-lsp></span><span style="color: #000000"> }, () </span><span style="color: #0000FF">=&gt;</span><span style="color: #000000"> </span><span style="color: #001080"><data-lsp lsp='(parameter) value: T' >value</data-lsp></span><span style="color: #000000">);</span></div><div class='line'><span style="color: #000000">}</span></div><div class='line'><span style="color: #0000FF">const</span><span style="color: #000000"> </span><span style="color: #0070C1"><data-lsp lsp='const fillArr: ""[]' >fillArr</data-lsp></span><span style="color: #000000"> = </span><span style="color: #795E26"><data-lsp lsp='function call&lt;[number, ""], ""[]>(f: (args_0: number, args_1: "") => ""[], args_0: number, args_1: ""): ""[]' >call</data-lsp></span><span style="color: #000000">(</span><span style="color: #001080"><data-lsp lsp='function fill&lt;T>(length: number, value: T): T[]' >fill</data-lsp></span><span style="color: #000000">, </span><span style="color: #098658">10</span><span style="color: #000000">, </span><span style="color: #A31515">""</span><span style="color: #000000">);</span></div></code></div></pre>
<p>泛型可以有默认类型。类似于函数的可选参数，有默认类型的泛型需要放在没有默认类型的泛型后面</p>
<pre class="shiki light-plus twoslash lsp" style="background-color: #FFFFFF; color: #000000"><div class="language-id">ts</div><div class='code-container'><code><div class='line'><span style="color: #0000FF">type</span><span style="color: #000000"> </span><span style="color: #267F99"><data-lsp lsp='type MyEvent&lt;Target extends HTMLElement = HTMLElement, Type = string> = {&#10;    target: Target;&#10;    type: Type;&#10;}' >MyEvent</data-lsp></span><span style="color: #000000">&lt;</span><span style="color: #267F99"><data-lsp lsp='(type parameter) Target in type MyEvent&lt;Target extends HTMLElement = HTMLElement, Type = string>' >Target</data-lsp></span><span style="color: #000000"> </span><span style="color: #0000FF">extends</span><span style="color: #000000"> </span><span style="color: #267F99"><data-lsp lsp='interface HTMLElement' >HTMLElement</data-lsp></span><span style="color: #000000"> = </span><span style="color: #267F99"><data-lsp lsp='interface HTMLElement' >HTMLElement</data-lsp></span><span style="color: #000000">, </span><span style="color: #267F99"><data-lsp lsp='(type parameter) Type in type MyEvent&lt;Target extends HTMLElement = HTMLElement, Type = string>' >Type</data-lsp></span><span style="color: #000000"> = </span><span style="color: #267F99">string</span><span style="color: #000000">&gt; = {</span></div><div class='line'><span style="color: #000000">  </span><span style="color: #001080"><data-lsp lsp='(property) target: Target extends HTMLElement = HTMLElement' >target</data-lsp></span><span style="color: #000000">: </span><span style="color: #267F99"><data-lsp lsp='(type parameter) Target in type MyEvent&lt;Target extends HTMLElement = HTMLElement, Type = string>' >Target</data-lsp></span><span style="color: #000000">;</span></div><div class='line'><span style="color: #000000">  </span><span style="color: #001080"><data-lsp lsp='(property) type: Type = string' >type</data-lsp></span><span style="color: #000000">: </span><span style="color: #267F99"><data-lsp lsp='(type parameter) Type in type MyEvent&lt;Target extends HTMLElement = HTMLElement, Type = string>' >Type</data-lsp></span><span style="color: #000000">;</span></div><div class='line'><span style="color: #000000">};</span></div><div class='line'><span style="color: #0000FF">let</span><span style="color: #000000"> </span><span style="color: #001080"><data-lsp lsp='let myEvent: MyEvent&lt;HTMLBodyElement, string>' >myEvent</data-lsp></span><span style="color: #000000">: </span><span style="color: #267F99"><data-lsp lsp='type MyEvent&lt;Target extends HTMLElement = HTMLElement, Type = string> = {&#10;    target: Target;&#10;    type: Type;&#10;}' >MyEvent</data-lsp></span><span style="color: #000000">&lt;</span><span style="color: #267F99"><data-lsp lsp='interface HTMLBodyElement' >HTMLBodyElement</data-lsp></span><span style="color: #000000">&gt; = {</span></div><div class='line'><span style="color: #000000">  </span><span style="color: #001080"><data-lsp lsp='(property) target: HTMLBodyElement' >target</data-lsp>:</span><span style="color: #000000"> &lt;</span><span style="color: #267F99"><data-lsp lsp='interface HTMLBodyElement' >HTMLBodyElement</data-lsp></span><span style="color: #000000">&gt;</span><span style="color: #001080"><data-lsp lsp='var document: Document' >document</data-lsp></span><span style="color: #000000">.</span><span style="color: #001080"><data-lsp lsp='(property) Document.body: HTMLElement' >body</data-lsp></span><span style="color: #000000">,</span></div><div class='line'><span style="color: #000000">  </span><span style="color: #001080"><data-lsp lsp='(property) type: string' >type</data-lsp>:</span><span style="color: #000000"> </span><span style="color: #A31515">"click"</span><span style="color: #000000">,</span></div><div class='line'><span style="color: #000000">};</span></div></code></div></pre>
<p>Exercise 5</p>
<pre class="shiki light-plus twoslash lsp" style="background-color: #FFFFFF; color: #000000"><div class="language-id">ts</div><div class='code-container'><code><div class='line'><span style="color: #0000FF">type</span><span style="color: #000000"> </span><span style="color: #267F99"><data-lsp lsp='type Is = &lt;T>(valueA: T, valueB: T) => boolean' >Is</data-lsp></span><span style="color: #000000"> = &lt;</span><span style="color: #267F99"><data-lsp lsp='(type parameter) T in &lt;T>(valueA: T, valueB: T): boolean' >T</data-lsp></span><span style="color: #000000">&gt;(</span><span style="color: #001080"><data-lsp lsp='(parameter) valueA: T' >valueA</data-lsp></span><span style="color: #000000">: </span><span style="color: #267F99"><data-lsp lsp='(type parameter) T in &lt;T>(valueA: T, valueB: T): boolean' >T</data-lsp></span><span style="color: #000000">, </span><span style="color: #001080"><data-lsp lsp='(parameter) valueB: T' >valueB</data-lsp></span><span style="color: #000000">: </span><span style="color: #267F99"><data-lsp lsp='(type parameter) T in &lt;T>(valueA: T, valueB: T): boolean' >T</data-lsp></span><span style="color: #000000">) </span><span style="color: #0000FF">=&gt;</span><span style="color: #000000"> </span><span style="color: #267F99">boolean</span><span style="color: #000000">;</span></div><div class='line'><span style="color: #0000FF">const</span><span style="color: #000000"> </span><span style="color: #795E26"><data-lsp lsp='const is: Is' >is</data-lsp></span><span style="color: #000000">: </span><span style="color: #267F99"><data-lsp lsp='type Is = &lt;T>(valueA: T, valueB: T) => boolean' >Is</data-lsp></span><span style="color: #000000"> = (</span><span style="color: #001080"><data-lsp lsp='(parameter) a: T' >a</data-lsp></span><span style="color: #000000">, </span><span style="color: #001080"><data-lsp lsp='(parameter) b: T' >b</data-lsp></span><span style="color: #000000">) </span><span style="color: #0000FF">=&gt;</span><span style="color: #000000"> {</span></div><div class='line'><span style="color: #000000">  </span><span style="color: #AF00DB">return</span><span style="color: #000000"> </span><span style="color: #001080"><data-lsp lsp='(parameter) a: T' >a</data-lsp></span><span style="color: #000000"> === </span><span style="color: #001080"><data-lsp lsp='(parameter) b: T' >b</data-lsp></span><span style="color: #000000">;</span></div><div class='line'><span style="color: #000000">};</span></div><div class='line'><span style="color: #0000FF">const</span><span style="color: #000000"> </span><span style="color: #0070C1"><data-lsp lsp='const equal: boolean' >equal</data-lsp></span><span style="color: #000000"> = </span><span style="color: #795E26"><data-lsp lsp='const is: &lt;string>(valueA: string, valueB: string) => boolean' >is</data-lsp></span><span style="color: #000000">(</span><span style="color: #A31515">"a"</span><span style="color: #000000">, </span><span style="color: #A31515">"b"</span><span style="color: #000000">);</span></div><div class='line'><span style="color: #0000FF">const</span><span style="color: #000000"> </span><span style="color: #0070C1"><data-lsp lsp='const equal2: boolean' >equal2</data-lsp></span><span style="color: #000000"> = </span><span style="color: #795E26"><data-lsp lsp='const is: &lt;number>(valueA: number, valueB: number) => boolean' >is</data-lsp></span><span style="color: #000000">(</span><span style="color: #098658">1</span><span style="color: #000000">, </span><span style="color: #098658">2</span><span style="color: #000000">);</span></div><div class='line'><span style="color: #0000FF">const</span><span style="color: #000000"> </span><span style="color: #0070C1"><data-lsp lsp='const err: boolean' >err</data-lsp></span><span style="color: #000000"> = </span><span style="color: #795E26"><data-lsp lsp='const is: &lt;string>(valueA: string, valueB: string) => boolean' >is</data-lsp></span><span style="color: #000000">(</span><span style="color: #A31515">"1"</span><span style="color: #000000">, </span><span style="color: #098658"><data-err>2</data-err></span><span style="color: #000000">);</span></div><span class="error"><span>Argument of type 'number' is not assignable to parameter of type 'string'.</span><span class="code">2345</span></span><span class="error-behind">Argument of type 'number' is not assignable to parameter of type 'string'.</span><div class='line'>&nbsp;</div><div class='line'><span style="color: #0000FF">type</span><span style="color: #000000"> </span><span style="color: #267F99"><data-lsp lsp='type MultiplyIs = &lt;T>(...args: T[]) => boolean' >MultiplyIs</data-lsp></span><span style="color: #000000"> = &lt;</span><span style="color: #267F99"><data-lsp lsp='(type parameter) T in &lt;T>(...args: T[]): boolean' >T</data-lsp></span><span style="color: #000000">&gt;(...</span><span style="color: #001080"><data-lsp lsp='(parameter) args: T[]' >args</data-lsp></span><span style="color: #000000">: </span><span style="color: #267F99"><data-lsp lsp='(type parameter) T in &lt;T>(...args: T[]): boolean' >T</data-lsp></span><span style="color: #000000">[]) </span><span style="color: #0000FF">=&gt;</span><span style="color: #000000"> </span><span style="color: #267F99">boolean</span><span style="color: #000000">;</span></div><div class='line'><span style="color: #0000FF">const</span><span style="color: #000000"> </span><span style="color: #795E26"><data-lsp lsp='const multiplyIs: MultiplyIs' >multiplyIs</data-lsp></span><span style="color: #000000">: </span><span style="color: #267F99"><data-lsp lsp='type MultiplyIs = &lt;T>(...args: T[]) => boolean' >MultiplyIs</data-lsp></span><span style="color: #000000"> = (...</span><span style="color: #001080"><data-lsp lsp='(parameter) args: T[]' >args</data-lsp></span><span style="color: #000000">) </span><span style="color: #0000FF">=&gt;</span><span style="color: #000000"> {</span></div><div class='line'><span style="color: #000000">  </span><span style="color: #AF00DB">for</span><span style="color: #000000"> (</span><span style="color: #0000FF">let</span><span style="color: #000000"> </span><span style="color: #001080"><data-lsp lsp='let i: number' >i</data-lsp></span><span style="color: #000000"> = </span><span style="color: #098658">1</span><span style="color: #000000">, </span><span style="color: #001080"><data-lsp lsp='let len: number' >len</data-lsp></span><span style="color: #000000"> = </span><span style="color: #001080"><data-lsp lsp='(parameter) args: T[]' >args</data-lsp></span><span style="color: #000000">.</span><span style="color: #001080"><data-lsp lsp='(property) Array&lt;T>.length: number' >length</data-lsp></span><span style="color: #000000">; </span><span style="color: #001080"><data-lsp lsp='let i: number' >i</data-lsp></span><span style="color: #000000"> &lt; </span><span style="color: #001080"><data-lsp lsp='let len: number' >len</data-lsp></span><span style="color: #000000">; </span><span style="color: #001080"><data-lsp lsp='let i: number' >i</data-lsp></span><span style="color: #000000">++) {</span></div><div class='line'><span style="color: #000000">    </span><span style="color: #AF00DB">if</span><span style="color: #000000"> (</span><span style="color: #001080"><data-lsp lsp='(parameter) args: T[]' >args</data-lsp></span><span style="color: #000000">[</span><span style="color: #001080"><data-lsp lsp='let i: number' >i</data-lsp></span><span style="color: #000000">] !== </span><span style="color: #001080"><data-lsp lsp='(parameter) args: T[]' >args</data-lsp></span><span style="color: #000000">[</span><span style="color: #001080"><data-lsp lsp='let i: number' >i</data-lsp></span><span style="color: #000000"> - </span><span style="color: #098658">1</span><span style="color: #000000">]) {</span></div><div class='line'><span style="color: #000000">      </span><span style="color: #AF00DB">return</span><span style="color: #000000"> </span><span style="color: #0000FF">false</span><span style="color: #000000">;</span></div><div class='line'><span style="color: #000000">    }</span></div><div class='line'><span style="color: #000000">  }</span></div><div class='line'><span style="color: #000000">  </span><span style="color: #AF00DB">return</span><span style="color: #000000"> </span><span style="color: #0000FF">true</span><span style="color: #000000">;</span></div><div class='line'><span style="color: #000000">  </span><span style="color: #008000">// 另一种不好读的方式</span></div><div class='line'><span style="color: #000000">  </span><span style="color: #008000">// args.reduce((accumulator, current, index) =&gt; {</span></div><div class='line'><span style="color: #000000">  </span><span style="color: #008000">//   if (index !== 0 && current !== args[index - 1]) {</span></div><div class='line'><span style="color: #000000">  </span><span style="color: #008000">//     return false;</span></div><div class='line'><span style="color: #000000">  </span><span style="color: #008000">//   }</span></div><div class='line'><span style="color: #000000">  </span><span style="color: #008000">//   return accumulator;</span></div><div class='line'><span style="color: #000000">  </span><span style="color: #008000">// }, true)</span></div><div class='line'><span style="color: #000000">};</span></div><div class='line'>&nbsp;</div><div class='line'><span style="color: #0000FF">const</span><span style="color: #000000"> </span><span style="color: #0070C1"><data-lsp lsp='const mEqual: boolean' >mEqual</data-lsp></span><span style="color: #000000"> = </span><span style="color: #795E26"><data-lsp lsp='const multiplyIs: &lt;string>(...args: string[]) => boolean' >multiplyIs</data-lsp></span><span style="color: #000000">([</span><span style="color: #098658">1</span><span style="color: #000000">], </span><span style="color: #A31515">""</span><span style="color: #000000">, [</span><span style="color: #098658">1</span><span style="color: #000000">, </span><span style="color: #098658">2</span><span style="color: #000000">, </span><span style="color: #098658">3</span><span style="color: #000000">]);</span></div><span class="error"><span>Argument of type 'number[]' is not assignable to parameter of type 'string'.</span><span class="code">2345</span></span><span class="error-behind">Argument of type 'number[]' is not assignable to parameter of type 'string'.</span></code></div></pre>`;
  return (
    <div
      className="markdown-body"
      dangerouslySetInnerHTML={{ __html: innerHTML }}
    />
  );
}

export function Chapter5ClassInterface() {
  const innerHTML = `<h1>Chapter 5: 类和接口</h1>
<p>关键词：</p>
<ul>
<li><code>public</code> / <code>private</code> / <code>protected</code></li>
<li><code>readonly</code></li>
<li><code>abstract</code></li>
</ul>
<pre class="shiki light-plus twoslash lsp" style="background-color: #FFFFFF; color: #000000"><div class="language-id">ts</div><div class='code-container'><code><div class='line'><span style="color: #0000FF">class</span><span style="color: #000000"> </span><span style="color: #267F99"><data-lsp lsp='class Piece' >Piece</data-lsp></span><span style="color: #000000"> {</span></div><div class='line'><span style="color: #000000"> </span><span style="color: #0000FF">public</span><span style="color: #000000"> </span><span style="color: #001080"><data-lsp lsp='(property) Piece.position: {&#10;    x: number;&#10;    y: number;&#10;}' >position</data-lsp></span><span style="color: #000000">: { </span><span style="color: #001080"><data-lsp lsp='(property) x: number' >x</data-lsp></span><span style="color: #000000">: </span><span style="color: #267F99">number</span><span style="color: #000000">; </span><span style="color: #001080"><data-lsp lsp='(property) y: number' >y</data-lsp></span><span style="color: #000000">: </span><span style="color: #267F99">number</span><span style="color: #000000"> };</span></div><div class='line'><span style="color: #000000"> </span><span style="color: #0000FF">constructor</span><span style="color: #000000">(</span><span style="color: #0000FF">private</span><span style="color: #000000"> </span><span style="color: #0000FF">readonly</span><span style="color: #000000"> </span><span style="color: #001080"><data-lsp lsp='(property) Piece.color: string' >color</data-lsp></span><span style="color: #000000">: </span><span style="color: #267F99">string</span><span style="color: #000000">) {</span></div><div class='line'><span style="color: #000000">   </span><span style="color: #0000FF">this</span><span style="color: #000000">.</span><span style="color: #001080"><data-lsp lsp='(property) Piece.position: {&#10;    x: number;&#10;    y: number;&#10;}' >position</data-lsp></span><span style="color: #000000"> = { </span><span style="color: #001080"><data-lsp lsp='(property) x: number' >x</data-lsp>:</span><span style="color: #000000"> </span><span style="color: #098658">0</span><span style="color: #000000">, </span><span style="color: #001080"><data-lsp lsp='(property) y: number' >y</data-lsp>:</span><span style="color: #000000"> </span><span style="color: #098658">0</span><span style="color: #000000"> };</span></div><div class='line'><span style="color: #000000"> }</span></div><div class='line'><span style="color: #000000">}</span></div><div class='line'><span style="color: #0000FF">const</span><span style="color: #000000"> </span><span style="color: #0070C1"><data-lsp lsp='const piece: Piece' >piece</data-lsp></span><span style="color: #000000"> = </span><span style="color: #0000FF">new</span><span style="color: #000000"> </span><span style="color: #795E26"><data-lsp lsp='constructor Piece(color: string): Piece' >Piece</data-lsp></span><span style="color: #000000">(</span><span style="color: #A31515">"red"</span><span style="color: #000000">);</span></div></code></div></pre>
<p><code>type</code> 和 <code>interface</code> 是同一概念的两种句法，但有细微区别（P114）</p>
<ol>
<li>type 更通用，interface 则必须为结构</li>
<li>interface 扩展时会检查是否可赋值，type 则不会</li>
<li>同一命名空间下的同名 interface 会合并，type 则会导致冲突</li>
</ol>
<pre class="shiki light-plus twoslash lsp" style="background-color: #FFFFFF; color: #000000"><div class="language-id">ts</div><div class='code-container'><code><div class='line'><span style="color: #0000FF">type</span><span style="color: #000000"> </span><span style="color: #267F99"><data-lsp lsp='type Char = "a" | "b" | "c"' >Char</data-lsp></span><span style="color: #000000"> = </span><span style="color: #A31515">"a"</span><span style="color: #000000"> | </span><span style="color: #A31515">"b"</span><span style="color: #000000"> | </span><span style="color: #A31515">"c"</span><span style="color: #000000">;</span></div><div class='line'><span style="color: #008000">// interface IChar = &apos;a&apos; | &apos;b&apos; | &apos;c&apos;;  -&gt; error</span></div><div class='line'><span style="color: #0000FF">interface</span><span style="color: #000000"> </span><span style="color: #267F99"><data-lsp lsp='interface InterfaceA' >InterfaceA</data-lsp></span><span style="color: #000000"> {</span></div><div class='line'><span style="color: #000000">  </span><span style="color: #001080"><data-lsp lsp='(property) InterfaceA.value: string' >value</data-lsp></span><span style="color: #000000">: </span><span style="color: #267F99">string</span><span style="color: #000000">;</span></div><div class='line'><span style="color: #000000">}</span></div><div class='line'><span style="color: #008000">// error</span></div><div class='line'><span style="color: #0000FF">interface</span><span style="color: #000000"> </span><span style="color: #267F99"><data-err><data-lsp lsp='interface InterfaceB' >InterfaceB</data-lsp></data-err></span><span style="color: #000000"> </span><span style="color: #0000FF">extends</span><span style="color: #000000"> </span><span style="color: #267F99"><data-lsp lsp='interface InterfaceA' >InterfaceA</data-lsp></span><span style="color: #000000"> {</span></div><span class="error"><span>Interface 'InterfaceB' incorrectly extends interface 'InterfaceA'.
  Types of property 'value' are incompatible.
    Type 'number' is not assignable to type 'string'.</span><span class="code">2430</span></span><span class="error-behind">Interface 'InterfaceB' incorrectly extends interface 'InterfaceA'.
  Types of property 'value' are incompatible.
    Type 'number' is not assignable to type 'string'.</span><div class='line'><span style="color: #000000">  </span><span style="color: #001080"><data-lsp lsp='(property) InterfaceB.value: number' >value</data-lsp></span><span style="color: #000000">: </span><span style="color: #267F99">number</span><span style="color: #000000">;</span></div><div class='line'><span style="color: #000000">}</span></div><div class='line'><span style="color: #008000">// 两个 InterfaceA 并不冲突，而是会合并</span></div><div class='line'><span style="color: #0000FF">interface</span><span style="color: #000000"> </span><span style="color: #267F99"><data-lsp lsp='interface InterfaceA' >InterfaceA</data-lsp></span><span style="color: #000000"> {</span></div><div class='line'><span style="color: #000000">  </span><span style="color: #001080"><data-lsp lsp='(property) InterfaceA.name: string' >name</data-lsp></span><span style="color: #000000">: </span><span style="color: #267F99">string</span><span style="color: #000000">;</span></div><div class='line'><span style="color: #000000">}</span></div></code></div></pre>
<p><code>interface</code> 也可以 <code>readonly</code>，但是不可以有 <code>public</code> / <code>private</code> / <code>protected</code> 修饰符</p>
<pre class="shiki light-plus twoslash lsp" style="background-color: #FFFFFF; color: #000000"><div class="language-id">ts</div><div class='code-container'><code><div class='line'><span style="color: #0000FF">interface</span><span style="color: #000000"> </span><span style="color: #267F99"><data-lsp lsp='interface Animal' >Animal</data-lsp></span><span style="color: #000000"> {</span></div><div class='line'><span style="color: #000000">  </span><span style="color: #0000FF">readonly</span><span style="color: #000000"> </span><span style="color: #001080"><data-lsp lsp='(property) Animal.name: string' >name</data-lsp></span><span style="color: #000000">: </span><span style="color: #267F99">string</span><span style="color: #000000">;</span></div><div class='line'><span style="color: #000000">}</span></div><div class='line'><span style="color: #0000FF">const</span><span style="color: #000000"> </span><span style="color: #0070C1"><data-lsp lsp='const cat: Animal' >cat</data-lsp></span><span style="color: #000000">: </span><span style="color: #267F99"><data-lsp lsp='interface Animal' >Animal</data-lsp></span><span style="color: #000000"> = { </span><span style="color: #001080"><data-lsp lsp='(property) Animal.name: string' >name</data-lsp>:</span><span style="color: #000000"> </span><span style="color: #A31515">"cat"</span><span style="color: #000000"> };</span></div><div class='line'><span style="color: #001080"><data-lsp lsp='const cat: Animal' >cat</data-lsp></span><span style="color: #000000">.</span><span style="color: #001080"><data-err><data-lsp lsp='(property) Animal.name: any' >name</data-lsp></data-err></span><span style="color: #000000"> = </span><span style="color: #A31515">""</span><span style="color: #000000">;</span></div><span class="error"><span>Cannot assign to 'name' because it is a read-only property.</span><span class="code">2540</span></span><span class="error-behind">Cannot assign to 'name' because it is a read-only property.</span></code></div></pre>
<p>值和类型位于不同的命名空间中，不会冲突</p>
<pre class="shiki light-plus twoslash lsp" style="background-color: #FFFFFF; color: #000000"><div class="language-id">ts</div><div class='code-container'><code><div class='line'><span style="color: #0000FF">let</span><span style="color: #000000"> </span><span style="color: #001080"><data-lsp lsp='let value: string' >value</data-lsp></span><span style="color: #000000"> = </span><span style="color: #A31515">"1"</span><span style="color: #000000">;</span></div><div class='line'><span style="color: #0000FF">type</span><span style="color: #000000"> </span><span style="color: #267F99"><data-lsp lsp='type value = string' >value</data-lsp></span><span style="color: #000000"> = </span><span style="color: #267F99">string</span><span style="color: #000000">;</span></div></code></div></pre>
<p>类声明会在类空间生成两个声明（P123）</p>
<ol>
<li>类的实例类型</li>
<li>类的构造方法类型，<code>keyof</code> ClassName 获得</li>
</ol>
<p>typeof 运算符还需要继续学习</p>
<pre class="shiki light-plus twoslash lsp" style="background-color: #FFFFFF; color: #000000"><div class="language-id">ts</div><div class='code-container'><code><div class='line'><span style="color: #0000FF">type</span><span style="color: #000000"> </span><span style="color: #267F99"><data-lsp lsp='type State = {&#10;    [key: string]: string;&#10;}' >State</data-lsp></span><span style="color: #000000"> = {</span></div><div class='line'><span style="color: #000000">  [</span><span style="color: #001080"><data-lsp lsp='(parameter) key: string' >key</data-lsp></span><span style="color: #000000">: </span><span style="color: #267F99">string</span><span style="color: #000000">]: </span><span style="color: #267F99">string</span><span style="color: #000000">;</span></div><div class='line'><span style="color: #000000">};</span></div><div class='line'>&nbsp;</div><div class='line'><span style="color: #0000FF">class</span><span style="color: #000000"> </span><span style="color: #267F99"><data-lsp lsp='class StringDataBase' >StringDataBase</data-lsp></span><span style="color: #000000"> {</span></div><div class='line'><span style="color: #000000">  </span><span style="color: #001080"><data-lsp lsp='(property) StringDataBase.state: State' >state</data-lsp></span><span style="color: #000000">: </span><span style="color: #267F99"><data-lsp lsp='type State = {&#10;    [key: string]: string;&#10;}' >State</data-lsp></span><span style="color: #000000"> = {};</span></div><div class='line'><span style="color: #000000">  </span><span style="color: #008000">// get 无法推导出返回值可能是 null (why?)，手动声明返回值类型</span></div><div class='line'><span style="color: #000000">  </span><span style="color: #795E26"><data-lsp lsp='(method) StringDataBase.get(key: string): string | null' >get</data-lsp></span><span style="color: #000000">(</span><span style="color: #001080"><data-lsp lsp='(parameter) key: string' >key</data-lsp></span><span style="color: #000000">: </span><span style="color: #267F99">string</span><span style="color: #000000">): </span><span style="color: #267F99">string</span><span style="color: #000000"> | </span><span style="color: #267F99">null</span><span style="color: #000000"> {</span></div><div class='line'><span style="color: #000000">    </span><span style="color: #AF00DB">return</span><span style="color: #000000"> </span><span style="color: #0000FF">this</span><span style="color: #000000">.</span><span style="color: #001080"><data-lsp lsp='(property) StringDataBase.state: State' >state</data-lsp></span><span style="color: #000000">[</span><span style="color: #001080"><data-lsp lsp='(parameter) key: string' >key</data-lsp></span><span style="color: #000000">] || </span><span style="color: #0000FF">null</span><span style="color: #000000">;</span></div><div class='line'><span style="color: #000000">  }</span></div><div class='line'><span style="color: #000000">  </span><span style="color: #795E26"><data-lsp lsp='(method) StringDataBase.set(key: string, value: string): void' >set</data-lsp></span><span style="color: #000000">(</span><span style="color: #001080"><data-lsp lsp='(parameter) key: string' >key</data-lsp></span><span style="color: #000000">: </span><span style="color: #267F99">string</span><span style="color: #000000">, </span><span style="color: #001080"><data-lsp lsp='(parameter) value: string' >value</data-lsp></span><span style="color: #000000">: </span><span style="color: #267F99">string</span><span style="color: #000000">) {</span></div><div class='line'><span style="color: #000000">    </span><span style="color: #0000FF">this</span><span style="color: #000000">.</span><span style="color: #001080"><data-lsp lsp='(property) StringDataBase.state: State' >state</data-lsp></span><span style="color: #000000">[</span><span style="color: #001080"><data-lsp lsp='(parameter) key: string' >key</data-lsp></span><span style="color: #000000">] = </span><span style="color: #001080"><data-lsp lsp='(parameter) value: string' >value</data-lsp></span><span style="color: #000000">;</span></div><div class='line'><span style="color: #000000">  }</span></div><div class='line'><span style="color: #000000">  </span><span style="color: #0000FF">static</span><span style="color: #000000"> </span><span style="color: #795E26"><data-lsp lsp='(method) StringDataBase.from(state: State): StringDataBase' >from</data-lsp></span><span style="color: #000000">(</span><span style="color: #001080"><data-lsp lsp='(parameter) state: State' >state</data-lsp></span><span style="color: #000000">: </span><span style="color: #267F99"><data-lsp lsp='type State = {&#10;    [key: string]: string;&#10;}' >State</data-lsp></span><span style="color: #000000">) {</span></div><div class='line'><span style="color: #000000">    </span><span style="color: #0000FF">const</span><span style="color: #000000"> </span><span style="color: #0070C1"><data-lsp lsp='const db: StringDataBase' >db</data-lsp></span><span style="color: #000000"> = </span><span style="color: #0000FF">new</span><span style="color: #000000"> </span><span style="color: #795E26"><data-lsp lsp='constructor StringDataBase(): StringDataBase' >StringDataBase</data-lsp></span><span style="color: #000000">();</span></div><div class='line'><span style="color: #000000">    </span><span style="color: #001080"><data-lsp lsp='const db: StringDataBase' >db</data-lsp></span><span style="color: #000000">.</span><span style="color: #001080"><data-lsp lsp='(property) StringDataBase.state: State' >state</data-lsp></span><span style="color: #000000"> = </span><span style="color: #001080"><data-lsp lsp='(parameter) state: State' >state</data-lsp></span><span style="color: #000000">;</span></div><div class='line'><span style="color: #000000">    </span><span style="color: #AF00DB">return</span><span style="color: #000000"> </span><span style="color: #001080"><data-lsp lsp='const db: StringDataBase' >db</data-lsp></span><span style="color: #000000">;</span></div><div class='line'><span style="color: #000000">  }</span></div><div class='line'><span style="color: #000000">}</span></div><div class='line'><span style="color: #008000">// type StringDataBaseType = typeof StringDataBase;</span></div></code></div></pre>
<p>Exercise 4（GitHub 上的答案）:</p>
<p>4 . [Hard] As an exercise, think about how you might design a typesafe builder pattern.
Extend the Builder pattern Builder Pattern example from earlier in this chapter to:</p>
<p>4a. Guarantee at compile time that someone can’t call .send() before setting at least URL
and method. Would it be easier to make this guarantee if you also force the user to call
methods in a specific order? (Hint: what can you return instead of this?)</p>
<pre class="shiki light-plus twoslash lsp" style="background-color: #FFFFFF; color: #000000"><div class="language-id">ts</div><div class='code-container'><code><div class='line'><span style="color: #0000FF">class</span><span style="color: #000000"> </span><span style="color: #267F99"><data-lsp lsp='class RequestBuilder' >RequestBuilder</data-lsp></span><span style="color: #000000"> {</span></div><div class='line'><span style="color: #000000">  </span><span style="color: #0000FF">protected</span><span style="color: #000000"> </span><span style="color: #001080"><data-lsp lsp='(property) RequestBuilder.data: object | null' >data</data-lsp></span><span style="color: #000000">: </span><span style="color: #267F99">object</span><span style="color: #000000"> | </span><span style="color: #267F99">null</span><span style="color: #000000"> = </span><span style="color: #0000FF">null</span><span style="color: #000000">;</span></div><div class='line'><span style="color: #000000">  </span><span style="color: #0000FF">protected</span><span style="color: #000000"> </span><span style="color: #001080"><data-lsp lsp='(property) RequestBuilder.method: "get" | "post" | null' >method</data-lsp></span><span style="color: #000000">: </span><span style="color: #A31515">"get"</span><span style="color: #000000"> | </span><span style="color: #A31515">"post"</span><span style="color: #000000"> | </span><span style="color: #267F99">null</span><span style="color: #000000"> = </span><span style="color: #0000FF">null</span><span style="color: #000000">;</span></div><div class='line'><span style="color: #000000">  </span><span style="color: #0000FF">protected</span><span style="color: #000000"> </span><span style="color: #001080"><data-lsp lsp='(property) RequestBuilder.url: string | null' >url</data-lsp></span><span style="color: #000000">: </span><span style="color: #267F99">string</span><span style="color: #000000"> | </span><span style="color: #267F99">null</span><span style="color: #000000"> = </span><span style="color: #0000FF">null</span><span style="color: #000000">;</span></div><div class='line'>&nbsp;</div><div class='line'><span style="color: #000000">  </span><span style="color: #795E26"><data-lsp lsp='(method) RequestBuilder.setMethod(method: "get" | "post"): RequestBuilderWithMethod' >setMethod</data-lsp></span><span style="color: #000000">(</span><span style="color: #001080"><data-lsp lsp='(parameter) method: "get" | "post"' >method</data-lsp></span><span style="color: #000000">: </span><span style="color: #A31515">"get"</span><span style="color: #000000"> | </span><span style="color: #A31515">"post"</span><span style="color: #000000">): </span><span style="color: #267F99"><data-lsp lsp='class RequestBuilderWithMethod' >RequestBuilderWithMethod</data-lsp></span><span style="color: #000000"> {</span></div><div class='line'><span style="color: #000000">    </span><span style="color: #AF00DB">return</span><span style="color: #000000"> </span><span style="color: #0000FF">new</span><span style="color: #000000"> </span><span style="color: #795E26"><data-lsp lsp='constructor RequestBuilderWithMethod(): RequestBuilderWithMethod' >RequestBuilderWithMethod</data-lsp></span><span style="color: #000000">().</span><span style="color: #795E26"><data-lsp lsp='(method) RequestBuilderWithMethod.setMethod(method: "get" | "post" | null): RequestBuilderWithMethod' >setMethod</data-lsp></span><span style="color: #000000">(</span><span style="color: #001080"><data-lsp lsp='(parameter) method: "get" | "post"' >method</data-lsp></span><span style="color: #000000">).</span><span style="color: #795E26"><data-lsp lsp='(method) RequestBuilder.setData(data: object | null): RequestBuilderWithMethod' >setData</data-lsp></span><span style="color: #000000">(</span><span style="color: #0000FF">this</span><span style="color: #000000">.</span><span style="color: #001080"><data-lsp lsp='(property) RequestBuilder.data: object | null' >data</data-lsp></span><span style="color: #000000">);</span></div><div class='line'><span style="color: #000000">  }</span></div><div class='line'><span style="color: #000000">  </span><span style="color: #795E26"><data-lsp lsp='(method) RequestBuilder.setData(data: object | null): this' >setData</data-lsp></span><span style="color: #000000">(</span><span style="color: #001080"><data-lsp lsp='(parameter) data: object | null' >data</data-lsp></span><span style="color: #000000">: </span><span style="color: #267F99">object</span><span style="color: #000000"> | </span><span style="color: #267F99">null</span><span style="color: #000000">): </span><span style="color: #267F99">this</span><span style="color: #000000"> {</span></div><div class='line'><span style="color: #000000">    </span><span style="color: #0000FF">this</span><span style="color: #000000">.</span><span style="color: #001080"><data-lsp lsp='(property) RequestBuilder.data: object | null' >data</data-lsp></span><span style="color: #000000"> = </span><span style="color: #001080"><data-lsp lsp='(parameter) data: object | null' >data</data-lsp></span><span style="color: #000000">;</span></div><div class='line'><span style="color: #000000">    </span><span style="color: #AF00DB">return</span><span style="color: #000000"> </span><span style="color: #0000FF">this</span><span style="color: #000000">;</span></div><div class='line'><span style="color: #000000">  }</span></div><div class='line'><span style="color: #000000">}</span></div><div class='line'>&nbsp;</div><div class='line'><span style="color: #0000FF">class</span><span style="color: #000000"> </span><span style="color: #267F99"><data-lsp lsp='class RequestBuilderWithMethod' >RequestBuilderWithMethod</data-lsp></span><span style="color: #000000"> </span><span style="color: #0000FF">extends</span><span style="color: #000000"> </span><span style="color: #267F99"><data-lsp lsp='class RequestBuilder' >RequestBuilder</data-lsp></span><span style="color: #000000"> {</span></div><div class='line'><span style="color: #000000">  </span><span style="color: #795E26"><data-lsp lsp='(method) RequestBuilderWithMethod.setMethod(method: "get" | "post" | null): this' >setMethod</data-lsp></span><span style="color: #000000">(</span><span style="color: #001080"><data-lsp lsp='(parameter) method: "get" | "post" | null' >method</data-lsp></span><span style="color: #000000">: </span><span style="color: #A31515">"get"</span><span style="color: #000000"> | </span><span style="color: #A31515">"post"</span><span style="color: #000000"> | </span><span style="color: #267F99">null</span><span style="color: #000000">): </span><span style="color: #267F99">this</span><span style="color: #000000"> {</span></div><div class='line'><span style="color: #000000">    </span><span style="color: #0000FF">this</span><span style="color: #000000">.</span><span style="color: #001080"><data-lsp lsp='(property) RequestBuilder.method: "get" | "post" | null' >method</data-lsp></span><span style="color: #000000"> = </span><span style="color: #001080"><data-lsp lsp='(parameter) method: "get" | "post" | null' >method</data-lsp></span><span style="color: #000000">;</span></div><div class='line'><span style="color: #000000">    </span><span style="color: #AF00DB">return</span><span style="color: #000000"> </span><span style="color: #0000FF">this</span><span style="color: #000000">;</span></div><div class='line'><span style="color: #000000">  }</span></div><div class='line'><span style="color: #000000">  </span><span style="color: #795E26"><data-lsp lsp='(method) RequestBuilderWithMethod.setURL(url: string): RequestBuilderWithMethodAndURL' >setURL</data-lsp></span><span style="color: #000000">(</span><span style="color: #001080"><data-lsp lsp='(parameter) url: string' >url</data-lsp></span><span style="color: #000000">: </span><span style="color: #267F99">string</span><span style="color: #000000">): </span><span style="color: #267F99"><data-lsp lsp='class RequestBuilderWithMethodAndURL' >RequestBuilderWithMethodAndURL</data-lsp></span><span style="color: #000000"> {</span></div><div class='line'><span style="color: #000000">    </span><span style="color: #AF00DB">return</span><span style="color: #000000"> </span><span style="color: #0000FF">new</span><span style="color: #000000"> </span><span style="color: #795E26"><data-lsp lsp='constructor RequestBuilderWithMethodAndURL(): RequestBuilderWithMethodAndURL' >RequestBuilderWithMethodAndURL</data-lsp></span><span style="color: #000000">()</span></div><div class='line'><span style="color: #000000">      .</span><span style="color: #795E26"><data-lsp lsp='(method) RequestBuilderWithMethod.setMethod(method: "get" | "post" | null): RequestBuilderWithMethodAndURL' >setMethod</data-lsp></span><span style="color: #000000">(</span><span style="color: #0000FF">this</span><span style="color: #000000">.</span><span style="color: #001080"><data-lsp lsp='(property) RequestBuilder.method: "get" | "post" | null' >method</data-lsp></span><span style="color: #000000">)</span></div><div class='line'><span style="color: #000000">      .</span><span style="color: #795E26"><data-lsp lsp='(method) RequestBuilderWithMethodAndURL.setURL(url: string): RequestBuilderWithMethodAndURL' >setURL</data-lsp></span><span style="color: #000000">(</span><span style="color: #001080"><data-lsp lsp='(parameter) url: string' >url</data-lsp></span><span style="color: #000000">)</span></div><div class='line'><span style="color: #000000">      .</span><span style="color: #795E26"><data-lsp lsp='(method) RequestBuilder.setData(data: object | null): RequestBuilderWithMethodAndURL' >setData</data-lsp></span><span style="color: #000000">(</span><span style="color: #0000FF">this</span><span style="color: #000000">.</span><span style="color: #001080"><data-lsp lsp='(property) RequestBuilder.data: object | null' >data</data-lsp></span><span style="color: #000000">);</span></div><div class='line'><span style="color: #000000">  }</span></div><div class='line'><span style="color: #000000">}</span></div><div class='line'>&nbsp;</div><div class='line'><span style="color: #0000FF">class</span><span style="color: #000000"> </span><span style="color: #267F99"><data-lsp lsp='class RequestBuilderWithMethodAndURL' >RequestBuilderWithMethodAndURL</data-lsp></span><span style="color: #000000"> </span><span style="color: #0000FF">extends</span><span style="color: #000000"> </span><span style="color: #267F99"><data-lsp lsp='class RequestBuilderWithMethod' >RequestBuilderWithMethod</data-lsp></span><span style="color: #000000"> {</span></div><div class='line'><span style="color: #000000">  </span><span style="color: #795E26"><data-lsp lsp='(method) RequestBuilderWithMethodAndURL.setURL(url: string): this' >setURL</data-lsp></span><span style="color: #000000">(</span><span style="color: #001080"><data-lsp lsp='(parameter) url: string' >url</data-lsp></span><span style="color: #000000">: </span><span style="color: #267F99">string</span><span style="color: #000000">): </span><span style="color: #267F99">this</span><span style="color: #000000"> {</span></div><div class='line'><span style="color: #000000">    </span><span style="color: #0000FF">this</span><span style="color: #000000">.</span><span style="color: #001080"><data-lsp lsp='(property) RequestBuilder.url: string | null' >url</data-lsp></span><span style="color: #000000"> = </span><span style="color: #001080"><data-lsp lsp='(parameter) url: string' >url</data-lsp></span><span style="color: #000000">;</span></div><div class='line'><span style="color: #000000">    </span><span style="color: #AF00DB">return</span><span style="color: #000000"> </span><span style="color: #0000FF">this</span><span style="color: #000000">;</span></div><div class='line'><span style="color: #000000">  }</span></div><div class='line'><span style="color: #000000">  </span><span style="color: #795E26"><data-lsp lsp='(method) RequestBuilderWithMethodAndURL.send(): void' >send</data-lsp></span><span style="color: #000000">() {</span></div><div class='line'><span style="color: #000000">    </span><span style="color: #008000">// ...</span></div><div class='line'><span style="color: #000000">  }</span></div><div class='line'><span style="color: #000000">}</span></div><div class='line'>&nbsp;</div><div class='line'><span style="color: #0000FF">new</span><span style="color: #000000"> </span><span style="color: #795E26"><data-lsp lsp='constructor RequestBuilder(): RequestBuilder' >RequestBuilder</data-lsp></span><span style="color: #000000">().</span><span style="color: #795E26"><data-lsp lsp='(method) RequestBuilder.setMethod(method: "get" | "post"): RequestBuilderWithMethod' >setMethod</data-lsp></span><span style="color: #000000">(</span><span style="color: #A31515">"get"</span><span style="color: #000000">).</span><span style="color: #795E26"><data-lsp lsp='(method) RequestBuilder.setData(data: object | null): this' >setData</data-lsp></span><span style="color: #000000">({}).</span><span style="color: #795E26"><data-lsp lsp='(method) RequestBuilderWithMethod.setURL(url: string): RequestBuilderWithMethodAndURL' >setURL</data-lsp></span><span style="color: #000000">(</span><span style="color: #A31515">"foo.com"</span><span style="color: #000000">).</span><span style="color: #795E26"><data-lsp lsp='(method) RequestBuilderWithMethodAndURL.send(): void' >send</data-lsp></span><span style="color: #000000">();</span></div></code></div></pre>
<p>4b. [Harder] How would you change your design if you wanted to make this guarantee, but still let people call methods in any order?</p>
<p>(This answer courtesy of @albertywu)</p>
<pre class="shiki light-plus twoslash lsp" style="background-color: #FFFFFF; color: #000000"><div class="language-id">ts</div><div class='code-container'><code><div class='line'><span style="color: #0000FF">interface</span><span style="color: #000000"> </span><span style="color: #267F99"><data-lsp lsp='interface BuildableRequest' >BuildableRequest</data-lsp></span><span style="color: #000000"> {</span></div><div class='line'><span style="color: #000000">  </span><span style="color: #001080"><data-lsp lsp='(property) BuildableRequest.data?: object | undefined' >data</data-lsp></span><span style="color: #000000">?: </span><span style="color: #267F99">object</span><span style="color: #000000">;</span></div><div class='line'><span style="color: #000000">  </span><span style="color: #001080"><data-lsp lsp='(property) BuildableRequest.method: "get" | "post"' >method</data-lsp></span><span style="color: #000000">: </span><span style="color: #A31515">"get"</span><span style="color: #000000"> | </span><span style="color: #A31515">"post"</span><span style="color: #000000">;</span></div><div class='line'><span style="color: #000000">  </span><span style="color: #001080"><data-lsp lsp='(property) BuildableRequest.url: string' >url</data-lsp></span><span style="color: #000000">: </span><span style="color: #267F99">string</span><span style="color: #000000">;</span></div><div class='line'><span style="color: #000000">}</span></div><div class='line'>&nbsp;</div><div class='line'><span style="color: #0000FF">class</span><span style="color: #000000"> </span><span style="color: #267F99"><data-lsp lsp='class RequestBuilder2' >RequestBuilder2</data-lsp></span><span style="color: #000000"> {</span></div><div class='line'><span style="color: #000000">  </span><span style="color: #001080"><data-lsp lsp='(property) RequestBuilder2.data?: object | undefined' >data</data-lsp></span><span style="color: #000000">?: </span><span style="color: #267F99">object</span><span style="color: #000000">;</span></div><div class='line'><span style="color: #000000">  </span><span style="color: #001080"><data-lsp lsp='(property) RequestBuilder2.method?: "get" | "post" | undefined' >method</data-lsp></span><span style="color: #000000">?: </span><span style="color: #A31515">"get"</span><span style="color: #000000"> | </span><span style="color: #A31515">"post"</span><span style="color: #000000">;</span></div><div class='line'><span style="color: #000000">  </span><span style="color: #001080"><data-lsp lsp='(property) RequestBuilder2.url?: string | undefined' >url</data-lsp></span><span style="color: #000000">?: </span><span style="color: #267F99">string</span><span style="color: #000000">;</span></div><div class='line'>&nbsp;</div><div class='line'><span style="color: #000000">  </span><span style="color: #795E26"><data-lsp lsp='(method) RequestBuilder2.setData(data: object): this &amp; Pick&lt;BuildableRequest, "data">' >setData</data-lsp></span><span style="color: #000000">(</span><span style="color: #001080"><data-lsp lsp='(parameter) data: object' >data</data-lsp></span><span style="color: #000000">: </span><span style="color: #267F99">object</span><span style="color: #000000">): </span><span style="color: #267F99">this</span><span style="color: #000000"> & </span><span style="color: #267F99"><data-lsp lsp='type Pick&lt;T, K extends keyof T> = { [P in K]: T[P]; }' >Pick</data-lsp></span><span style="color: #000000">&lt;</span><span style="color: #267F99"><data-lsp lsp='interface BuildableRequest' >BuildableRequest</data-lsp></span><span style="color: #000000">, </span><span style="color: #A31515">"data"</span><span style="color: #000000">&gt; {</span></div><div class='line'><span style="color: #000000">    </span><span style="color: #AF00DB">return</span><span style="color: #000000"> </span><span style="color: #267F99"><data-lsp lsp='var Object: ObjectConstructor' >Object</data-lsp></span><span style="color: #000000">.</span><span style="color: #795E26"><data-lsp lsp='(method) ObjectConstructor.assign&lt;this, {&#10;    data: object;&#10;}>(target: this, source: {&#10;    data: object;&#10;}): this &amp; {&#10;    data: object;&#10;} (+3 overloads)' >assign</data-lsp></span><span style="color: #000000">(</span><span style="color: #0000FF">this</span><span style="color: #000000">, { </span><span style="color: #001080"><data-lsp lsp='(property) data: object' >data</data-lsp></span><span style="color: #000000"> });</span></div><div class='line'><span style="color: #000000">  }</span></div><div class='line'>&nbsp;</div><div class='line'><span style="color: #000000">  </span><span style="color: #795E26"><data-lsp lsp='(method) RequestBuilder2.setMethod(method: "get" | "post"): this &amp; Pick&lt;BuildableRequest, "method">' >setMethod</data-lsp></span><span style="color: #000000">(</span><span style="color: #001080"><data-lsp lsp='(parameter) method: "get" | "post"' >method</data-lsp></span><span style="color: #000000">: </span><span style="color: #A31515">"get"</span><span style="color: #000000"> | </span><span style="color: #A31515">"post"</span><span style="color: #000000">): </span><span style="color: #267F99">this</span><span style="color: #000000"> & </span><span style="color: #267F99"><data-lsp lsp='type Pick&lt;T, K extends keyof T> = { [P in K]: T[P]; }' >Pick</data-lsp></span><span style="color: #000000">&lt;</span><span style="color: #267F99"><data-lsp lsp='interface BuildableRequest' >BuildableRequest</data-lsp></span><span style="color: #000000">, </span><span style="color: #A31515">"method"</span><span style="color: #000000">&gt; {</span></div><div class='line'><span style="color: #000000">    </span><span style="color: #AF00DB">return</span><span style="color: #000000"> </span><span style="color: #267F99"><data-lsp lsp='var Object: ObjectConstructor' >Object</data-lsp></span><span style="color: #000000">.</span><span style="color: #795E26"><data-lsp lsp='(method) ObjectConstructor.assign&lt;this, {&#10;    method: "get" | "post";&#10;}>(target: this, source: {&#10;    method: "get" | "post";&#10;}): this &amp; {&#10;    method: "get" | "post";&#10;} (+3 overloads)' >assign</data-lsp></span><span style="color: #000000">(</span><span style="color: #0000FF">this</span><span style="color: #000000">, { </span><span style="color: #001080"><data-lsp lsp='(property) method: "get" | "post"' >method</data-lsp></span><span style="color: #000000"> });</span></div><div class='line'><span style="color: #000000">  }</span></div><div class='line'>&nbsp;</div><div class='line'><span style="color: #000000">  </span><span style="color: #795E26"><data-lsp lsp='(method) RequestBuilder2.setURL(url: string): this &amp; Pick&lt;BuildableRequest, "url">' >setURL</data-lsp></span><span style="color: #000000">(</span><span style="color: #001080"><data-lsp lsp='(parameter) url: string' >url</data-lsp></span><span style="color: #000000">: </span><span style="color: #267F99">string</span><span style="color: #000000">): </span><span style="color: #267F99">this</span><span style="color: #000000"> & </span><span style="color: #267F99"><data-lsp lsp='type Pick&lt;T, K extends keyof T> = { [P in K]: T[P]; }' >Pick</data-lsp></span><span style="color: #000000">&lt;</span><span style="color: #267F99"><data-lsp lsp='interface BuildableRequest' >BuildableRequest</data-lsp></span><span style="color: #000000">, </span><span style="color: #A31515">"url"</span><span style="color: #000000">&gt; {</span></div><div class='line'><span style="color: #000000">    </span><span style="color: #AF00DB">return</span><span style="color: #000000"> </span><span style="color: #267F99"><data-lsp lsp='var Object: ObjectConstructor' >Object</data-lsp></span><span style="color: #000000">.</span><span style="color: #795E26"><data-lsp lsp='(method) ObjectConstructor.assign&lt;this, {&#10;    url: string;&#10;}>(target: this, source: {&#10;    url: string;&#10;}): this &amp; {&#10;    url: string;&#10;} (+3 overloads)' >assign</data-lsp></span><span style="color: #000000">(</span><span style="color: #0000FF">this</span><span style="color: #000000">, { </span><span style="color: #001080"><data-lsp lsp='(property) url: string' >url</data-lsp></span><span style="color: #000000"> });</span></div><div class='line'><span style="color: #000000">  }</span></div><div class='line'>&nbsp;</div><div class='line'><span style="color: #000000">  </span><span style="color: #795E26"><data-lsp lsp='(method) RequestBuilder2.build(this: BuildableRequest): BuildableRequest' >build</data-lsp></span><span style="color: #000000">(</span><span style="color: #0000FF"><data-lsp lsp='(parameter) this: BuildableRequest' >this</data-lsp></span><span style="color: #000000">: </span><span style="color: #267F99"><data-lsp lsp='interface BuildableRequest' >BuildableRequest</data-lsp></span><span style="color: #000000">) {</span></div><div class='line'><span style="color: #000000">    </span><span style="color: #AF00DB">return</span><span style="color: #000000"> </span><span style="color: #0000FF">this</span><span style="color: #000000">;</span></div><div class='line'><span style="color: #000000">  }</span></div><div class='line'><span style="color: #000000">}</span></div><div class='line'>&nbsp;</div><div class='line'><span style="color: #0000FF">new</span><span style="color: #000000"> </span><span style="color: #795E26"><data-lsp lsp='constructor RequestBuilder2(): RequestBuilder2' >RequestBuilder2</data-lsp></span><span style="color: #000000">()</span></div><div class='line'><span style="color: #000000">  .</span><span style="color: #795E26"><data-lsp lsp='(method) RequestBuilder2.setMethod(method: "get" | "post"): RequestBuilder2 &amp; Pick&lt;BuildableRequest, "method">' >setMethod</data-lsp></span><span style="color: #000000">(</span><span style="color: #A31515">"post"</span><span style="color: #000000">) </span><span style="color: #008000">// Try removing me!</span></div><div class='line'><span style="color: #000000">  .</span><span style="color: #795E26"><data-lsp lsp='(method) RequestBuilder2.setURL(url: string): RequestBuilder2 &amp; Pick&lt;BuildableRequest, "method"> &amp; Pick&lt;BuildableRequest, "url">' >setURL</data-lsp></span><span style="color: #000000">(</span><span style="color: #A31515">"bar"</span><span style="color: #000000">) </span><span style="color: #008000">// Try removing me!</span></div><div class='line'><span style="color: #000000">  .</span><span style="color: #795E26"><data-lsp lsp='(method) RequestBuilder2.setData(data: object): RequestBuilder2 &amp; Pick&lt;BuildableRequest, "method"> &amp; Pick&lt;BuildableRequest, "url"> &amp; Pick&lt;BuildableRequest, "data">' >setData</data-lsp></span><span style="color: #000000">({})</span></div><div class='line'><span style="color: #000000">  .</span><span style="color: #795E26"><data-lsp lsp='(method) RequestBuilder2.build(this: BuildableRequest): BuildableRequest' >build</data-lsp></span><span style="color: #000000">();</span></div></code></div></pre>`;
  return (
    <div
      className="markdown-body"
      dangerouslySetInnerHTML={{ __html: innerHTML }}
    />
  );
}

export function Intro() {
  const innerHTML = `<h1 style="margin-bottom: 30px">《TypeScript 编程》读书笔记</h1>
<p>GitHub: <a href="https://github.com/banqinghe/programming-typescript-note/">https://github.com/banqinghe/programming-typescript-note/</a></p>`;
  return (
    <div
      className="markdown-body"
      dangerouslySetInnerHTML={{ __html: innerHTML }}
    />
  );
}